"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/d3-path";
exports.ids = ["vendor-chunks/d3-path"];
exports.modules = {

/***/ "(ssr)/./node_modules/d3-path/src/path.js":
/*!******************************************!*\
  !*** ./node_modules/d3-path/src/path.js ***!
  \******************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Path: () => (/* binding */ Path),\n/* harmony export */   path: () => (/* binding */ path),\n/* harmony export */   pathRound: () => (/* binding */ pathRound)\n/* harmony export */ });\nconst pi = Math.PI,\r\n    tau = 2 * pi,\r\n    epsilon = 1e-6,\r\n    tauEpsilon = tau - epsilon;\r\n\r\nfunction append(strings) {\r\n  this._ += strings[0];\r\n  for (let i = 1, n = strings.length; i < n; ++i) {\r\n    this._ += arguments[i] + strings[i];\r\n  }\r\n}\r\n\r\nfunction appendRound(digits) {\r\n  let d = Math.floor(digits);\r\n  if (!(d >= 0)) throw new Error(`invalid digits: ${digits}`);\r\n  if (d > 15) return append;\r\n  const k = 10 ** d;\r\n  return function(strings) {\r\n    this._ += strings[0];\r\n    for (let i = 1, n = strings.length; i < n; ++i) {\r\n      this._ += Math.round(arguments[i] * k) / k + strings[i];\r\n    }\r\n  };\r\n}\r\n\r\nclass Path {\r\n  constructor(digits) {\r\n    this._x0 = this._y0 = // start of current subpath\r\n    this._x1 = this._y1 = null; // end of current subpath\r\n    this._ = \"\";\r\n    this._append = digits == null ? append : appendRound(digits);\r\n  }\r\n  moveTo(x, y) {\r\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}`;\r\n  }\r\n  closePath() {\r\n    if (this._x1 !== null) {\r\n      this._x1 = this._x0, this._y1 = this._y0;\r\n      this._append`Z`;\r\n    }\r\n  }\r\n  lineTo(x, y) {\r\n    this._append`L${this._x1 = +x},${this._y1 = +y}`;\r\n  }\r\n  quadraticCurveTo(x1, y1, x, y) {\r\n    this._append`Q${+x1},${+y1},${this._x1 = +x},${this._y1 = +y}`;\r\n  }\r\n  bezierCurveTo(x1, y1, x2, y2, x, y) {\r\n    this._append`C${+x1},${+y1},${+x2},${+y2},${this._x1 = +x},${this._y1 = +y}`;\r\n  }\r\n  arcTo(x1, y1, x2, y2, r) {\r\n    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;\r\n\r\n    // Is the radius negative? Error.\r\n    if (r < 0) throw new Error(`negative radius: ${r}`);\r\n\r\n    let x0 = this._x1,\r\n        y0 = this._y1,\r\n        x21 = x2 - x1,\r\n        y21 = y2 - y1,\r\n        x01 = x0 - x1,\r\n        y01 = y0 - y1,\r\n        l01_2 = x01 * x01 + y01 * y01;\r\n\r\n    // Is this path empty? Move to (x1,y1).\r\n    if (this._x1 === null) {\r\n      this._append`M${this._x1 = x1},${this._y1 = y1}`;\r\n    }\r\n\r\n    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.\r\n    else if (!(l01_2 > epsilon));\r\n\r\n    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?\r\n    // Equivalently, is (x1,y1) coincident with (x2,y2)?\r\n    // Or, is the radius zero? Line to (x1,y1).\r\n    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {\r\n      this._append`L${this._x1 = x1},${this._y1 = y1}`;\r\n    }\r\n\r\n    // Otherwise, draw an arc!\r\n    else {\r\n      let x20 = x2 - x0,\r\n          y20 = y2 - y0,\r\n          l21_2 = x21 * x21 + y21 * y21,\r\n          l20_2 = x20 * x20 + y20 * y20,\r\n          l21 = Math.sqrt(l21_2),\r\n          l01 = Math.sqrt(l01_2),\r\n          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),\r\n          t01 = l / l01,\r\n          t21 = l / l21;\r\n\r\n      // If the start tangent is not coincident with (x0,y0), line to.\r\n      if (Math.abs(t01 - 1) > epsilon) {\r\n        this._append`L${x1 + t01 * x01},${y1 + t01 * y01}`;\r\n      }\r\n\r\n      this._append`A${r},${r},0,0,${+(y01 * x20 > x01 * y20)},${this._x1 = x1 + t21 * x21},${this._y1 = y1 + t21 * y21}`;\r\n    }\r\n  }\r\n  arc(x, y, r, a0, a1, ccw) {\r\n    x = +x, y = +y, r = +r, ccw = !!ccw;\r\n\r\n    // Is the radius negative? Error.\r\n    if (r < 0) throw new Error(`negative radius: ${r}`);\r\n\r\n    let dx = r * Math.cos(a0),\r\n        dy = r * Math.sin(a0),\r\n        x0 = x + dx,\r\n        y0 = y + dy,\r\n        cw = 1 ^ ccw,\r\n        da = ccw ? a0 - a1 : a1 - a0;\r\n\r\n    // Is this path empty? Move to (x0,y0).\r\n    if (this._x1 === null) {\r\n      this._append`M${x0},${y0}`;\r\n    }\r\n\r\n    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).\r\n    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {\r\n      this._append`L${x0},${y0}`;\r\n    }\r\n\r\n    // Is this arc empty? Weâ€™re done.\r\n    if (!r) return;\r\n\r\n    // Does the angle go the wrong way? Flip the direction.\r\n    if (da < 0) da = da % tau + tau;\r\n\r\n    // Is this a complete circle? Draw two arcs to complete the circle.\r\n    if (da > tauEpsilon) {\r\n      this._append`A${r},${r},0,1,${cw},${x - dx},${y - dy}A${r},${r},0,1,${cw},${this._x1 = x0},${this._y1 = y0}`;\r\n    }\r\n\r\n    // Is this arc non-empty? Draw an arc!\r\n    else if (da > epsilon) {\r\n      this._append`A${r},${r},0,${+(da >= pi)},${cw},${this._x1 = x + r * Math.cos(a1)},${this._y1 = y + r * Math.sin(a1)}`;\r\n    }\r\n  }\r\n  rect(x, y, w, h) {\r\n    this._append`M${this._x0 = this._x1 = +x},${this._y0 = this._y1 = +y}h${w = +w}v${+h}h${-w}Z`;\r\n  }\r\n  toString() {\r\n    return this._;\r\n  }\r\n}\r\n\r\nfunction path() {\r\n  return new Path;\r\n}\r\n\r\n// Allow instanceof d3.path\r\npath.prototype = Path.prototype;\r\n\r\nfunction pathRound(digits = 3) {\r\n  return new Path(+digits);\r\n}\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/d3-path/src/path.js\n");

/***/ })

};
;