"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@supabase";
exports.ids = ["vendor-chunks/@supabase"];
exports.modules = {

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/AuthAdminApi.js":
/*!********************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/AuthAdminApi.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _GoTrueAdminApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoTrueAdminApi */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js\");\n\r\nconst AuthAdminApi = _GoTrueAdminApi__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthAdminApi);\r\n//# sourceMappingURL=AuthAdminApi.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvQXV0aEFkbWluQXBpLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQThDO0FBQzlDLHFCQUFxQix1REFBYztBQUNuQyxpRUFBZSxZQUFZLEVBQUM7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvQXV0aEFkbWluQXBpLmpzP2QxZGUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdvVHJ1ZUFkbWluQXBpIGZyb20gJy4vR29UcnVlQWRtaW5BcGknO1xyXG5jb25zdCBBdXRoQWRtaW5BcGkgPSBHb1RydWVBZG1pbkFwaTtcclxuZXhwb3J0IGRlZmF1bHQgQXV0aEFkbWluQXBpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1BdXRoQWRtaW5BcGkuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/AuthAdminApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/AuthClient.js":
/*!******************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/AuthClient.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _GoTrueClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoTrueClient */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js\");\n\r\nconst AuthClient = _GoTrueClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (AuthClient);\r\n//# sourceMappingURL=AuthClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvQXV0aENsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUEwQztBQUMxQyxtQkFBbUIscURBQVk7QUFDL0IsaUVBQWUsVUFBVSxFQUFDO0FBQzFCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL0F1dGhDbGllbnQuanM/ZGQ2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgR29UcnVlQ2xpZW50IGZyb20gJy4vR29UcnVlQ2xpZW50JztcclxuY29uc3QgQXV0aENsaWVudCA9IEdvVHJ1ZUNsaWVudDtcclxuZXhwb3J0IGRlZmF1bHQgQXV0aENsaWVudDtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXV0aENsaWVudC5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/AuthClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ GoTrueAdminApi)\n/* harmony export */ });\n/* harmony import */ var _lib_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/fetch */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js\");\n/* harmony import */ var _lib_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/helpers */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js\");\n/* harmony import */ var _lib_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/types */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/types.js\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/errors */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js\");\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\nclass GoTrueAdminApi {\r\n    constructor({ url = '', headers = {}, fetch, }) {\r\n        this.url = url;\r\n        this.headers = headers;\r\n        this.fetch = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.resolveFetch)(fetch);\r\n        this.mfa = {\r\n            listFactors: this._listFactors.bind(this),\r\n            deleteFactor: this._deleteFactor.bind(this),\r\n        };\r\n        this.oauth = {\r\n            listClients: this._listOAuthClients.bind(this),\r\n            createClient: this._createOAuthClient.bind(this),\r\n            getClient: this._getOAuthClient.bind(this),\r\n            deleteClient: this._deleteOAuthClient.bind(this),\r\n            regenerateClientSecret: this._regenerateOAuthClientSecret.bind(this),\r\n        };\r\n    }\r\n    /**\r\n     * Removes a logged-in session.\r\n     * @param jwt A valid, logged-in JWT.\r\n     * @param scope The logout sope.\r\n     */\r\n    async signOut(jwt, scope = _lib_types__WEBPACK_IMPORTED_MODULE_2__.SIGN_OUT_SCOPES[0]) {\r\n        if (_lib_types__WEBPACK_IMPORTED_MODULE_2__.SIGN_OUT_SCOPES.indexOf(scope) < 0) {\r\n            throw new Error(`@supabase/auth-js: Parameter scope must be one of ${_lib_types__WEBPACK_IMPORTED_MODULE_2__.SIGN_OUT_SCOPES.join(', ')}`);\r\n        }\r\n        try {\r\n            await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/logout?scope=${scope}`, {\r\n                headers: this.headers,\r\n                jwt,\r\n                noResolveJson: true,\r\n            });\r\n            return { data: null, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Sends an invite link to an email address.\r\n     * @param email The email address of the user.\r\n     * @param options Additional options to be included when inviting.\r\n     */\r\n    async inviteUserByEmail(email, options = {}) {\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/invite`, {\r\n                body: { email, data: options.data },\r\n                headers: this.headers,\r\n                redirectTo: options.redirectTo,\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._userResponse,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: { user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Generates email links and OTPs to be sent via a custom email provider.\r\n     * @param email The user's email.\r\n     * @param options.password User password. For signup only.\r\n     * @param options.data Optional user metadata. For signup only.\r\n     * @param options.redirectTo The redirect url which should be appended to the generated link\r\n     */\r\n    async generateLink(params) {\r\n        try {\r\n            const { options } = params, rest = __rest(params, [\"options\"]);\r\n            const body = Object.assign(Object.assign({}, rest), options);\r\n            if ('newEmail' in rest) {\r\n                // replace newEmail with new_email in request body\r\n                body.new_email = rest === null || rest === void 0 ? void 0 : rest.newEmail;\r\n                delete body['newEmail'];\r\n            }\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/admin/generate_link`, {\r\n                body: body,\r\n                headers: this.headers,\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._generateLinkResponse,\r\n                redirectTo: options === null || options === void 0 ? void 0 : options.redirectTo,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return {\r\n                    data: {\r\n                        properties: null,\r\n                        user: null,\r\n                    },\r\n                    error,\r\n                };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    // User Admin API\r\n    /**\r\n     * Creates a new user.\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async createUser(attributes) {\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/admin/users`, {\r\n                body: attributes,\r\n                headers: this.headers,\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._userResponse,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: { user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Get a list of users.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     * @param params An object which supports `page` and `perPage` as numbers, to alter the paginated results.\r\n     */\r\n    async listUsers(params) {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        try {\r\n            const pagination = { nextPage: null, lastPage: 0, total: 0 };\r\n            const response = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'GET', `${this.url}/admin/users`, {\r\n                headers: this.headers,\r\n                noResolveJson: true,\r\n                query: {\r\n                    page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\r\n                    per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '',\r\n                },\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._noResolveJsonResponse,\r\n            });\r\n            if (response.error)\r\n                throw response.error;\r\n            const users = await response.json();\r\n            const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\r\n            const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\r\n            if (links.length > 0) {\r\n                links.forEach((link) => {\r\n                    const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\r\n                    const rel = JSON.parse(link.split(';')[1].split('=')[1]);\r\n                    pagination[`${rel}Page`] = page;\r\n                });\r\n                pagination.total = parseInt(total);\r\n            }\r\n            return { data: Object.assign(Object.assign({}, users), pagination), error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: { users: [] }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Get user by id.\r\n     *\r\n     * @param uid The user's unique identifier\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async getUserById(uid) {\r\n        (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.validateUUID)(uid);\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'GET', `${this.url}/admin/users/${uid}`, {\r\n                headers: this.headers,\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._userResponse,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: { user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Updates the user data.\r\n     *\r\n     * @param attributes The data you want to update.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async updateUserById(uid, attributes) {\r\n        (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.validateUUID)(uid);\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'PUT', `${this.url}/admin/users/${uid}`, {\r\n                body: attributes,\r\n                headers: this.headers,\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._userResponse,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: { user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Delete a user. Requires a `service_role` key.\r\n     *\r\n     * @param id The user id you want to remove.\r\n     * @param shouldSoftDelete If true, then the user will be soft-deleted from the auth schema. Soft deletion allows user identification from the hashed user ID but is not reversible.\r\n     * Defaults to false for backward compatibility.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async deleteUser(id, shouldSoftDelete = false) {\r\n        (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.validateUUID)(id);\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'DELETE', `${this.url}/admin/users/${id}`, {\r\n                headers: this.headers,\r\n                body: {\r\n                    should_soft_delete: shouldSoftDelete,\r\n                },\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._userResponse,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: { user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async _listFactors(params) {\r\n        (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.validateUUID)(params.userId);\r\n        try {\r\n            const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'GET', `${this.url}/admin/users/${params.userId}/factors`, {\r\n                headers: this.headers,\r\n                xform: (factors) => {\r\n                    return { data: { factors }, error: null };\r\n                },\r\n            });\r\n            return { data, error };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async _deleteFactor(params) {\r\n        (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.validateUUID)(params.userId);\r\n        (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.validateUUID)(params.id);\r\n        try {\r\n            const data = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'DELETE', `${this.url}/admin/users/${params.userId}/factors/${params.id}`, {\r\n                headers: this.headers,\r\n            });\r\n            return { data, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Lists all OAuth clients with optional pagination.\r\n     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async _listOAuthClients(params) {\r\n        var _a, _b, _c, _d, _e, _f, _g;\r\n        try {\r\n            const pagination = { nextPage: null, lastPage: 0, total: 0 };\r\n            const response = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'GET', `${this.url}/admin/oauth/clients`, {\r\n                headers: this.headers,\r\n                noResolveJson: true,\r\n                query: {\r\n                    page: (_b = (_a = params === null || params === void 0 ? void 0 : params.page) === null || _a === void 0 ? void 0 : _a.toString()) !== null && _b !== void 0 ? _b : '',\r\n                    per_page: (_d = (_c = params === null || params === void 0 ? void 0 : params.perPage) === null || _c === void 0 ? void 0 : _c.toString()) !== null && _d !== void 0 ? _d : '',\r\n                },\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_0__._noResolveJsonResponse,\r\n            });\r\n            if (response.error)\r\n                throw response.error;\r\n            const clients = await response.json();\r\n            const total = (_e = response.headers.get('x-total-count')) !== null && _e !== void 0 ? _e : 0;\r\n            const links = (_g = (_f = response.headers.get('link')) === null || _f === void 0 ? void 0 : _f.split(',')) !== null && _g !== void 0 ? _g : [];\r\n            if (links.length > 0) {\r\n                links.forEach((link) => {\r\n                    const page = parseInt(link.split(';')[0].split('=')[1].substring(0, 1));\r\n                    const rel = JSON.parse(link.split(';')[1].split('=')[1]);\r\n                    pagination[`${rel}Page`] = page;\r\n                });\r\n                pagination.total = parseInt(total);\r\n            }\r\n            return { data: Object.assign(Object.assign({}, clients), pagination), error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: { clients: [] }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new OAuth client.\r\n     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async _createOAuthClient(params) {\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/admin/oauth/clients`, {\r\n                body: params,\r\n                headers: this.headers,\r\n                xform: (client) => {\r\n                    return { data: client, error: null };\r\n                },\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Gets details of a specific OAuth client.\r\n     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async _getOAuthClient(clientId) {\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'GET', `${this.url}/admin/oauth/clients/${clientId}`, {\r\n                headers: this.headers,\r\n                xform: (client) => {\r\n                    return { data: client, error: null };\r\n                },\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Deletes an OAuth client.\r\n     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async _deleteOAuthClient(clientId) {\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'DELETE', `${this.url}/admin/oauth/clients/${clientId}`, {\r\n                headers: this.headers,\r\n                xform: (client) => {\r\n                    return { data: client, error: null };\r\n                },\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Regenerates the secret for an OAuth client.\r\n     * Only relevant when the OAuth 2.1 server is enabled in Supabase Auth.\r\n     *\r\n     * This function should only be called on a server. Never expose your `service_role` key in the browser.\r\n     */\r\n    async _regenerateOAuthClientSecret(clientId) {\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_0__._request)(this.fetch, 'POST', `${this.url}/admin/oauth/clients/${clientId}/regenerate_secret`, {\r\n                headers: this.headers,\r\n                xform: (client) => {\r\n                    return { data: client, error: null };\r\n                },\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=GoTrueAdminApi.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js":
/*!********************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _GoTrueAdminApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoTrueAdminApi */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/constants */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/constants.js\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/errors */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js\");\n/* harmony import */ var _lib_fetch__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/fetch */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js\");\n/* harmony import */ var _lib_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/helpers */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js\");\n/* harmony import */ var _lib_local_storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/local-storage */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/local-storage.js\");\n/* harmony import */ var _lib_locks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/locks */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/locks.js\");\n/* harmony import */ var _lib_polyfills__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/polyfills */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/polyfills.js\");\n/* harmony import */ var _lib_version__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./lib/version */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/version.js\");\n/* harmony import */ var _lib_base64url__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./lib/base64url */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/base64url.js\");\n/* harmony import */ var _lib_web3_ethereum__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./lib/web3/ethereum */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/web3/ethereum.js\");\n/* harmony import */ var _lib_webauthn__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./lib/webauthn */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/webauthn.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n(0,_lib_polyfills__WEBPACK_IMPORTED_MODULE_7__.polyfillGlobalThis)(); // Make \"globalThis\" available\r\nconst DEFAULT_OPTIONS = {\r\n    url: _lib_constants__WEBPACK_IMPORTED_MODULE_1__.GOTRUE_URL,\r\n    storageKey: _lib_constants__WEBPACK_IMPORTED_MODULE_1__.STORAGE_KEY,\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true,\r\n    headers: _lib_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_HEADERS,\r\n    flowType: 'implicit',\r\n    debug: false,\r\n    hasCustomAuthorizationHeader: false,\r\n};\r\nasync function lockNoOp(name, acquireTimeout, fn) {\r\n    return await fn();\r\n}\r\n/**\r\n * Caches JWKS values for all clients created in the same environment. This is\r\n * especially useful for shared-memory execution environments such as Vercel's\r\n * Fluid Compute, AWS Lambda or Supabase's Edge Functions. Regardless of how\r\n * many clients are created, if they share the same storage key they will use\r\n * the same JWKS cache, significantly speeding up getClaims() with asymmetric\r\n * JWTs.\r\n */\r\nconst GLOBAL_JWKS = {};\r\nclass GoTrueClient {\r\n    /**\r\n     * The JWKS used for verifying asymmetric JWTs\r\n     */\r\n    get jwks() {\r\n        var _a, _b;\r\n        return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.jwks) !== null && _b !== void 0 ? _b : { keys: [] };\r\n    }\r\n    set jwks(value) {\r\n        GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), { jwks: value });\r\n    }\r\n    get jwks_cached_at() {\r\n        var _a, _b;\r\n        return (_b = (_a = GLOBAL_JWKS[this.storageKey]) === null || _a === void 0 ? void 0 : _a.cachedAt) !== null && _b !== void 0 ? _b : Number.MIN_SAFE_INTEGER;\r\n    }\r\n    set jwks_cached_at(value) {\r\n        GLOBAL_JWKS[this.storageKey] = Object.assign(Object.assign({}, GLOBAL_JWKS[this.storageKey]), { cachedAt: value });\r\n    }\r\n    /**\r\n     * Create a new client for use in the browser.\r\n     */\r\n    constructor(options) {\r\n        var _a, _b;\r\n        /**\r\n         * @experimental\r\n         */\r\n        this.userStorage = null;\r\n        this.memoryStorage = null;\r\n        this.stateChangeEmitters = new Map();\r\n        this.autoRefreshTicker = null;\r\n        this.visibilityChangedCallback = null;\r\n        this.refreshingDeferred = null;\r\n        /**\r\n         * Keeps track of the async client initialization.\r\n         * When null or not yet resolved the auth state is `unknown`\r\n         * Once resolved the auth state is known and it's safe to call any further client methods.\r\n         * Keep extra care to never reject or throw uncaught errors\r\n         */\r\n        this.initializePromise = null;\r\n        this.detectSessionInUrl = true;\r\n        this.hasCustomAuthorizationHeader = false;\r\n        this.suppressGetSessionWarning = false;\r\n        this.lockAcquired = false;\r\n        this.pendingInLock = [];\r\n        /**\r\n         * Used to broadcast state change events to other tabs listening.\r\n         */\r\n        this.broadcastChannel = null;\r\n        this.logger = console.log;\r\n        this.instanceID = GoTrueClient.nextInstanceID;\r\n        GoTrueClient.nextInstanceID += 1;\r\n        if (this.instanceID > 0 && (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)()) {\r\n            console.warn('Multiple GoTrueClient instances detected in the same browser context. It is not an error, but this should be avoided as it may produce undefined behavior when used concurrently under the same storage key.');\r\n        }\r\n        const settings = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\r\n        this.logDebugMessages = !!settings.debug;\r\n        if (typeof settings.debug === 'function') {\r\n            this.logger = settings.debug;\r\n        }\r\n        this.persistSession = settings.persistSession;\r\n        this.storageKey = settings.storageKey;\r\n        this.autoRefreshToken = settings.autoRefreshToken;\r\n        this.admin = new _GoTrueAdminApi__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\r\n            url: settings.url,\r\n            headers: settings.headers,\r\n            fetch: settings.fetch,\r\n        });\r\n        this.url = settings.url;\r\n        this.headers = settings.headers;\r\n        this.fetch = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.resolveFetch)(settings.fetch);\r\n        this.lock = settings.lock || lockNoOp;\r\n        this.detectSessionInUrl = settings.detectSessionInUrl;\r\n        this.flowType = settings.flowType;\r\n        this.hasCustomAuthorizationHeader = settings.hasCustomAuthorizationHeader;\r\n        if (settings.lock) {\r\n            this.lock = settings.lock;\r\n        }\r\n        else if ((0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)() && ((_a = globalThis === null || globalThis === void 0 ? void 0 : globalThis.navigator) === null || _a === void 0 ? void 0 : _a.locks)) {\r\n            this.lock = _lib_locks__WEBPACK_IMPORTED_MODULE_6__.navigatorLock;\r\n        }\r\n        else {\r\n            this.lock = lockNoOp;\r\n        }\r\n        if (!this.jwks) {\r\n            this.jwks = { keys: [] };\r\n            this.jwks_cached_at = Number.MIN_SAFE_INTEGER;\r\n        }\r\n        this.mfa = {\r\n            verify: this._verify.bind(this),\r\n            enroll: this._enroll.bind(this),\r\n            unenroll: this._unenroll.bind(this),\r\n            challenge: this._challenge.bind(this),\r\n            listFactors: this._listFactors.bind(this),\r\n            challengeAndVerify: this._challengeAndVerify.bind(this),\r\n            getAuthenticatorAssuranceLevel: this._getAuthenticatorAssuranceLevel.bind(this),\r\n            webauthn: new _lib_webauthn__WEBPACK_IMPORTED_MODULE_11__.WebAuthnApi(this),\r\n        };\r\n        if (this.persistSession) {\r\n            if (settings.storage) {\r\n                this.storage = settings.storage;\r\n            }\r\n            else {\r\n                if ((0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.supportsLocalStorage)()) {\r\n                    this.storage = globalThis.localStorage;\r\n                }\r\n                else {\r\n                    this.memoryStorage = {};\r\n                    this.storage = (0,_lib_local_storage__WEBPACK_IMPORTED_MODULE_5__.memoryLocalStorageAdapter)(this.memoryStorage);\r\n                }\r\n            }\r\n            if (settings.userStorage) {\r\n                this.userStorage = settings.userStorage;\r\n            }\r\n        }\r\n        else {\r\n            this.memoryStorage = {};\r\n            this.storage = (0,_lib_local_storage__WEBPACK_IMPORTED_MODULE_5__.memoryLocalStorageAdapter)(this.memoryStorage);\r\n        }\r\n        if ((0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)() && globalThis.BroadcastChannel && this.persistSession && this.storageKey) {\r\n            try {\r\n                this.broadcastChannel = new globalThis.BroadcastChannel(this.storageKey);\r\n            }\r\n            catch (e) {\r\n                console.error('Failed to create a new BroadcastChannel, multi-tab state changes will not be available', e);\r\n            }\r\n            (_b = this.broadcastChannel) === null || _b === void 0 ? void 0 : _b.addEventListener('message', async (event) => {\r\n                this._debug('received broadcast notification from other tab or client', event);\r\n                await this._notifyAllSubscribers(event.data.event, event.data.session, false); // broadcast = false so we don't get an endless loop of messages\r\n            });\r\n        }\r\n        this.initialize();\r\n    }\r\n    _debug(...args) {\r\n        if (this.logDebugMessages) {\r\n            this.logger(`GoTrueClient@${this.instanceID} (${_lib_version__WEBPACK_IMPORTED_MODULE_8__.version}) ${new Date().toISOString()}`, ...args);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Initializes the client session either from the url or from storage.\r\n     * This method is automatically called when instantiating the client, but should also be called\r\n     * manually when checking for an error from an auth redirect (oauth, magiclink, password recovery, etc).\r\n     */\r\n    async initialize() {\r\n        if (this.initializePromise) {\r\n            return await this.initializePromise;\r\n        }\r\n        this.initializePromise = (async () => {\r\n            return await this._acquireLock(-1, async () => {\r\n                return await this._initialize();\r\n            });\r\n        })();\r\n        return await this.initializePromise;\r\n    }\r\n    /**\r\n     * IMPORTANT:\r\n     * 1. Never throw in this method, as it is called from the constructor\r\n     * 2. Never return a session from this method as it would be cached over\r\n     *    the whole lifetime of the client\r\n     */\r\n    async _initialize() {\r\n        var _a;\r\n        try {\r\n            const params = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.parseParametersFromURL)(window.location.href);\r\n            let callbackUrlType = 'none';\r\n            if (this._isImplicitGrantCallback(params)) {\r\n                callbackUrlType = 'implicit';\r\n            }\r\n            else if (await this._isPKCECallback(params)) {\r\n                callbackUrlType = 'pkce';\r\n            }\r\n            /**\r\n             * Attempt to get the session from the URL only if these conditions are fulfilled\r\n             *\r\n             * Note: If the URL isn't one of the callback url types (implicit or pkce),\r\n             * then there could be an existing session so we don't want to prematurely remove it\r\n             */\r\n            if ((0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)() && this.detectSessionInUrl && callbackUrlType !== 'none') {\r\n                const { data, error } = await this._getSessionFromURL(params, callbackUrlType);\r\n                if (error) {\r\n                    this._debug('#_initialize()', 'error detecting session from URL', error);\r\n                    if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthImplicitGrantRedirectError)(error)) {\r\n                        const errorCode = (_a = error.details) === null || _a === void 0 ? void 0 : _a.code;\r\n                        if (errorCode === 'identity_already_exists' ||\r\n                            errorCode === 'identity_not_found' ||\r\n                            errorCode === 'single_identity_not_deletable') {\r\n                            return { error };\r\n                        }\r\n                    }\r\n                    // failed login attempt via url,\r\n                    // remove old session as in verifyOtp, signUp and signInWith*\r\n                    await this._removeSession();\r\n                    return { error };\r\n                }\r\n                const { session, redirectType } = data;\r\n                this._debug('#_initialize()', 'detected session in URL', session, 'redirect type', redirectType);\r\n                await this._saveSession(session);\r\n                setTimeout(async () => {\r\n                    if (redirectType === 'recovery') {\r\n                        await this._notifyAllSubscribers('PASSWORD_RECOVERY', session);\r\n                    }\r\n                    else {\r\n                        await this._notifyAllSubscribers('SIGNED_IN', session);\r\n                    }\r\n                }, 0);\r\n                return { error: null };\r\n            }\r\n            // no login attempt via callback url try to recover session from storage\r\n            await this._recoverAndRefresh();\r\n            return { error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { error };\r\n            }\r\n            return {\r\n                error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthUnknownError('Unexpected error during initialization', error),\r\n            };\r\n        }\r\n        finally {\r\n            await this._handleVisibilityChange();\r\n            this._debug('#_initialize()', 'end');\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new anonymous user.\r\n     *\r\n     * @returns A session where the is_anonymous claim in the access token JWT set to true\r\n     */\r\n    async signInAnonymously(credentials) {\r\n        var _a, _b, _c;\r\n        try {\r\n            const res = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/signup`, {\r\n                headers: this.headers,\r\n                body: {\r\n                    data: (_b = (_a = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : {},\r\n                    gotrue_meta_security: { captcha_token: (_c = credentials === null || credentials === void 0 ? void 0 : credentials.options) === null || _c === void 0 ? void 0 : _c.captchaToken },\r\n                },\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n            });\r\n            const { data, error } = res;\r\n            if (error || !data) {\r\n                return { data: { user: null, session: null }, error: error };\r\n            }\r\n            const session = data.session;\r\n            const user = data.user;\r\n            if (data.session) {\r\n                await this._saveSession(data.session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', session);\r\n            }\r\n            return { data: { user, session }, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Creates a new user.\r\n     *\r\n     * Be aware that if a user account exists in the system you may get back an\r\n     * error message that attempts to hide this information from the user.\r\n     * This method has support for PKCE via email signups. The PKCE flow cannot be used when autoconfirm is enabled.\r\n     *\r\n     * @returns A logged-in session if the server has \"autoconfirm\" ON\r\n     * @returns A user if the server has \"autoconfirm\" OFF\r\n     */\r\n    async signUp(credentials) {\r\n        var _a, _b, _c;\r\n        try {\r\n            let res;\r\n            if ('email' in credentials) {\r\n                const { email, password, options } = credentials;\r\n                let codeChallenge = null;\r\n                let codeChallengeMethod = null;\r\n                if (this.flowType === 'pkce') {\r\n                    ;\r\n                    [codeChallenge, codeChallengeMethod] = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getCodeChallengeAndMethod)(this.storage, this.storageKey);\r\n                }\r\n                res = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/signup`, {\r\n                    headers: this.headers,\r\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\r\n                    body: {\r\n                        email,\r\n                        password,\r\n                        data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                        code_challenge: codeChallenge,\r\n                        code_challenge_method: codeChallengeMethod,\r\n                    },\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n                });\r\n            }\r\n            else if ('phone' in credentials) {\r\n                const { phone, password, options } = credentials;\r\n                res = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/signup`, {\r\n                    headers: this.headers,\r\n                    body: {\r\n                        phone,\r\n                        password,\r\n                        data: (_b = options === null || options === void 0 ? void 0 : options.data) !== null && _b !== void 0 ? _b : {},\r\n                        channel: (_c = options === null || options === void 0 ? void 0 : options.channel) !== null && _c !== void 0 ? _c : 'sms',\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                    },\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n                });\r\n            }\r\n            else {\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\r\n            }\r\n            const { data, error } = res;\r\n            if (error || !data) {\r\n                return { data: { user: null, session: null }, error: error };\r\n            }\r\n            const session = data.session;\r\n            const user = data.user;\r\n            if (data.session) {\r\n                await this._saveSession(data.session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', session);\r\n            }\r\n            return { data: { user, session }, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Log in an existing user with an email and password or phone and password.\r\n     *\r\n     * Be aware that you may get back an error message that will not distinguish\r\n     * between the cases where the account does not exist or that the\r\n     * email/phone and password combination is wrong or that the account can only\r\n     * be accessed via social login.\r\n     */\r\n    async signInWithPassword(credentials) {\r\n        try {\r\n            let res;\r\n            if ('email' in credentials) {\r\n                const { email, password, options } = credentials;\r\n                res = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\r\n                    headers: this.headers,\r\n                    body: {\r\n                        email,\r\n                        password,\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                    },\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponsePassword,\r\n                });\r\n            }\r\n            else if ('phone' in credentials) {\r\n                const { phone, password, options } = credentials;\r\n                res = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=password`, {\r\n                    headers: this.headers,\r\n                    body: {\r\n                        phone,\r\n                        password,\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                    },\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponsePassword,\r\n                });\r\n            }\r\n            else {\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidCredentialsError('You must provide either an email or phone number and a password');\r\n            }\r\n            const { data, error } = res;\r\n            if (error) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            else if (!data || !data.session || !data.user) {\r\n                return { data: { user: null, session: null }, error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidTokenResponseError() };\r\n            }\r\n            if (data.session) {\r\n                await this._saveSession(data.session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\r\n            }\r\n            return {\r\n                data: Object.assign({ user: data.user, session: data.session }, (data.weak_password ? { weakPassword: data.weak_password } : null)),\r\n                error,\r\n            };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Log in an existing user via a third-party provider.\r\n     * This method supports the PKCE flow.\r\n     */\r\n    async signInWithOAuth(credentials) {\r\n        var _a, _b, _c, _d;\r\n        return await this._handleProviderSignIn(credentials.provider, {\r\n            redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\r\n            scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\r\n            queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\r\n            skipBrowserRedirect: (_d = credentials.options) === null || _d === void 0 ? void 0 : _d.skipBrowserRedirect,\r\n        });\r\n    }\r\n    /**\r\n     * Log in an existing user by exchanging an Auth Code issued during the PKCE flow.\r\n     */\r\n    async exchangeCodeForSession(authCode) {\r\n        await this.initializePromise;\r\n        return this._acquireLock(-1, async () => {\r\n            return this._exchangeCodeForSession(authCode);\r\n        });\r\n    }\r\n    /**\r\n     * Signs in a user by verifying a message signed by the user's private key.\r\n     * Supports Ethereum (via Sign-In-With-Ethereum) & Solana (Sign-In-With-Solana) standards,\r\n     * both of which derive from the EIP-4361 standard\r\n     * With slight variation on Solana's side.\r\n     * @reference https://eips.ethereum.org/EIPS/eip-4361\r\n     */\r\n    async signInWithWeb3(credentials) {\r\n        const { chain } = credentials;\r\n        switch (chain) {\r\n            case 'ethereum':\r\n                return await this.signInWithEthereum(credentials);\r\n            case 'solana':\r\n                return await this.signInWithSolana(credentials);\r\n            default:\r\n                throw new Error(`@supabase/auth-js: Unsupported chain \"${chain}\"`);\r\n        }\r\n    }\r\n    async signInWithEthereum(credentials) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;\r\n        // TODO: flatten type\r\n        let message;\r\n        let signature;\r\n        if ('message' in credentials) {\r\n            message = credentials.message;\r\n            signature = credentials.signature;\r\n        }\r\n        else {\r\n            const { chain, wallet, statement, options } = credentials;\r\n            let resolvedWallet;\r\n            if (!(0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)()) {\r\n                if (typeof wallet !== 'object' || !(options === null || options === void 0 ? void 0 : options.url)) {\r\n                    throw new Error('@supabase/auth-js: Both wallet and url must be specified in non-browser environments.');\r\n                }\r\n                resolvedWallet = wallet;\r\n            }\r\n            else if (typeof wallet === 'object') {\r\n                resolvedWallet = wallet;\r\n            }\r\n            else {\r\n                const windowAny = window;\r\n                if ('ethereum' in windowAny &&\r\n                    typeof windowAny.ethereum === 'object' &&\r\n                    'request' in windowAny.ethereum &&\r\n                    typeof windowAny.ethereum.request === 'function') {\r\n                    resolvedWallet = windowAny.ethereum;\r\n                }\r\n                else {\r\n                    throw new Error(`@supabase/auth-js: No compatible Ethereum wallet interface on the window object (window.ethereum) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'ethereum', wallet: resolvedUserWallet }) instead.`);\r\n                }\r\n            }\r\n            const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);\r\n            const accounts = await resolvedWallet\r\n                .request({\r\n                method: 'eth_requestAccounts',\r\n            })\r\n                .then((accs) => accs)\r\n                .catch(() => {\r\n                throw new Error(`@supabase/auth-js: Wallet method eth_requestAccounts is missing or invalid`);\r\n            });\r\n            if (!accounts || accounts.length === 0) {\r\n                throw new Error(`@supabase/auth-js: No accounts available. Please ensure the wallet is connected.`);\r\n            }\r\n            const address = (0,_lib_web3_ethereum__WEBPACK_IMPORTED_MODULE_10__.getAddress)(accounts[0]);\r\n            let chainId = (_b = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _b === void 0 ? void 0 : _b.chainId;\r\n            if (!chainId) {\r\n                const chainIdHex = await resolvedWallet.request({\r\n                    method: 'eth_chainId',\r\n                });\r\n                chainId = (0,_lib_web3_ethereum__WEBPACK_IMPORTED_MODULE_10__.fromHex)(chainIdHex);\r\n            }\r\n            const siweMessage = {\r\n                domain: url.host,\r\n                address: address,\r\n                statement: statement,\r\n                uri: url.href,\r\n                version: '1',\r\n                chainId: chainId,\r\n                nonce: (_c = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _c === void 0 ? void 0 : _c.nonce,\r\n                issuedAt: (_e = (_d = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _d === void 0 ? void 0 : _d.issuedAt) !== null && _e !== void 0 ? _e : new Date(),\r\n                expirationTime: (_f = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _f === void 0 ? void 0 : _f.expirationTime,\r\n                notBefore: (_g = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _g === void 0 ? void 0 : _g.notBefore,\r\n                requestId: (_h = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _h === void 0 ? void 0 : _h.requestId,\r\n                resources: (_j = options === null || options === void 0 ? void 0 : options.signInWithEthereum) === null || _j === void 0 ? void 0 : _j.resources,\r\n            };\r\n            message = (0,_lib_web3_ethereum__WEBPACK_IMPORTED_MODULE_10__.createSiweMessage)(siweMessage);\r\n            // Sign message\r\n            signature = (await resolvedWallet.request({\r\n                method: 'personal_sign',\r\n                params: [(0,_lib_web3_ethereum__WEBPACK_IMPORTED_MODULE_10__.toHex)(message), address],\r\n            }));\r\n        }\r\n        try {\r\n            const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=web3`, {\r\n                headers: this.headers,\r\n                body: Object.assign({ chain: 'ethereum', message,\r\n                    signature }, (((_k = credentials.options) === null || _k === void 0 ? void 0 : _k.captchaToken)\r\n                    ? { gotrue_meta_security: { captcha_token: (_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken } }\r\n                    : null)),\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n            });\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            if (!data || !data.session || !data.user) {\r\n                return {\r\n                    data: { user: null, session: null },\r\n                    error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidTokenResponseError(),\r\n                };\r\n            }\r\n            if (data.session) {\r\n                await this._saveSession(data.session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\r\n            }\r\n            return { data: Object.assign({}, data), error };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async signInWithSolana(credentials) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\r\n        let message;\r\n        let signature;\r\n        if ('message' in credentials) {\r\n            message = credentials.message;\r\n            signature = credentials.signature;\r\n        }\r\n        else {\r\n            const { chain, wallet, statement, options } = credentials;\r\n            let resolvedWallet;\r\n            if (!(0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)()) {\r\n                if (typeof wallet !== 'object' || !(options === null || options === void 0 ? void 0 : options.url)) {\r\n                    throw new Error('@supabase/auth-js: Both wallet and url must be specified in non-browser environments.');\r\n                }\r\n                resolvedWallet = wallet;\r\n            }\r\n            else if (typeof wallet === 'object') {\r\n                resolvedWallet = wallet;\r\n            }\r\n            else {\r\n                const windowAny = window;\r\n                if ('solana' in windowAny &&\r\n                    typeof windowAny.solana === 'object' &&\r\n                    (('signIn' in windowAny.solana && typeof windowAny.solana.signIn === 'function') ||\r\n                        ('signMessage' in windowAny.solana &&\r\n                            typeof windowAny.solana.signMessage === 'function'))) {\r\n                    resolvedWallet = windowAny.solana;\r\n                }\r\n                else {\r\n                    throw new Error(`@supabase/auth-js: No compatible Solana wallet interface on the window object (window.solana) detected. Make sure the user already has a wallet installed and connected for this app. Prefer passing the wallet interface object directly to signInWithWeb3({ chain: 'solana', wallet: resolvedUserWallet }) instead.`);\r\n                }\r\n            }\r\n            const url = new URL((_a = options === null || options === void 0 ? void 0 : options.url) !== null && _a !== void 0 ? _a : window.location.href);\r\n            if ('signIn' in resolvedWallet && resolvedWallet.signIn) {\r\n                const output = await resolvedWallet.signIn(Object.assign(Object.assign(Object.assign({ issuedAt: new Date().toISOString() }, options === null || options === void 0 ? void 0 : options.signInWithSolana), { \r\n                    // non-overridable properties\r\n                    version: '1', domain: url.host, uri: url.href }), (statement ? { statement } : null)));\r\n                let outputToProcess;\r\n                if (Array.isArray(output) && output[0] && typeof output[0] === 'object') {\r\n                    outputToProcess = output[0];\r\n                }\r\n                else if (output &&\r\n                    typeof output === 'object' &&\r\n                    'signedMessage' in output &&\r\n                    'signature' in output) {\r\n                    outputToProcess = output;\r\n                }\r\n                else {\r\n                    throw new Error('@supabase/auth-js: Wallet method signIn() returned unrecognized value');\r\n                }\r\n                if ('signedMessage' in outputToProcess &&\r\n                    'signature' in outputToProcess &&\r\n                    (typeof outputToProcess.signedMessage === 'string' ||\r\n                        outputToProcess.signedMessage instanceof Uint8Array) &&\r\n                    outputToProcess.signature instanceof Uint8Array) {\r\n                    message =\r\n                        typeof outputToProcess.signedMessage === 'string'\r\n                            ? outputToProcess.signedMessage\r\n                            : new TextDecoder().decode(outputToProcess.signedMessage);\r\n                    signature = outputToProcess.signature;\r\n                }\r\n                else {\r\n                    throw new Error('@supabase/auth-js: Wallet method signIn() API returned object without signedMessage and signature fields');\r\n                }\r\n            }\r\n            else {\r\n                if (!('signMessage' in resolvedWallet) ||\r\n                    typeof resolvedWallet.signMessage !== 'function' ||\r\n                    !('publicKey' in resolvedWallet) ||\r\n                    typeof resolvedWallet !== 'object' ||\r\n                    !resolvedWallet.publicKey ||\r\n                    !('toBase58' in resolvedWallet.publicKey) ||\r\n                    typeof resolvedWallet.publicKey.toBase58 !== 'function') {\r\n                    throw new Error('@supabase/auth-js: Wallet does not have a compatible signMessage() and publicKey.toBase58() API');\r\n                }\r\n                message = [\r\n                    `${url.host} wants you to sign in with your Solana account:`,\r\n                    resolvedWallet.publicKey.toBase58(),\r\n                    ...(statement ? ['', statement, ''] : ['']),\r\n                    'Version: 1',\r\n                    `URI: ${url.href}`,\r\n                    `Issued At: ${(_c = (_b = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _b === void 0 ? void 0 : _b.issuedAt) !== null && _c !== void 0 ? _c : new Date().toISOString()}`,\r\n                    ...(((_d = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _d === void 0 ? void 0 : _d.notBefore)\r\n                        ? [`Not Before: ${options.signInWithSolana.notBefore}`]\r\n                        : []),\r\n                    ...(((_e = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _e === void 0 ? void 0 : _e.expirationTime)\r\n                        ? [`Expiration Time: ${options.signInWithSolana.expirationTime}`]\r\n                        : []),\r\n                    ...(((_f = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _f === void 0 ? void 0 : _f.chainId)\r\n                        ? [`Chain ID: ${options.signInWithSolana.chainId}`]\r\n                        : []),\r\n                    ...(((_g = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _g === void 0 ? void 0 : _g.nonce) ? [`Nonce: ${options.signInWithSolana.nonce}`] : []),\r\n                    ...(((_h = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _h === void 0 ? void 0 : _h.requestId)\r\n                        ? [`Request ID: ${options.signInWithSolana.requestId}`]\r\n                        : []),\r\n                    ...(((_k = (_j = options === null || options === void 0 ? void 0 : options.signInWithSolana) === null || _j === void 0 ? void 0 : _j.resources) === null || _k === void 0 ? void 0 : _k.length)\r\n                        ? [\r\n                            'Resources',\r\n                            ...options.signInWithSolana.resources.map((resource) => `- ${resource}`),\r\n                        ]\r\n                        : []),\r\n                ].join('\\n');\r\n                const maybeSignature = await resolvedWallet.signMessage(new TextEncoder().encode(message), 'utf8');\r\n                if (!maybeSignature || !(maybeSignature instanceof Uint8Array)) {\r\n                    throw new Error('@supabase/auth-js: Wallet signMessage() API returned an recognized value');\r\n                }\r\n                signature = maybeSignature;\r\n            }\r\n        }\r\n        try {\r\n            const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=web3`, {\r\n                headers: this.headers,\r\n                body: Object.assign({ chain: 'solana', message, signature: (0,_lib_base64url__WEBPACK_IMPORTED_MODULE_9__.bytesToBase64URL)(signature) }, (((_l = credentials.options) === null || _l === void 0 ? void 0 : _l.captchaToken)\r\n                    ? { gotrue_meta_security: { captcha_token: (_m = credentials.options) === null || _m === void 0 ? void 0 : _m.captchaToken } }\r\n                    : null)),\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n            });\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            if (!data || !data.session || !data.user) {\r\n                return {\r\n                    data: { user: null, session: null },\r\n                    error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidTokenResponseError(),\r\n                };\r\n            }\r\n            if (data.session) {\r\n                await this._saveSession(data.session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\r\n            }\r\n            return { data: Object.assign({}, data), error };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async _exchangeCodeForSession(authCode) {\r\n        const storageItem = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\r\n        const [codeVerifier, redirectType] = (storageItem !== null && storageItem !== void 0 ? storageItem : '').split('/');\r\n        try {\r\n            const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=pkce`, {\r\n                headers: this.headers,\r\n                body: {\r\n                    auth_code: authCode,\r\n                    code_verifier: codeVerifier,\r\n                },\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n            });\r\n            await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            if (!data || !data.session || !data.user) {\r\n                return {\r\n                    data: { user: null, session: null, redirectType: null },\r\n                    error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidTokenResponseError(),\r\n                };\r\n            }\r\n            if (data.session) {\r\n                await this._saveSession(data.session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\r\n            }\r\n            return { data: Object.assign(Object.assign({}, data), { redirectType: redirectType !== null && redirectType !== void 0 ? redirectType : null }), error };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null, redirectType: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Allows signing in with an OIDC ID token. The authentication provider used\r\n     * should be enabled and configured.\r\n     */\r\n    async signInWithIdToken(credentials) {\r\n        try {\r\n            const { options, provider, token, access_token, nonce } = credentials;\r\n            const res = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\r\n                headers: this.headers,\r\n                body: {\r\n                    provider,\r\n                    id_token: token,\r\n                    access_token,\r\n                    nonce,\r\n                    gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                },\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n            });\r\n            const { data, error } = res;\r\n            if (error) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            else if (!data || !data.session || !data.user) {\r\n                return {\r\n                    data: { user: null, session: null },\r\n                    error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidTokenResponseError(),\r\n                };\r\n            }\r\n            if (data.session) {\r\n                await this._saveSession(data.session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', data.session);\r\n            }\r\n            return { data, error };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Log in a user using magiclink or a one-time password (OTP).\r\n     *\r\n     * If the `{{ .ConfirmationURL }}` variable is specified in the email template, a magiclink will be sent.\r\n     * If the `{{ .Token }}` variable is specified in the email template, an OTP will be sent.\r\n     * If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins.\r\n     *\r\n     * Be aware that you may get back an error message that will not distinguish\r\n     * between the cases where the account does not exist or, that the account\r\n     * can only be accessed via social login.\r\n     *\r\n     * Do note that you will need to configure a Whatsapp sender on Twilio\r\n     * if you are using phone sign in with the 'whatsapp' channel. The whatsapp\r\n     * channel is not supported on other providers\r\n     * at this time.\r\n     * This method supports PKCE when an email is passed.\r\n     */\r\n    async signInWithOtp(credentials) {\r\n        var _a, _b, _c, _d, _e;\r\n        try {\r\n            if ('email' in credentials) {\r\n                const { email, options } = credentials;\r\n                let codeChallenge = null;\r\n                let codeChallengeMethod = null;\r\n                if (this.flowType === 'pkce') {\r\n                    ;\r\n                    [codeChallenge, codeChallengeMethod] = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getCodeChallengeAndMethod)(this.storage, this.storageKey);\r\n                }\r\n                const { error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/otp`, {\r\n                    headers: this.headers,\r\n                    body: {\r\n                        email,\r\n                        data: (_a = options === null || options === void 0 ? void 0 : options.data) !== null && _a !== void 0 ? _a : {},\r\n                        create_user: (_b = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _b !== void 0 ? _b : true,\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                        code_challenge: codeChallenge,\r\n                        code_challenge_method: codeChallengeMethod,\r\n                    },\r\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\r\n                });\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            if ('phone' in credentials) {\r\n                const { phone, options } = credentials;\r\n                const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/otp`, {\r\n                    headers: this.headers,\r\n                    body: {\r\n                        phone,\r\n                        data: (_c = options === null || options === void 0 ? void 0 : options.data) !== null && _c !== void 0 ? _c : {},\r\n                        create_user: (_d = options === null || options === void 0 ? void 0 : options.shouldCreateUser) !== null && _d !== void 0 ? _d : true,\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                        channel: (_e = options === null || options === void 0 ? void 0 : options.channel) !== null && _e !== void 0 ? _e : 'sms',\r\n                    },\r\n                });\r\n                return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };\r\n            }\r\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidCredentialsError('You must provide either an email or phone number.');\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Log in a user given a User supplied OTP or TokenHash received through mobile or email.\r\n     */\r\n    async verifyOtp(params) {\r\n        var _a, _b;\r\n        try {\r\n            let redirectTo = undefined;\r\n            let captchaToken = undefined;\r\n            if ('options' in params) {\r\n                redirectTo = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo;\r\n                captchaToken = (_b = params.options) === null || _b === void 0 ? void 0 : _b.captchaToken;\r\n            }\r\n            const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/verify`, {\r\n                headers: this.headers,\r\n                body: Object.assign(Object.assign({}, params), { gotrue_meta_security: { captcha_token: captchaToken } }),\r\n                redirectTo,\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n            });\r\n            if (error) {\r\n                throw error;\r\n            }\r\n            if (!data) {\r\n                throw new Error('An error occurred on token verification.');\r\n            }\r\n            const session = data.session;\r\n            const user = data.user;\r\n            if (session === null || session === void 0 ? void 0 : session.access_token) {\r\n                await this._saveSession(session);\r\n                await this._notifyAllSubscribers(params.type == 'recovery' ? 'PASSWORD_RECOVERY' : 'SIGNED_IN', session);\r\n            }\r\n            return { data: { user, session }, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Attempts a single-sign on using an enterprise Identity Provider. A\r\n     * successful SSO attempt will redirect the current page to the identity\r\n     * provider authorization page. The redirect URL is implementation and SSO\r\n     * protocol specific.\r\n     *\r\n     * You can use it by providing a SSO domain. Typically you can extract this\r\n     * domain by asking users for their email address. If this domain is\r\n     * registered on the Auth instance the redirect will use that organization's\r\n     * currently active SSO Identity Provider for the login.\r\n     *\r\n     * If you have built an organization-specific login page, you can use the\r\n     * organization's SSO Identity Provider UUID directly instead.\r\n     */\r\n    async signInWithSSO(params) {\r\n        var _a, _b, _c;\r\n        try {\r\n            let codeChallenge = null;\r\n            let codeChallengeMethod = null;\r\n            if (this.flowType === 'pkce') {\r\n                ;\r\n                [codeChallenge, codeChallengeMethod] = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getCodeChallengeAndMethod)(this.storage, this.storageKey);\r\n            }\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/sso`, {\r\n                body: Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, ('providerId' in params ? { provider_id: params.providerId } : null)), ('domain' in params ? { domain: params.domain } : null)), { redirect_to: (_b = (_a = params.options) === null || _a === void 0 ? void 0 : _a.redirectTo) !== null && _b !== void 0 ? _b : undefined }), (((_c = params === null || params === void 0 ? void 0 : params.options) === null || _c === void 0 ? void 0 : _c.captchaToken)\r\n                    ? { gotrue_meta_security: { captcha_token: params.options.captchaToken } }\r\n                    : null)), { skip_http_redirect: true, code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),\r\n                headers: this.headers,\r\n                xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._ssoResponse,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Sends a reauthentication OTP to the user's email or phone number.\r\n     * Requires the user to be signed-in.\r\n     */\r\n    async reauthenticate() {\r\n        await this.initializePromise;\r\n        return await this._acquireLock(-1, async () => {\r\n            return await this._reauthenticate();\r\n        });\r\n    }\r\n    async _reauthenticate() {\r\n        try {\r\n            return await this._useSession(async (result) => {\r\n                const { data: { session }, error: sessionError, } = result;\r\n                if (sessionError)\r\n                    throw sessionError;\r\n                if (!session)\r\n                    throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError();\r\n                const { error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'GET', `${this.url}/reauthenticate`, {\r\n                    headers: this.headers,\r\n                    jwt: session.access_token,\r\n                });\r\n                return { data: { user: null, session: null }, error };\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Resends an existing signup confirmation email, email change email, SMS OTP or phone change OTP.\r\n     */\r\n    async resend(credentials) {\r\n        try {\r\n            const endpoint = `${this.url}/resend`;\r\n            if ('email' in credentials) {\r\n                const { email, type, options } = credentials;\r\n                const { error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', endpoint, {\r\n                    headers: this.headers,\r\n                    body: {\r\n                        email,\r\n                        type,\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                    },\r\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\r\n                });\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            else if ('phone' in credentials) {\r\n                const { phone, type, options } = credentials;\r\n                const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', endpoint, {\r\n                    headers: this.headers,\r\n                    body: {\r\n                        phone,\r\n                        type,\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                    },\r\n                });\r\n                return { data: { user: null, session: null, messageId: data === null || data === void 0 ? void 0 : data.message_id }, error };\r\n            }\r\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidCredentialsError('You must provide either an email or phone number and a type');\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Returns the session, refreshing it if necessary.\r\n     *\r\n     * The session returned can be null if the session is not detected which can happen in the event a user is not signed-in or has logged out.\r\n     *\r\n     * **IMPORTANT:** This method loads values directly from the storage attached\r\n     * to the client. If that storage is based on request cookies for example,\r\n     * the values in it may not be authentic and therefore it's strongly advised\r\n     * against using this method and its results in such circumstances. A warning\r\n     * will be emitted if this is detected. Use {@link #getUser()} instead.\r\n     */\r\n    async getSession() {\r\n        await this.initializePromise;\r\n        const result = await this._acquireLock(-1, async () => {\r\n            return this._useSession(async (result) => {\r\n                return result;\r\n            });\r\n        });\r\n        return result;\r\n    }\r\n    /**\r\n     * Acquires a global lock based on the storage key.\r\n     */\r\n    async _acquireLock(acquireTimeout, fn) {\r\n        this._debug('#_acquireLock', 'begin', acquireTimeout);\r\n        try {\r\n            if (this.lockAcquired) {\r\n                const last = this.pendingInLock.length\r\n                    ? this.pendingInLock[this.pendingInLock.length - 1]\r\n                    : Promise.resolve();\r\n                const result = (async () => {\r\n                    await last;\r\n                    return await fn();\r\n                })();\r\n                this.pendingInLock.push((async () => {\r\n                    try {\r\n                        await result;\r\n                    }\r\n                    catch (e) {\r\n                        // we just care if it finished\r\n                    }\r\n                })());\r\n                return result;\r\n            }\r\n            return await this.lock(`lock:${this.storageKey}`, acquireTimeout, async () => {\r\n                this._debug('#_acquireLock', 'lock acquired for storage key', this.storageKey);\r\n                try {\r\n                    this.lockAcquired = true;\r\n                    const result = fn();\r\n                    this.pendingInLock.push((async () => {\r\n                        try {\r\n                            await result;\r\n                        }\r\n                        catch (e) {\r\n                            // we just care if it finished\r\n                        }\r\n                    })());\r\n                    await result;\r\n                    // keep draining the queue until there's nothing to wait on\r\n                    while (this.pendingInLock.length) {\r\n                        const waitOn = [...this.pendingInLock];\r\n                        await Promise.all(waitOn);\r\n                        this.pendingInLock.splice(0, waitOn.length);\r\n                    }\r\n                    return await result;\r\n                }\r\n                finally {\r\n                    this._debug('#_acquireLock', 'lock released for storage key', this.storageKey);\r\n                    this.lockAcquired = false;\r\n                }\r\n            });\r\n        }\r\n        finally {\r\n            this._debug('#_acquireLock', 'end');\r\n        }\r\n    }\r\n    /**\r\n     * Use instead of {@link #getSession} inside the library. It is\r\n     * semantically usually what you want, as getting a session involves some\r\n     * processing afterwards that requires only one client operating on the\r\n     * session at once across multiple tabs or processes.\r\n     */\r\n    async _useSession(fn) {\r\n        this._debug('#_useSession', 'begin');\r\n        try {\r\n            // the use of __loadSession here is the only correct use of the function!\r\n            const result = await this.__loadSession();\r\n            return await fn(result);\r\n        }\r\n        finally {\r\n            this._debug('#_useSession', 'end');\r\n        }\r\n    }\r\n    /**\r\n     * NEVER USE DIRECTLY!\r\n     *\r\n     * Always use {@link #_useSession}.\r\n     */\r\n    async __loadSession() {\r\n        this._debug('#__loadSession()', 'begin');\r\n        if (!this.lockAcquired) {\r\n            this._debug('#__loadSession()', 'used outside of an acquired lock!', new Error().stack);\r\n        }\r\n        try {\r\n            let currentSession = null;\r\n            const maybeSession = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getItemAsync)(this.storage, this.storageKey);\r\n            this._debug('#getSession()', 'session from storage', maybeSession);\r\n            if (maybeSession !== null) {\r\n                if (this._isValidSession(maybeSession)) {\r\n                    currentSession = maybeSession;\r\n                }\r\n                else {\r\n                    this._debug('#getSession()', 'session from storage is not valid');\r\n                    await this._removeSession();\r\n                }\r\n            }\r\n            if (!currentSession) {\r\n                return { data: { session: null }, error: null };\r\n            }\r\n            // A session is considered expired before the access token _actually_\r\n            // expires. When the autoRefreshToken option is off (or when the tab is\r\n            // in the background), very eager users of getSession() -- like\r\n            // realtime-js -- might send a valid JWT which will expire by the time it\r\n            // reaches the server.\r\n            const hasExpired = currentSession.expires_at\r\n                ? currentSession.expires_at * 1000 - Date.now() < _lib_constants__WEBPACK_IMPORTED_MODULE_1__.EXPIRY_MARGIN_MS\r\n                : false;\r\n            this._debug('#__loadSession()', `session has${hasExpired ? '' : ' not'} expired`, 'expires_at', currentSession.expires_at);\r\n            if (!hasExpired) {\r\n                if (this.userStorage) {\r\n                    const maybeUser = (await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getItemAsync)(this.userStorage, this.storageKey + '-user'));\r\n                    if (maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) {\r\n                        currentSession.user = maybeUser.user;\r\n                    }\r\n                    else {\r\n                        currentSession.user = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.userNotAvailableProxy)();\r\n                    }\r\n                }\r\n                if (this.storage.isServer && currentSession.user) {\r\n                    let suppressWarning = this.suppressGetSessionWarning;\r\n                    const proxySession = new Proxy(currentSession, {\r\n                        get: (target, prop, receiver) => {\r\n                            if (!suppressWarning && prop === 'user') {\r\n                                // only show warning when the user object is being accessed from the server\r\n                                console.warn('Using the user object as returned from supabase.auth.getSession() or from some supabase.auth.onAuthStateChange() events could be insecure! This value comes directly from the storage medium (usually cookies on the server) and may not be authentic. Use supabase.auth.getUser() instead which authenticates the data by contacting the Supabase Auth server.');\r\n                                suppressWarning = true; // keeps this proxy instance from logging additional warnings\r\n                                this.suppressGetSessionWarning = true; // keeps this client's future proxy instances from warning\r\n                            }\r\n                            return Reflect.get(target, prop, receiver);\r\n                        },\r\n                    });\r\n                    currentSession = proxySession;\r\n                }\r\n                return { data: { session: currentSession }, error: null };\r\n            }\r\n            const { data: session, error } = await this._callRefreshToken(currentSession.refresh_token);\r\n            if (error) {\r\n                return { data: { session: null }, error };\r\n            }\r\n            return { data: { session }, error: null };\r\n        }\r\n        finally {\r\n            this._debug('#__loadSession()', 'end');\r\n        }\r\n    }\r\n    /**\r\n     * Gets the current user details if there is an existing session. This method\r\n     * performs a network request to the Supabase Auth server, so the returned\r\n     * value is authentic and can be used to base authorization rules on.\r\n     *\r\n     * @param jwt Takes in an optional access token JWT. If no JWT is provided, the JWT from the current session is used.\r\n     */\r\n    async getUser(jwt) {\r\n        if (jwt) {\r\n            return await this._getUser(jwt);\r\n        }\r\n        await this.initializePromise;\r\n        const result = await this._acquireLock(-1, async () => {\r\n            return await this._getUser();\r\n        });\r\n        return result;\r\n    }\r\n    async _getUser(jwt) {\r\n        try {\r\n            if (jwt) {\r\n                return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'GET', `${this.url}/user`, {\r\n                    headers: this.headers,\r\n                    jwt: jwt,\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._userResponse,\r\n                });\r\n            }\r\n            return await this._useSession(async (result) => {\r\n                var _a, _b, _c;\r\n                const { data, error } = result;\r\n                if (error) {\r\n                    throw error;\r\n                }\r\n                // returns an error if there is no access_token or custom authorization header\r\n                if (!((_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) && !this.hasCustomAuthorizationHeader) {\r\n                    return { data: { user: null }, error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError() };\r\n                }\r\n                return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'GET', `${this.url}/user`, {\r\n                    headers: this.headers,\r\n                    jwt: (_c = (_b = data.session) === null || _b === void 0 ? void 0 : _b.access_token) !== null && _c !== void 0 ? _c : undefined,\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._userResponse,\r\n                });\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthSessionMissingError)(error)) {\r\n                    // JWT contains a `session_id` which does not correspond to an active\r\n                    // session in the database, indicating the user is signed out.\r\n                    await this._removeSession();\r\n                    await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\r\n                }\r\n                return { data: { user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Updates user data for a logged in user.\r\n     */\r\n    async updateUser(attributes, options = {}) {\r\n        await this.initializePromise;\r\n        return await this._acquireLock(-1, async () => {\r\n            return await this._updateUser(attributes, options);\r\n        });\r\n    }\r\n    async _updateUser(attributes, options = {}) {\r\n        try {\r\n            return await this._useSession(async (result) => {\r\n                const { data: sessionData, error: sessionError } = result;\r\n                if (sessionError) {\r\n                    throw sessionError;\r\n                }\r\n                if (!sessionData.session) {\r\n                    throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError();\r\n                }\r\n                const session = sessionData.session;\r\n                let codeChallenge = null;\r\n                let codeChallengeMethod = null;\r\n                if (this.flowType === 'pkce' && attributes.email != null) {\r\n                    ;\r\n                    [codeChallenge, codeChallengeMethod] = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getCodeChallengeAndMethod)(this.storage, this.storageKey);\r\n                }\r\n                const { data, error: userError } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'PUT', `${this.url}/user`, {\r\n                    headers: this.headers,\r\n                    redirectTo: options === null || options === void 0 ? void 0 : options.emailRedirectTo,\r\n                    body: Object.assign(Object.assign({}, attributes), { code_challenge: codeChallenge, code_challenge_method: codeChallengeMethod }),\r\n                    jwt: session.access_token,\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._userResponse,\r\n                });\r\n                if (userError)\r\n                    throw userError;\r\n                session.user = data.user;\r\n                await this._saveSession(session);\r\n                await this._notifyAllSubscribers('USER_UPDATED', session);\r\n                return { data: { user: session.user }, error: null };\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the session data from the current session. If the current session is expired, setSession will take care of refreshing it to obtain a new session.\r\n     * If the refresh token or access token in the current session is invalid, an error will be thrown.\r\n     * @param currentSession The current session that minimally contains an access token and refresh token.\r\n     */\r\n    async setSession(currentSession) {\r\n        await this.initializePromise;\r\n        return await this._acquireLock(-1, async () => {\r\n            return await this._setSession(currentSession);\r\n        });\r\n    }\r\n    async _setSession(currentSession) {\r\n        try {\r\n            if (!currentSession.access_token || !currentSession.refresh_token) {\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError();\r\n            }\r\n            const timeNow = Date.now() / 1000;\r\n            let expiresAt = timeNow;\r\n            let hasExpired = true;\r\n            let session = null;\r\n            const { payload } = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.decodeJWT)(currentSession.access_token);\r\n            if (payload.exp) {\r\n                expiresAt = payload.exp;\r\n                hasExpired = expiresAt <= timeNow;\r\n            }\r\n            if (hasExpired) {\r\n                const { data: refreshedSession, error } = await this._callRefreshToken(currentSession.refresh_token);\r\n                if (error) {\r\n                    return { data: { user: null, session: null }, error: error };\r\n                }\r\n                if (!refreshedSession) {\r\n                    return { data: { user: null, session: null }, error: null };\r\n                }\r\n                session = refreshedSession;\r\n            }\r\n            else {\r\n                const { data, error } = await this._getUser(currentSession.access_token);\r\n                if (error) {\r\n                    throw error;\r\n                }\r\n                session = {\r\n                    access_token: currentSession.access_token,\r\n                    refresh_token: currentSession.refresh_token,\r\n                    user: data.user,\r\n                    token_type: 'bearer',\r\n                    expires_in: expiresAt - timeNow,\r\n                    expires_at: expiresAt,\r\n                };\r\n                await this._saveSession(session);\r\n                await this._notifyAllSubscribers('SIGNED_IN', session);\r\n            }\r\n            return { data: { user: session.user, session }, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { session: null, user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Returns a new session, regardless of expiry status.\r\n     * Takes in an optional current session. If not passed in, then refreshSession() will attempt to retrieve it from getSession().\r\n     * If the current session's refresh token is invalid, an error will be thrown.\r\n     * @param currentSession The current session. If passed in, it must contain a refresh token.\r\n     */\r\n    async refreshSession(currentSession) {\r\n        await this.initializePromise;\r\n        return await this._acquireLock(-1, async () => {\r\n            return await this._refreshSession(currentSession);\r\n        });\r\n    }\r\n    async _refreshSession(currentSession) {\r\n        try {\r\n            return await this._useSession(async (result) => {\r\n                var _a;\r\n                if (!currentSession) {\r\n                    const { data, error } = result;\r\n                    if (error) {\r\n                        throw error;\r\n                    }\r\n                    currentSession = (_a = data.session) !== null && _a !== void 0 ? _a : undefined;\r\n                }\r\n                if (!(currentSession === null || currentSession === void 0 ? void 0 : currentSession.refresh_token)) {\r\n                    throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError();\r\n                }\r\n                const { data: session, error } = await this._callRefreshToken(currentSession.refresh_token);\r\n                if (error) {\r\n                    return { data: { user: null, session: null }, error: error };\r\n                }\r\n                if (!session) {\r\n                    return { data: { user: null, session: null }, error: null };\r\n                }\r\n                return { data: { user: session.user, session }, error: null };\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { user: null, session: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Gets the session data from a URL string\r\n     */\r\n    async _getSessionFromURL(params, callbackUrlType) {\r\n        try {\r\n            if (!(0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)())\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthImplicitGrantRedirectError('No browser detected.');\r\n            // If there's an error in the URL, it doesn't matter what flow it is, we just return the error.\r\n            if (params.error || params.error_description || params.error_code) {\r\n                // The error class returned implies that the redirect is from an implicit grant flow\r\n                // but it could also be from a redirect error from a PKCE flow.\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthImplicitGrantRedirectError(params.error_description || 'Error in URL with unspecified error_description', {\r\n                    error: params.error || 'unspecified_error',\r\n                    code: params.error_code || 'unspecified_code',\r\n                });\r\n            }\r\n            // Checks for mismatches between the flowType initialised in the client and the URL parameters\r\n            switch (callbackUrlType) {\r\n                case 'implicit':\r\n                    if (this.flowType === 'pkce') {\r\n                        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthPKCEGrantCodeExchangeError('Not a valid PKCE flow url.');\r\n                    }\r\n                    break;\r\n                case 'pkce':\r\n                    if (this.flowType === 'implicit') {\r\n                        throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthImplicitGrantRedirectError('Not a valid implicit grant flow url.');\r\n                    }\r\n                    break;\r\n                default:\r\n                // there's no mismatch so we continue\r\n            }\r\n            // Since this is a redirect for PKCE, we attempt to retrieve the code from the URL for the code exchange\r\n            if (callbackUrlType === 'pkce') {\r\n                this._debug('#_initialize()', 'begin', 'is PKCE flow', true);\r\n                if (!params.code)\r\n                    throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthPKCEGrantCodeExchangeError('No code detected.');\r\n                const { data, error } = await this._exchangeCodeForSession(params.code);\r\n                if (error)\r\n                    throw error;\r\n                const url = new URL(window.location.href);\r\n                url.searchParams.delete('code');\r\n                window.history.replaceState(window.history.state, '', url.toString());\r\n                return { data: { session: data.session, redirectType: null }, error: null };\r\n            }\r\n            const { provider_token, provider_refresh_token, access_token, refresh_token, expires_in, expires_at, token_type, } = params;\r\n            if (!access_token || !expires_in || !refresh_token || !token_type) {\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthImplicitGrantRedirectError('No session defined in URL');\r\n            }\r\n            const timeNow = Math.round(Date.now() / 1000);\r\n            const expiresIn = parseInt(expires_in);\r\n            let expiresAt = timeNow + expiresIn;\r\n            if (expires_at) {\r\n                expiresAt = parseInt(expires_at);\r\n            }\r\n            const actuallyExpiresIn = expiresAt - timeNow;\r\n            if (actuallyExpiresIn * 1000 <= _lib_constants__WEBPACK_IMPORTED_MODULE_1__.AUTO_REFRESH_TICK_DURATION_MS) {\r\n                console.warn(`@supabase/gotrue-js: Session as retrieved from URL expires in ${actuallyExpiresIn}s, should have been closer to ${expiresIn}s`);\r\n            }\r\n            const issuedAt = expiresAt - expiresIn;\r\n            if (timeNow - issuedAt >= 120) {\r\n                console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued over 120s ago, URL could be stale', issuedAt, expiresAt, timeNow);\r\n            }\r\n            else if (timeNow - issuedAt < 0) {\r\n                console.warn('@supabase/gotrue-js: Session as retrieved from URL was issued in the future? Check the device clock for skew', issuedAt, expiresAt, timeNow);\r\n            }\r\n            const { data, error } = await this._getUser(access_token);\r\n            if (error)\r\n                throw error;\r\n            const session = {\r\n                provider_token,\r\n                provider_refresh_token,\r\n                access_token,\r\n                expires_in: expiresIn,\r\n                expires_at: expiresAt,\r\n                refresh_token,\r\n                token_type: token_type,\r\n                user: data.user,\r\n            };\r\n            // Remove tokens from URL\r\n            window.location.hash = '';\r\n            this._debug('#_getSessionFromURL()', 'clearing window.location.hash');\r\n            return { data: { session, redirectType: params.type }, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { session: null, redirectType: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Checks if the current URL contains parameters given by an implicit oauth grant flow (https://www.rfc-editor.org/rfc/rfc6749.html#section-4.2)\r\n     */\r\n    _isImplicitGrantCallback(params) {\r\n        return Boolean(params.access_token || params.error_description);\r\n    }\r\n    /**\r\n     * Checks if the current URL and backing storage contain parameters given by a PKCE flow\r\n     */\r\n    async _isPKCECallback(params) {\r\n        const currentStorageContent = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\r\n        return !!(params.code && currentStorageContent);\r\n    }\r\n    /**\r\n     * Inside a browser context, `signOut()` will remove the logged in user from the browser session and log them out - removing all items from localstorage and then trigger a `\"SIGNED_OUT\"` event.\r\n     *\r\n     * For server-side management, you can revoke all refresh tokens for a user by passing a user's JWT through to `auth.api.signOut(JWT: string)`.\r\n     * There is no way to revoke a user's access token jwt until it expires. It is recommended to set a shorter expiry on the jwt for this reason.\r\n     *\r\n     * If using `others` scope, no `SIGNED_OUT` event is fired!\r\n     */\r\n    async signOut(options = { scope: 'global' }) {\r\n        await this.initializePromise;\r\n        return await this._acquireLock(-1, async () => {\r\n            return await this._signOut(options);\r\n        });\r\n    }\r\n    async _signOut({ scope } = { scope: 'global' }) {\r\n        return await this._useSession(async (result) => {\r\n            var _a;\r\n            const { data, error: sessionError } = result;\r\n            if (sessionError) {\r\n                return { error: sessionError };\r\n            }\r\n            const accessToken = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token;\r\n            if (accessToken) {\r\n                const { error } = await this.admin.signOut(accessToken, scope);\r\n                if (error) {\r\n                    // ignore 404s since user might not exist anymore\r\n                    // ignore 401s since an invalid or expired JWT should sign out the current session\r\n                    if (!((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthApiError)(error) &&\r\n                        (error.status === 404 || error.status === 401 || error.status === 403))) {\r\n                        return { error };\r\n                    }\r\n                }\r\n            }\r\n            if (scope !== 'others') {\r\n                await this._removeSession();\r\n                await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.storage, `${this.storageKey}-code-verifier`);\r\n            }\r\n            return { error: null };\r\n        });\r\n    }\r\n    onAuthStateChange(callback) {\r\n        const id = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.uuid)();\r\n        const subscription = {\r\n            id,\r\n            callback,\r\n            unsubscribe: () => {\r\n                this._debug('#unsubscribe()', 'state change callback with id removed', id);\r\n                this.stateChangeEmitters.delete(id);\r\n            },\r\n        };\r\n        this._debug('#onAuthStateChange()', 'registered callback with id', id);\r\n        this.stateChangeEmitters.set(id, subscription);\r\n        (async () => {\r\n            await this.initializePromise;\r\n            await this._acquireLock(-1, async () => {\r\n                this._emitInitialSession(id);\r\n            });\r\n        })();\r\n        return { data: { subscription } };\r\n    }\r\n    async _emitInitialSession(id) {\r\n        return await this._useSession(async (result) => {\r\n            var _a, _b;\r\n            try {\r\n                const { data: { session }, error, } = result;\r\n                if (error)\r\n                    throw error;\r\n                await ((_a = this.stateChangeEmitters.get(id)) === null || _a === void 0 ? void 0 : _a.callback('INITIAL_SESSION', session));\r\n                this._debug('INITIAL_SESSION', 'callback id', id, 'session', session);\r\n            }\r\n            catch (err) {\r\n                await ((_b = this.stateChangeEmitters.get(id)) === null || _b === void 0 ? void 0 : _b.callback('INITIAL_SESSION', null));\r\n                this._debug('INITIAL_SESSION', 'callback id', id, 'error', err);\r\n                console.error(err);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Sends a password reset request to an email address. This method supports the PKCE flow.\r\n     *\r\n     * @param email The email address of the user.\r\n     * @param options.redirectTo The URL to send the user to after they click the password reset link.\r\n     * @param options.captchaToken Verification token received when the user completes the captcha on the site.\r\n     */\r\n    async resetPasswordForEmail(email, options = {}) {\r\n        let codeChallenge = null;\r\n        let codeChallengeMethod = null;\r\n        if (this.flowType === 'pkce') {\r\n            ;\r\n            [codeChallenge, codeChallengeMethod] = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getCodeChallengeAndMethod)(this.storage, this.storageKey, true // isPasswordRecovery\r\n            );\r\n        }\r\n        try {\r\n            return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/recover`, {\r\n                body: {\r\n                    email,\r\n                    code_challenge: codeChallenge,\r\n                    code_challenge_method: codeChallengeMethod,\r\n                    gotrue_meta_security: { captcha_token: options.captchaToken },\r\n                },\r\n                headers: this.headers,\r\n                redirectTo: options.redirectTo,\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Gets all the identities linked to a user.\r\n     */\r\n    async getUserIdentities() {\r\n        var _a;\r\n        try {\r\n            const { data, error } = await this.getUser();\r\n            if (error)\r\n                throw error;\r\n            return { data: { identities: (_a = data.user.identities) !== null && _a !== void 0 ? _a : [] }, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async linkIdentity(credentials) {\r\n        if ('token' in credentials) {\r\n            return this.linkIdentityIdToken(credentials);\r\n        }\r\n        return this.linkIdentityOAuth(credentials);\r\n    }\r\n    async linkIdentityOAuth(credentials) {\r\n        var _a;\r\n        try {\r\n            const { data, error } = await this._useSession(async (result) => {\r\n                var _a, _b, _c, _d, _e;\r\n                const { data, error } = result;\r\n                if (error)\r\n                    throw error;\r\n                const url = await this._getUrlForProvider(`${this.url}/user/identities/authorize`, credentials.provider, {\r\n                    redirectTo: (_a = credentials.options) === null || _a === void 0 ? void 0 : _a.redirectTo,\r\n                    scopes: (_b = credentials.options) === null || _b === void 0 ? void 0 : _b.scopes,\r\n                    queryParams: (_c = credentials.options) === null || _c === void 0 ? void 0 : _c.queryParams,\r\n                    skipBrowserRedirect: true,\r\n                });\r\n                return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'GET', url, {\r\n                    headers: this.headers,\r\n                    jwt: (_e = (_d = data.session) === null || _d === void 0 ? void 0 : _d.access_token) !== null && _e !== void 0 ? _e : undefined,\r\n                });\r\n            });\r\n            if (error)\r\n                throw error;\r\n            if ((0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)() && !((_a = credentials.options) === null || _a === void 0 ? void 0 : _a.skipBrowserRedirect)) {\r\n                window.location.assign(data === null || data === void 0 ? void 0 : data.url);\r\n            }\r\n            return { data: { provider: credentials.provider, url: data === null || data === void 0 ? void 0 : data.url }, error: null };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { provider: credentials.provider, url: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async linkIdentityIdToken(credentials) {\r\n        return await this._useSession(async (result) => {\r\n            var _a;\r\n            try {\r\n                const { error: sessionError, data: { session }, } = result;\r\n                if (sessionError)\r\n                    throw sessionError;\r\n                const { options, provider, token, access_token, nonce } = credentials;\r\n                const res = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=id_token`, {\r\n                    headers: this.headers,\r\n                    jwt: (_a = session === null || session === void 0 ? void 0 : session.access_token) !== null && _a !== void 0 ? _a : undefined,\r\n                    body: {\r\n                        provider,\r\n                        id_token: token,\r\n                        access_token,\r\n                        nonce,\r\n                        link_identity: true,\r\n                        gotrue_meta_security: { captcha_token: options === null || options === void 0 ? void 0 : options.captchaToken },\r\n                    },\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n                });\r\n                const { data, error } = res;\r\n                if (error) {\r\n                    return { data: { user: null, session: null }, error };\r\n                }\r\n                else if (!data || !data.session || !data.user) {\r\n                    return {\r\n                        data: { user: null, session: null },\r\n                        error: new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidTokenResponseError(),\r\n                    };\r\n                }\r\n                if (data.session) {\r\n                    await this._saveSession(data.session);\r\n                    await this._notifyAllSubscribers('USER_UPDATED', data.session);\r\n                }\r\n                return { data, error };\r\n            }\r\n            catch (error) {\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                    return { data: { user: null, session: null }, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked.\r\n     */\r\n    async unlinkIdentity(identity) {\r\n        try {\r\n            return await this._useSession(async (result) => {\r\n                var _a, _b;\r\n                const { data, error } = result;\r\n                if (error) {\r\n                    throw error;\r\n                }\r\n                return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'DELETE', `${this.url}/user/identities/${identity.identity_id}`, {\r\n                    headers: this.headers,\r\n                    jwt: (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : undefined,\r\n                });\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    /**\r\n     * Generates a new JWT.\r\n     * @param refreshToken A valid refresh token that was returned on login.\r\n     */\r\n    async _refreshAccessToken(refreshToken) {\r\n        const debugName = `#_refreshAccessToken(${refreshToken.substring(0, 5)}...)`;\r\n        this._debug(debugName, 'begin');\r\n        try {\r\n            const startedAt = Date.now();\r\n            // will attempt to refresh the token with exponential backoff\r\n            return await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.retryable)(async (attempt) => {\r\n                if (attempt > 0) {\r\n                    await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.sleep)(200 * Math.pow(2, attempt - 1)); // 200, 400, 800, ...\r\n                }\r\n                this._debug(debugName, 'refreshing attempt', attempt);\r\n                return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/token?grant_type=refresh_token`, {\r\n                    body: { refresh_token: refreshToken },\r\n                    headers: this.headers,\r\n                    xform: _lib_fetch__WEBPACK_IMPORTED_MODULE_3__._sessionResponse,\r\n                });\r\n            }, (attempt, error) => {\r\n                const nextBackOffInterval = 200 * Math.pow(2, attempt);\r\n                return (error &&\r\n                    (0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthRetryableFetchError)(error) &&\r\n                    // retryable only if the request can be sent before the backoff overflows the tick duration\r\n                    Date.now() + nextBackOffInterval - startedAt < _lib_constants__WEBPACK_IMPORTED_MODULE_1__.AUTO_REFRESH_TICK_DURATION_MS);\r\n            });\r\n        }\r\n        catch (error) {\r\n            this._debug(debugName, 'error', error);\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: { session: null, user: null }, error };\r\n            }\r\n            throw error;\r\n        }\r\n        finally {\r\n            this._debug(debugName, 'end');\r\n        }\r\n    }\r\n    _isValidSession(maybeSession) {\r\n        const isValidSession = typeof maybeSession === 'object' &&\r\n            maybeSession !== null &&\r\n            'access_token' in maybeSession &&\r\n            'refresh_token' in maybeSession &&\r\n            'expires_at' in maybeSession;\r\n        return isValidSession;\r\n    }\r\n    async _handleProviderSignIn(provider, options) {\r\n        const url = await this._getUrlForProvider(`${this.url}/authorize`, provider, {\r\n            redirectTo: options.redirectTo,\r\n            scopes: options.scopes,\r\n            queryParams: options.queryParams,\r\n        });\r\n        this._debug('#_handleProviderSignIn()', 'provider', provider, 'options', options, 'url', url);\r\n        // try to open on the browser\r\n        if ((0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)() && !options.skipBrowserRedirect) {\r\n            window.location.assign(url);\r\n        }\r\n        return { data: { provider, url }, error: null };\r\n    }\r\n    /**\r\n     * Recovers the session from LocalStorage and refreshes the token\r\n     * Note: this method is async to accommodate for AsyncStorage e.g. in React native.\r\n     */\r\n    async _recoverAndRefresh() {\r\n        var _a, _b;\r\n        const debugName = '#_recoverAndRefresh()';\r\n        this._debug(debugName, 'begin');\r\n        try {\r\n            const currentSession = (await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getItemAsync)(this.storage, this.storageKey));\r\n            if (currentSession && this.userStorage) {\r\n                let maybeUser = (await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getItemAsync)(this.userStorage, this.storageKey + '-user'));\r\n                if (!this.storage.isServer && Object.is(this.storage, this.userStorage) && !maybeUser) {\r\n                    // storage and userStorage are the same storage medium, for example\r\n                    // window.localStorage if userStorage does not have the user from\r\n                    // storage stored, store it first thereby migrating the user object\r\n                    // from storage -> userStorage\r\n                    maybeUser = { user: currentSession.user };\r\n                    await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.setItemAsync)(this.userStorage, this.storageKey + '-user', maybeUser);\r\n                }\r\n                currentSession.user = (_a = maybeUser === null || maybeUser === void 0 ? void 0 : maybeUser.user) !== null && _a !== void 0 ? _a : (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.userNotAvailableProxy)();\r\n            }\r\n            else if (currentSession && !currentSession.user) {\r\n                // user storage is not set, let's check if it was previously enabled so\r\n                // we bring back the storage as it should be\r\n                if (!currentSession.user) {\r\n                    // test if userStorage was previously enabled and the storage medium was the same, to move the user back under the same key\r\n                    const separateUser = (await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getItemAsync)(this.storage, this.storageKey + '-user'));\r\n                    if (separateUser && (separateUser === null || separateUser === void 0 ? void 0 : separateUser.user)) {\r\n                        currentSession.user = separateUser.user;\r\n                        await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.storage, this.storageKey + '-user');\r\n                        await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.setItemAsync)(this.storage, this.storageKey, currentSession);\r\n                    }\r\n                    else {\r\n                        currentSession.user = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.userNotAvailableProxy)();\r\n                    }\r\n                }\r\n            }\r\n            this._debug(debugName, 'session from storage', currentSession);\r\n            if (!this._isValidSession(currentSession)) {\r\n                this._debug(debugName, 'session is not valid');\r\n                if (currentSession !== null) {\r\n                    await this._removeSession();\r\n                }\r\n                return;\r\n            }\r\n            const expiresWithMargin = ((_b = currentSession.expires_at) !== null && _b !== void 0 ? _b : Infinity) * 1000 - Date.now() < _lib_constants__WEBPACK_IMPORTED_MODULE_1__.EXPIRY_MARGIN_MS;\r\n            this._debug(debugName, `session has${expiresWithMargin ? '' : ' not'} expired with margin of ${_lib_constants__WEBPACK_IMPORTED_MODULE_1__.EXPIRY_MARGIN_MS}s`);\r\n            if (expiresWithMargin) {\r\n                if (this.autoRefreshToken && currentSession.refresh_token) {\r\n                    const { error } = await this._callRefreshToken(currentSession.refresh_token);\r\n                    if (error) {\r\n                        console.error(error);\r\n                        if (!(0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthRetryableFetchError)(error)) {\r\n                            this._debug(debugName, 'refresh failed with a non-retryable error, removing the session', error);\r\n                            await this._removeSession();\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            else if (currentSession.user &&\r\n                currentSession.user.__isUserNotAvailableProxy === true) {\r\n                // If we have a proxy user, try to get the real user data\r\n                try {\r\n                    const { data, error: userError } = await this._getUser(currentSession.access_token);\r\n                    if (!userError && (data === null || data === void 0 ? void 0 : data.user)) {\r\n                        currentSession.user = data.user;\r\n                        await this._saveSession(currentSession);\r\n                        await this._notifyAllSubscribers('SIGNED_IN', currentSession);\r\n                    }\r\n                    else {\r\n                        this._debug(debugName, 'could not get user data, skipping SIGNED_IN notification');\r\n                    }\r\n                }\r\n                catch (getUserError) {\r\n                    console.error('Error getting user data:', getUserError);\r\n                    this._debug(debugName, 'error getting user data, skipping SIGNED_IN notification', getUserError);\r\n                }\r\n            }\r\n            else {\r\n                // no need to persist currentSession again, as we just loaded it from\r\n                // local storage; persisting it again may overwrite a value saved by\r\n                // another client with access to the same local storage\r\n                await this._notifyAllSubscribers('SIGNED_IN', currentSession);\r\n            }\r\n        }\r\n        catch (err) {\r\n            this._debug(debugName, 'error', err);\r\n            console.error(err);\r\n            return;\r\n        }\r\n        finally {\r\n            this._debug(debugName, 'end');\r\n        }\r\n    }\r\n    async _callRefreshToken(refreshToken) {\r\n        var _a, _b;\r\n        if (!refreshToken) {\r\n            throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError();\r\n        }\r\n        // refreshing is already in progress\r\n        if (this.refreshingDeferred) {\r\n            return this.refreshingDeferred.promise;\r\n        }\r\n        const debugName = `#_callRefreshToken(${refreshToken.substring(0, 5)}...)`;\r\n        this._debug(debugName, 'begin');\r\n        try {\r\n            this.refreshingDeferred = new _lib_helpers__WEBPACK_IMPORTED_MODULE_4__.Deferred();\r\n            const { data, error } = await this._refreshAccessToken(refreshToken);\r\n            if (error)\r\n                throw error;\r\n            if (!data.session)\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError();\r\n            await this._saveSession(data.session);\r\n            await this._notifyAllSubscribers('TOKEN_REFRESHED', data.session);\r\n            const result = { data: data.session, error: null };\r\n            this.refreshingDeferred.resolve(result);\r\n            return result;\r\n        }\r\n        catch (error) {\r\n            this._debug(debugName, 'error', error);\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                const result = { data: null, error };\r\n                if (!(0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthRetryableFetchError)(error)) {\r\n                    await this._removeSession();\r\n                }\r\n                (_a = this.refreshingDeferred) === null || _a === void 0 ? void 0 : _a.resolve(result);\r\n                return result;\r\n            }\r\n            (_b = this.refreshingDeferred) === null || _b === void 0 ? void 0 : _b.reject(error);\r\n            throw error;\r\n        }\r\n        finally {\r\n            this.refreshingDeferred = null;\r\n            this._debug(debugName, 'end');\r\n        }\r\n    }\r\n    async _notifyAllSubscribers(event, session, broadcast = true) {\r\n        const debugName = `#_notifyAllSubscribers(${event})`;\r\n        this._debug(debugName, 'begin', session, `broadcast = ${broadcast}`);\r\n        try {\r\n            if (this.broadcastChannel && broadcast) {\r\n                this.broadcastChannel.postMessage({ event, session });\r\n            }\r\n            const errors = [];\r\n            const promises = Array.from(this.stateChangeEmitters.values()).map(async (x) => {\r\n                try {\r\n                    await x.callback(event, session);\r\n                }\r\n                catch (e) {\r\n                    errors.push(e);\r\n                }\r\n            });\r\n            await Promise.all(promises);\r\n            if (errors.length > 0) {\r\n                for (let i = 0; i < errors.length; i += 1) {\r\n                    console.error(errors[i]);\r\n                }\r\n                throw errors[0];\r\n            }\r\n        }\r\n        finally {\r\n            this._debug(debugName, 'end');\r\n        }\r\n    }\r\n    /**\r\n     * set currentSession and currentUser\r\n     * process to _startAutoRefreshToken if possible\r\n     */\r\n    async _saveSession(session) {\r\n        this._debug('#_saveSession()', session);\r\n        // _saveSession is always called whenever a new session has been acquired\r\n        // so we can safely suppress the warning returned by future getSession calls\r\n        this.suppressGetSessionWarning = true;\r\n        // Create a shallow copy to work with, to avoid mutating the original session object if it's used elsewhere\r\n        const sessionToProcess = Object.assign({}, session);\r\n        const userIsProxy = sessionToProcess.user && sessionToProcess.user.__isUserNotAvailableProxy === true;\r\n        if (this.userStorage) {\r\n            if (!userIsProxy && sessionToProcess.user) {\r\n                // If it's a real user object, save it to userStorage.\r\n                await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.setItemAsync)(this.userStorage, this.storageKey + '-user', {\r\n                    user: sessionToProcess.user,\r\n                });\r\n            }\r\n            else if (userIsProxy) {\r\n                // If it's the proxy, it means user was not found in userStorage.\r\n                // We should ensure no stale user data for this key exists in userStorage if we were to save null,\r\n                // or simply not save the proxy. For now, we don't save the proxy here.\r\n                // If there's a need to clear userStorage if user becomes proxy, that logic would go here.\r\n            }\r\n            // Prepare the main session data for primary storage: remove the user property before cloning\r\n            // This is important because the original session.user might be the proxy\r\n            const mainSessionData = Object.assign({}, sessionToProcess);\r\n            delete mainSessionData.user; // Remove user (real or proxy) before cloning for main storage\r\n            const clonedMainSessionData = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.deepClone)(mainSessionData);\r\n            await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.setItemAsync)(this.storage, this.storageKey, clonedMainSessionData);\r\n        }\r\n        else {\r\n            // No userStorage is configured.\r\n            // In this case, session.user should ideally not be a proxy.\r\n            // If it were, structuredClone would fail. This implies an issue elsewhere if user is a proxy here\r\n            const clonedSession = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.deepClone)(sessionToProcess); // sessionToProcess still has its original user property\r\n            await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.setItemAsync)(this.storage, this.storageKey, clonedSession);\r\n        }\r\n    }\r\n    async _removeSession() {\r\n        this._debug('#_removeSession()');\r\n        await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.storage, this.storageKey);\r\n        await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.storage, this.storageKey + '-code-verifier');\r\n        await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.storage, this.storageKey + '-user');\r\n        if (this.userStorage) {\r\n            await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.removeItemAsync)(this.userStorage, this.storageKey + '-user');\r\n        }\r\n        await this._notifyAllSubscribers('SIGNED_OUT', null);\r\n    }\r\n    /**\r\n     * Removes any registered visibilitychange callback.\r\n     *\r\n     * {@see #startAutoRefresh}\r\n     * {@see #stopAutoRefresh}\r\n     */\r\n    _removeVisibilityChangedCallback() {\r\n        this._debug('#_removeVisibilityChangedCallback()');\r\n        const callback = this.visibilityChangedCallback;\r\n        this.visibilityChangedCallback = null;\r\n        try {\r\n            if (callback && (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)() && (window === null || window === void 0 ? void 0 : window.removeEventListener)) {\r\n                window.removeEventListener('visibilitychange', callback);\r\n            }\r\n        }\r\n        catch (e) {\r\n            console.error('removing visibilitychange callback failed', e);\r\n        }\r\n    }\r\n    /**\r\n     * This is the private implementation of {@link #startAutoRefresh}. Use this\r\n     * within the library.\r\n     */\r\n    async _startAutoRefresh() {\r\n        await this._stopAutoRefresh();\r\n        this._debug('#_startAutoRefresh()');\r\n        const ticker = setInterval(() => this._autoRefreshTokenTick(), _lib_constants__WEBPACK_IMPORTED_MODULE_1__.AUTO_REFRESH_TICK_DURATION_MS);\r\n        this.autoRefreshTicker = ticker;\r\n        if (ticker && typeof ticker === 'object' && typeof ticker.unref === 'function') {\r\n            // ticker is a NodeJS Timeout object that has an `unref` method\r\n            // https://nodejs.org/api/timers.html#timeoutunref\r\n            // When auto refresh is used in NodeJS (like for testing) the\r\n            // `setInterval` is preventing the process from being marked as\r\n            // finished and tests run endlessly. This can be prevented by calling\r\n            // `unref()` on the returned object.\r\n            ticker.unref();\r\n            // @ts-expect-error TS has no context of Deno\r\n        }\r\n        else if (typeof Deno !== 'undefined' && typeof Deno.unrefTimer === 'function') {\r\n            // similar like for NodeJS, but with the Deno API\r\n            // https://deno.land/api@latest?unstable&s=Deno.unrefTimer\r\n            // @ts-expect-error TS has no context of Deno\r\n            Deno.unrefTimer(ticker);\r\n        }\r\n        // run the tick immediately, but in the next pass of the event loop so that\r\n        // #_initialize can be allowed to complete without recursively waiting on\r\n        // itself\r\n        setTimeout(async () => {\r\n            await this.initializePromise;\r\n            await this._autoRefreshTokenTick();\r\n        }, 0);\r\n    }\r\n    /**\r\n     * This is the private implementation of {@link #stopAutoRefresh}. Use this\r\n     * within the library.\r\n     */\r\n    async _stopAutoRefresh() {\r\n        this._debug('#_stopAutoRefresh()');\r\n        const ticker = this.autoRefreshTicker;\r\n        this.autoRefreshTicker = null;\r\n        if (ticker) {\r\n            clearInterval(ticker);\r\n        }\r\n    }\r\n    /**\r\n     * Starts an auto-refresh process in the background. The session is checked\r\n     * every few seconds. Close to the time of expiration a process is started to\r\n     * refresh the session. If refreshing fails it will be retried for as long as\r\n     * necessary.\r\n     *\r\n     * If you set the {@link GoTrueClientOptions#autoRefreshToken} you don't need\r\n     * to call this function, it will be called for you.\r\n     *\r\n     * On browsers the refresh process works only when the tab/window is in the\r\n     * foreground to conserve resources as well as prevent race conditions and\r\n     * flooding auth with requests. If you call this method any managed\r\n     * visibility change callback will be removed and you must manage visibility\r\n     * changes on your own.\r\n     *\r\n     * On non-browser platforms the refresh process works *continuously* in the\r\n     * background, which may not be desirable. You should hook into your\r\n     * platform's foreground indication mechanism and call these methods\r\n     * appropriately to conserve resources.\r\n     *\r\n     * {@see #stopAutoRefresh}\r\n     */\r\n    async startAutoRefresh() {\r\n        this._removeVisibilityChangedCallback();\r\n        await this._startAutoRefresh();\r\n    }\r\n    /**\r\n     * Stops an active auto refresh process running in the background (if any).\r\n     *\r\n     * If you call this method any managed visibility change callback will be\r\n     * removed and you must manage visibility changes on your own.\r\n     *\r\n     * See {@link #startAutoRefresh} for more details.\r\n     */\r\n    async stopAutoRefresh() {\r\n        this._removeVisibilityChangedCallback();\r\n        await this._stopAutoRefresh();\r\n    }\r\n    /**\r\n     * Runs the auto refresh token tick.\r\n     */\r\n    async _autoRefreshTokenTick() {\r\n        this._debug('#_autoRefreshTokenTick()', 'begin');\r\n        try {\r\n            await this._acquireLock(0, async () => {\r\n                try {\r\n                    const now = Date.now();\r\n                    try {\r\n                        return await this._useSession(async (result) => {\r\n                            const { data: { session }, } = result;\r\n                            if (!session || !session.refresh_token || !session.expires_at) {\r\n                                this._debug('#_autoRefreshTokenTick()', 'no session');\r\n                                return;\r\n                            }\r\n                            // session will expire in this many ticks (or has already expired if <= 0)\r\n                            const expiresInTicks = Math.floor((session.expires_at * 1000 - now) / _lib_constants__WEBPACK_IMPORTED_MODULE_1__.AUTO_REFRESH_TICK_DURATION_MS);\r\n                            this._debug('#_autoRefreshTokenTick()', `access token expires in ${expiresInTicks} ticks, a tick lasts ${_lib_constants__WEBPACK_IMPORTED_MODULE_1__.AUTO_REFRESH_TICK_DURATION_MS}ms, refresh threshold is ${_lib_constants__WEBPACK_IMPORTED_MODULE_1__.AUTO_REFRESH_TICK_THRESHOLD} ticks`);\r\n                            if (expiresInTicks <= _lib_constants__WEBPACK_IMPORTED_MODULE_1__.AUTO_REFRESH_TICK_THRESHOLD) {\r\n                                await this._callRefreshToken(session.refresh_token);\r\n                            }\r\n                        });\r\n                    }\r\n                    catch (e) {\r\n                        console.error('Auto refresh tick failed with error. This is likely a transient error.', e);\r\n                    }\r\n                }\r\n                finally {\r\n                    this._debug('#_autoRefreshTokenTick()', 'end');\r\n                }\r\n            });\r\n        }\r\n        catch (e) {\r\n            if (e.isAcquireTimeout || e instanceof _lib_locks__WEBPACK_IMPORTED_MODULE_6__.LockAcquireTimeoutError) {\r\n                this._debug('auto refresh token tick lock not available');\r\n            }\r\n            else {\r\n                throw e;\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Registers callbacks on the browser / platform, which in-turn run\r\n     * algorithms when the browser window/tab are in foreground. On non-browser\r\n     * platforms it assumes always foreground.\r\n     */\r\n    async _handleVisibilityChange() {\r\n        this._debug('#_handleVisibilityChange()');\r\n        if (!(0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.isBrowser)() || !(window === null || window === void 0 ? void 0 : window.addEventListener)) {\r\n            if (this.autoRefreshToken) {\r\n                // in non-browser environments the refresh token ticker runs always\r\n                this.startAutoRefresh();\r\n            }\r\n            return false;\r\n        }\r\n        try {\r\n            this.visibilityChangedCallback = async () => await this._onVisibilityChanged(false);\r\n            window === null || window === void 0 ? void 0 : window.addEventListener('visibilitychange', this.visibilityChangedCallback);\r\n            // now immediately call the visbility changed callback to setup with the\r\n            // current visbility state\r\n            await this._onVisibilityChanged(true); // initial call\r\n        }\r\n        catch (error) {\r\n            console.error('_handleVisibilityChange', error);\r\n        }\r\n    }\r\n    /**\r\n     * Callback registered with `window.addEventListener('visibilitychange')`.\r\n     */\r\n    async _onVisibilityChanged(calledFromInitialize) {\r\n        const methodName = `#_onVisibilityChanged(${calledFromInitialize})`;\r\n        this._debug(methodName, 'visibilityState', document.visibilityState);\r\n        if (document.visibilityState === 'visible') {\r\n            if (this.autoRefreshToken) {\r\n                // in browser environments the refresh token ticker runs only on focused tabs\r\n                // which prevents race conditions\r\n                this._startAutoRefresh();\r\n            }\r\n            if (!calledFromInitialize) {\r\n                // called when the visibility has changed, i.e. the browser\r\n                // transitioned from hidden -> visible so we need to see if the session\r\n                // should be recovered immediately... but to do that we need to acquire\r\n                // the lock first asynchronously\r\n                await this.initializePromise;\r\n                await this._acquireLock(-1, async () => {\r\n                    if (document.visibilityState !== 'visible') {\r\n                        this._debug(methodName, 'acquired the lock to recover the session, but the browser visibilityState is no longer visible, aborting');\r\n                        // visibility has changed while waiting for the lock, abort\r\n                        return;\r\n                    }\r\n                    // recover the session\r\n                    await this._recoverAndRefresh();\r\n                });\r\n            }\r\n        }\r\n        else if (document.visibilityState === 'hidden') {\r\n            if (this.autoRefreshToken) {\r\n                this._stopAutoRefresh();\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Generates the relevant login URL for a third-party provider.\r\n     * @param options.redirectTo A URL or mobile address to send the user to after they are confirmed.\r\n     * @param options.scopes A space-separated list of scopes granted to the OAuth application.\r\n     * @param options.queryParams An object of key-value pairs containing query parameters granted to the OAuth application.\r\n     */\r\n    async _getUrlForProvider(url, provider, options) {\r\n        const urlParams = [`provider=${encodeURIComponent(provider)}`];\r\n        if (options === null || options === void 0 ? void 0 : options.redirectTo) {\r\n            urlParams.push(`redirect_to=${encodeURIComponent(options.redirectTo)}`);\r\n        }\r\n        if (options === null || options === void 0 ? void 0 : options.scopes) {\r\n            urlParams.push(`scopes=${encodeURIComponent(options.scopes)}`);\r\n        }\r\n        if (this.flowType === 'pkce') {\r\n            const [codeChallenge, codeChallengeMethod] = await (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getCodeChallengeAndMethod)(this.storage, this.storageKey);\r\n            const flowParams = new URLSearchParams({\r\n                code_challenge: `${encodeURIComponent(codeChallenge)}`,\r\n                code_challenge_method: `${encodeURIComponent(codeChallengeMethod)}`,\r\n            });\r\n            urlParams.push(flowParams.toString());\r\n        }\r\n        if (options === null || options === void 0 ? void 0 : options.queryParams) {\r\n            const query = new URLSearchParams(options.queryParams);\r\n            urlParams.push(query.toString());\r\n        }\r\n        if (options === null || options === void 0 ? void 0 : options.skipBrowserRedirect) {\r\n            urlParams.push(`skip_http_redirect=${options.skipBrowserRedirect}`);\r\n        }\r\n        return `${url}?${urlParams.join('&')}`;\r\n    }\r\n    async _unenroll(params) {\r\n        try {\r\n            return await this._useSession(async (result) => {\r\n                var _a;\r\n                const { data: sessionData, error: sessionError } = result;\r\n                if (sessionError) {\r\n                    return { data: null, error: sessionError };\r\n                }\r\n                return await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'DELETE', `${this.url}/factors/${params.factorId}`, {\r\n                    headers: this.headers,\r\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\r\n                });\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async _enroll(params) {\r\n        try {\r\n            return await this._useSession(async (result) => {\r\n                var _a, _b;\r\n                const { data: sessionData, error: sessionError } = result;\r\n                if (sessionError) {\r\n                    return { data: null, error: sessionError };\r\n                }\r\n                const body = Object.assign({ friendly_name: params.friendlyName, factor_type: params.factorType }, (params.factorType === 'phone'\r\n                    ? { phone: params.phone }\r\n                    : params.factorType === 'totp'\r\n                        ? { issuer: params.issuer }\r\n                        : {}));\r\n                const { data, error } = (await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/factors`, {\r\n                    body,\r\n                    headers: this.headers,\r\n                    jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\r\n                }));\r\n                if (error) {\r\n                    return { data: null, error };\r\n                }\r\n                if (params.factorType === 'totp' && data.type === 'totp' && ((_b = data === null || data === void 0 ? void 0 : data.totp) === null || _b === void 0 ? void 0 : _b.qr_code)) {\r\n                    data.totp.qr_code = `data:image/svg+xml;utf-8,${data.totp.qr_code}`;\r\n                }\r\n                return { data, error: null };\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n    async _verify(params) {\r\n        return this._acquireLock(-1, async () => {\r\n            try {\r\n                return await this._useSession(async (result) => {\r\n                    var _a;\r\n                    const { data: sessionData, error: sessionError } = result;\r\n                    if (sessionError) {\r\n                        return { data: null, error: sessionError };\r\n                    }\r\n                    const body = Object.assign({ challenge_id: params.challengeId }, ('webauthn' in params\r\n                        ? {\r\n                            webauthn: Object.assign(Object.assign({}, params.webauthn), { credential_response: params.webauthn.type === 'create'\r\n                                    ? (0,_lib_webauthn__WEBPACK_IMPORTED_MODULE_11__.serializeCredentialCreationResponse)(params.webauthn.credential_response)\r\n                                    : (0,_lib_webauthn__WEBPACK_IMPORTED_MODULE_11__.serializeCredentialRequestResponse)(params.webauthn.credential_response) }),\r\n                        }\r\n                        : { code: params.code }));\r\n                    const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/verify`, {\r\n                        body,\r\n                        headers: this.headers,\r\n                        jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\r\n                    });\r\n                    if (error) {\r\n                        return { data: null, error };\r\n                    }\r\n                    await this._saveSession(Object.assign({ expires_at: Math.round(Date.now() / 1000) + data.expires_in }, data));\r\n                    await this._notifyAllSubscribers('MFA_CHALLENGE_VERIFIED', data);\r\n                    return { data, error };\r\n                });\r\n            }\r\n            catch (error) {\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    async _challenge(params) {\r\n        return this._acquireLock(-1, async () => {\r\n            try {\r\n                return await this._useSession(async (result) => {\r\n                    var _a;\r\n                    const { data: sessionData, error: sessionError } = result;\r\n                    if (sessionError) {\r\n                        return { data: null, error: sessionError };\r\n                    }\r\n                    const response = (await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'POST', `${this.url}/factors/${params.factorId}/challenge`, {\r\n                        body: params,\r\n                        headers: this.headers,\r\n                        jwt: (_a = sessionData === null || sessionData === void 0 ? void 0 : sessionData.session) === null || _a === void 0 ? void 0 : _a.access_token,\r\n                    }));\r\n                    if (response.error) {\r\n                        return response;\r\n                    }\r\n                    const { data } = response;\r\n                    if (data.type !== 'webauthn') {\r\n                        return { data, error: null };\r\n                    }\r\n                    switch (data.webauthn.type) {\r\n                        case 'create':\r\n                            return {\r\n                                data: Object.assign(Object.assign({}, data), { webauthn: Object.assign(Object.assign({}, data.webauthn), { credential_options: Object.assign(Object.assign({}, data.webauthn.credential_options), { publicKey: (0,_lib_webauthn__WEBPACK_IMPORTED_MODULE_11__.deserializeCredentialCreationOptions)(data.webauthn.credential_options.publicKey) }) }) }),\r\n                                error: null,\r\n                            };\r\n                        case 'request':\r\n                            return {\r\n                                data: Object.assign(Object.assign({}, data), { webauthn: Object.assign(Object.assign({}, data.webauthn), { credential_options: Object.assign(Object.assign({}, data.webauthn.credential_options), { publicKey: (0,_lib_webauthn__WEBPACK_IMPORTED_MODULE_11__.deserializeCredentialRequestOptions)(data.webauthn.credential_options.publicKey) }) }) }),\r\n                                error: null,\r\n                            };\r\n                    }\r\n                });\r\n            }\r\n            catch (error) {\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * {@see GoTrueMFAApi#challengeAndVerify}\r\n     */\r\n    async _challengeAndVerify(params) {\r\n        // both _challenge and _verify independently acquire the lock, so no need\r\n        // to acquire it here\r\n        const { data: challengeData, error: challengeError } = await this._challenge({\r\n            factorId: params.factorId,\r\n        });\r\n        if (challengeError) {\r\n            return { data: null, error: challengeError };\r\n        }\r\n        return await this._verify({\r\n            factorId: params.factorId,\r\n            challengeId: challengeData.id,\r\n            code: params.code,\r\n        });\r\n    }\r\n    /**\r\n     * {@see GoTrueMFAApi#listFactors}\r\n     */\r\n    async _listFactors() {\r\n        var _a;\r\n        // use #getUser instead of #_getUser as the former acquires a lock\r\n        const { data: { user }, error: userError, } = await this.getUser();\r\n        if (userError) {\r\n            return { data: null, error: userError };\r\n        }\r\n        const data = {\r\n            all: [],\r\n            phone: [],\r\n            totp: [],\r\n            webauthn: [],\r\n        };\r\n        // loop over the factors ONCE\r\n        for (const factor of (_a = user === null || user === void 0 ? void 0 : user.factors) !== null && _a !== void 0 ? _a : []) {\r\n            data.all.push(factor);\r\n            if (factor.status === 'verified') {\r\n                ;\r\n                data[factor.factor_type].push(factor);\r\n            }\r\n        }\r\n        return {\r\n            data,\r\n            error: null,\r\n        };\r\n    }\r\n    /**\r\n     * {@see GoTrueMFAApi#getAuthenticatorAssuranceLevel}\r\n     */\r\n    async _getAuthenticatorAssuranceLevel() {\r\n        return this._acquireLock(-1, async () => {\r\n            return await this._useSession(async (result) => {\r\n                var _a, _b;\r\n                const { data: { session }, error: sessionError, } = result;\r\n                if (sessionError) {\r\n                    return { data: null, error: sessionError };\r\n                }\r\n                if (!session) {\r\n                    return {\r\n                        data: { currentLevel: null, nextLevel: null, currentAuthenticationMethods: [] },\r\n                        error: null,\r\n                    };\r\n                }\r\n                const { payload } = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.decodeJWT)(session.access_token);\r\n                let currentLevel = null;\r\n                if (payload.aal) {\r\n                    currentLevel = payload.aal;\r\n                }\r\n                let nextLevel = currentLevel;\r\n                const verifiedFactors = (_b = (_a = session.user.factors) === null || _a === void 0 ? void 0 : _a.filter((factor) => factor.status === 'verified')) !== null && _b !== void 0 ? _b : [];\r\n                if (verifiedFactors.length > 0) {\r\n                    nextLevel = 'aal2';\r\n                }\r\n                const currentAuthenticationMethods = payload.amr || [];\r\n                return { data: { currentLevel, nextLevel, currentAuthenticationMethods }, error: null };\r\n            });\r\n        });\r\n    }\r\n    async fetchJwk(kid, jwks = { keys: [] }) {\r\n        // try fetching from the supplied jwks\r\n        let jwk = jwks.keys.find((key) => key.kid === kid);\r\n        if (jwk) {\r\n            return jwk;\r\n        }\r\n        const now = Date.now();\r\n        // try fetching from cache\r\n        jwk = this.jwks.keys.find((key) => key.kid === kid);\r\n        // jwk exists and jwks isn't stale\r\n        if (jwk && this.jwks_cached_at + _lib_constants__WEBPACK_IMPORTED_MODULE_1__.JWKS_TTL > now) {\r\n            return jwk;\r\n        }\r\n        // jwk isn't cached in memory so we need to fetch it from the well-known endpoint\r\n        const { data, error } = await (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_3__._request)(this.fetch, 'GET', `${this.url}/.well-known/jwks.json`, {\r\n            headers: this.headers,\r\n        });\r\n        if (error) {\r\n            throw error;\r\n        }\r\n        if (!data.keys || data.keys.length === 0) {\r\n            return null;\r\n        }\r\n        this.jwks = data;\r\n        this.jwks_cached_at = now;\r\n        // Find the signing key\r\n        jwk = data.keys.find((key) => key.kid === kid);\r\n        if (!jwk) {\r\n            return null;\r\n        }\r\n        return jwk;\r\n    }\r\n    /**\r\n     * Extracts the JWT claims present in the access token by first verifying the\r\n     * JWT against the server's JSON Web Key Set endpoint\r\n     * `/.well-known/jwks.json` which is often cached, resulting in significantly\r\n     * faster responses. Prefer this method over {@link #getUser} which always\r\n     * sends a request to the Auth server for each JWT.\r\n     *\r\n     * If the project is not using an asymmetric JWT signing key (like ECC or\r\n     * RSA) it always sends a request to the Auth server (similar to {@link\r\n     * #getUser}) to verify the JWT.\r\n     *\r\n     * @param jwt An optional specific JWT you wish to verify, not the one you\r\n     *            can obtain from {@link #getSession}.\r\n     * @param options Various additional options that allow you to customize the\r\n     *                behavior of this method.\r\n     */\r\n    async getClaims(jwt, options = {}) {\r\n        try {\r\n            let token = jwt;\r\n            if (!token) {\r\n                const { data, error } = await this.getSession();\r\n                if (error || !data.session) {\r\n                    return { data: null, error };\r\n                }\r\n                token = data.session.access_token;\r\n            }\r\n            const { header, payload, signature, raw: { header: rawHeader, payload: rawPayload }, } = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.decodeJWT)(token);\r\n            if (!(options === null || options === void 0 ? void 0 : options.allowExpired)) {\r\n                // Reject expired JWTs should only happen if jwt argument was passed\r\n                (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.validateExp)(payload.exp);\r\n            }\r\n            const signingKey = !header.alg ||\r\n                header.alg.startsWith('HS') ||\r\n                !header.kid ||\r\n                !('crypto' in globalThis && 'subtle' in globalThis.crypto)\r\n                ? null\r\n                : await this.fetchJwk(header.kid, (options === null || options === void 0 ? void 0 : options.keys) ? { keys: options.keys } : options === null || options === void 0 ? void 0 : options.jwks);\r\n            // If symmetric algorithm or WebCrypto API is unavailable, fallback to getUser()\r\n            if (!signingKey) {\r\n                const { error } = await this.getUser(token);\r\n                if (error) {\r\n                    throw error;\r\n                }\r\n                // getUser succeeds so the claims in the JWT can be trusted\r\n                return {\r\n                    data: {\r\n                        claims: payload,\r\n                        header,\r\n                        signature,\r\n                    },\r\n                    error: null,\r\n                };\r\n            }\r\n            const algorithm = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_4__.getAlgorithm)(header.alg);\r\n            // Convert JWK to CryptoKey\r\n            const publicKey = await crypto.subtle.importKey('jwk', signingKey, algorithm, true, [\r\n                'verify',\r\n            ]);\r\n            // Verify the signature\r\n            const isValid = await crypto.subtle.verify(algorithm, publicKey, signature, (0,_lib_base64url__WEBPACK_IMPORTED_MODULE_9__.stringToUint8Array)(`${rawHeader}.${rawPayload}`));\r\n            if (!isValid) {\r\n                throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.AuthInvalidJwtError('Invalid JWT signature');\r\n            }\r\n            // If verification succeeds, decode and return claims\r\n            return {\r\n                data: {\r\n                    claims: payload,\r\n                    header,\r\n                    signature,\r\n                },\r\n                error: null,\r\n            };\r\n        }\r\n        catch (error) {\r\n            if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            throw error;\r\n        }\r\n    }\r\n}\r\nGoTrueClient.nextInstanceID = 0;\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GoTrueClient);\r\n//# sourceMappingURL=GoTrueClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthAdminApi: () => (/* reexport safe */ _AuthAdminApi__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   AuthApiError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthApiError),\n/* harmony export */   AuthClient: () => (/* reexport safe */ _AuthClient__WEBPACK_IMPORTED_MODULE_3__[\"default\"]),\n/* harmony export */   AuthError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthError),\n/* harmony export */   AuthImplicitGrantRedirectError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthImplicitGrantRedirectError),\n/* harmony export */   AuthInvalidCredentialsError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthInvalidCredentialsError),\n/* harmony export */   AuthInvalidJwtError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthInvalidJwtError),\n/* harmony export */   AuthInvalidTokenResponseError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthInvalidTokenResponseError),\n/* harmony export */   AuthPKCEGrantCodeExchangeError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthPKCEGrantCodeExchangeError),\n/* harmony export */   AuthRetryableFetchError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthRetryableFetchError),\n/* harmony export */   AuthSessionMissingError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthSessionMissingError),\n/* harmony export */   AuthUnknownError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthUnknownError),\n/* harmony export */   AuthWeakPasswordError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.AuthWeakPasswordError),\n/* harmony export */   CustomAuthError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.CustomAuthError),\n/* harmony export */   GoTrueAdminApi: () => (/* reexport safe */ _GoTrueAdminApi__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   GoTrueClient: () => (/* reexport safe */ _GoTrueClient__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   NavigatorLockAcquireTimeoutError: () => (/* reexport safe */ _lib_locks__WEBPACK_IMPORTED_MODULE_6__.NavigatorLockAcquireTimeoutError),\n/* harmony export */   SIGN_OUT_SCOPES: () => (/* reexport safe */ _lib_types__WEBPACK_IMPORTED_MODULE_4__.SIGN_OUT_SCOPES),\n/* harmony export */   isAuthApiError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.isAuthApiError),\n/* harmony export */   isAuthError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.isAuthError),\n/* harmony export */   isAuthImplicitGrantRedirectError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.isAuthImplicitGrantRedirectError),\n/* harmony export */   isAuthRetryableFetchError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.isAuthRetryableFetchError),\n/* harmony export */   isAuthSessionMissingError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.isAuthSessionMissingError),\n/* harmony export */   isAuthWeakPasswordError: () => (/* reexport safe */ _lib_errors__WEBPACK_IMPORTED_MODULE_5__.isAuthWeakPasswordError),\n/* harmony export */   lockInternals: () => (/* reexport safe */ _lib_locks__WEBPACK_IMPORTED_MODULE_6__.internals),\n/* harmony export */   navigatorLock: () => (/* reexport safe */ _lib_locks__WEBPACK_IMPORTED_MODULE_6__.navigatorLock),\n/* harmony export */   processLock: () => (/* reexport safe */ _lib_locks__WEBPACK_IMPORTED_MODULE_6__.processLock)\n/* harmony export */ });\n/* harmony import */ var _GoTrueAdminApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GoTrueAdminApi */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueAdminApi.js\");\n/* harmony import */ var _GoTrueClient__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./GoTrueClient */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/GoTrueClient.js\");\n/* harmony import */ var _AuthAdminApi__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./AuthAdminApi */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/AuthAdminApi.js\");\n/* harmony import */ var _AuthClient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./AuthClient */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/AuthClient.js\");\n/* harmony import */ var _lib_types__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/types */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/types.js\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./lib/errors */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js\");\n/* harmony import */ var _lib_locks__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./lib/locks */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/locks.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUE4QztBQUNKO0FBQ0E7QUFDSjtBQUM0QjtBQUN0QztBQUNDO0FBQzJGO0FBQ3hIIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2luZGV4LmpzP2NhODIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEdvVHJ1ZUFkbWluQXBpIGZyb20gJy4vR29UcnVlQWRtaW5BcGknO1xyXG5pbXBvcnQgR29UcnVlQ2xpZW50IGZyb20gJy4vR29UcnVlQ2xpZW50JztcclxuaW1wb3J0IEF1dGhBZG1pbkFwaSBmcm9tICcuL0F1dGhBZG1pbkFwaSc7XHJcbmltcG9ydCBBdXRoQ2xpZW50IGZyb20gJy4vQXV0aENsaWVudCc7XHJcbmV4cG9ydCB7IEdvVHJ1ZUFkbWluQXBpLCBHb1RydWVDbGllbnQsIEF1dGhBZG1pbkFwaSwgQXV0aENsaWVudCB9O1xyXG5leHBvcnQgKiBmcm9tICcuL2xpYi90eXBlcyc7XHJcbmV4cG9ydCAqIGZyb20gJy4vbGliL2Vycm9ycyc7XHJcbmV4cG9ydCB7IG5hdmlnYXRvckxvY2ssIE5hdmlnYXRvckxvY2tBY3F1aXJlVGltZW91dEVycm9yLCBpbnRlcm5hbHMgYXMgbG9ja0ludGVybmFscywgcHJvY2Vzc0xvY2ssIH0gZnJvbSAnLi9saWIvbG9ja3MnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/base64url.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/base64url.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   base64UrlToUint8Array: () => (/* binding */ base64UrlToUint8Array),\n/* harmony export */   byteFromBase64URL: () => (/* binding */ byteFromBase64URL),\n/* harmony export */   byteToBase64URL: () => (/* binding */ byteToBase64URL),\n/* harmony export */   bytesToBase64URL: () => (/* binding */ bytesToBase64URL),\n/* harmony export */   codepointToUTF8: () => (/* binding */ codepointToUTF8),\n/* harmony export */   stringFromBase64URL: () => (/* binding */ stringFromBase64URL),\n/* harmony export */   stringFromUTF8: () => (/* binding */ stringFromUTF8),\n/* harmony export */   stringToBase64URL: () => (/* binding */ stringToBase64URL),\n/* harmony export */   stringToUTF8: () => (/* binding */ stringToUTF8),\n/* harmony export */   stringToUint8Array: () => (/* binding */ stringToUint8Array)\n/* harmony export */ });\n/**\r\n * Avoid modifying this file. It's part of\r\n * https://github.com/supabase-community/base64url-js.  Submit all fixes on\r\n * that repo!\r\n */\r\n/**\r\n * An array of characters that encode 6 bits into a Base64-URL alphabet\r\n * character.\r\n */\r\nconst TO_BASE64URL = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'.split('');\r\n/**\r\n * An array of characters that can appear in a Base64-URL encoded string but\r\n * should be ignored.\r\n */\r\nconst IGNORE_BASE64URL = ' \\t\\n\\r='.split('');\r\n/**\r\n * An array of 128 numbers that map a Base64-URL character to 6 bits, or if -2\r\n * used to skip the character, or if -1 used to error out.\r\n */\r\nconst FROM_BASE64URL = (() => {\r\n    const charMap = new Array(128);\r\n    for (let i = 0; i < charMap.length; i += 1) {\r\n        charMap[i] = -1;\r\n    }\r\n    for (let i = 0; i < IGNORE_BASE64URL.length; i += 1) {\r\n        charMap[IGNORE_BASE64URL[i].charCodeAt(0)] = -2;\r\n    }\r\n    for (let i = 0; i < TO_BASE64URL.length; i += 1) {\r\n        charMap[TO_BASE64URL[i].charCodeAt(0)] = i;\r\n    }\r\n    return charMap;\r\n})();\r\n/**\r\n * Converts a byte to a Base64-URL string.\r\n *\r\n * @param byte The byte to convert, or null to flush at the end of the byte sequence.\r\n * @param state The Base64 conversion state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\r\n * @param emit A function called with the next Base64 character when ready.\r\n */\r\nfunction byteToBase64URL(byte, state, emit) {\r\n    if (byte !== null) {\r\n        state.queue = (state.queue << 8) | byte;\r\n        state.queuedBits += 8;\r\n        while (state.queuedBits >= 6) {\r\n            const pos = (state.queue >> (state.queuedBits - 6)) & 63;\r\n            emit(TO_BASE64URL[pos]);\r\n            state.queuedBits -= 6;\r\n        }\r\n    }\r\n    else if (state.queuedBits > 0) {\r\n        state.queue = state.queue << (6 - state.queuedBits);\r\n        state.queuedBits = 6;\r\n        while (state.queuedBits >= 6) {\r\n            const pos = (state.queue >> (state.queuedBits - 6)) & 63;\r\n            emit(TO_BASE64URL[pos]);\r\n            state.queuedBits -= 6;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Converts a String char code (extracted using `string.charCodeAt(position)`) to a sequence of Base64-URL characters.\r\n *\r\n * @param charCode The char code of the JavaScript string.\r\n * @param state The Base64 state. Pass an initial value of `{ queue: 0, queuedBits: 0 }`.\r\n * @param emit A function called with the next byte.\r\n */\r\nfunction byteFromBase64URL(charCode, state, emit) {\r\n    const bits = FROM_BASE64URL[charCode];\r\n    if (bits > -1) {\r\n        // valid Base64-URL character\r\n        state.queue = (state.queue << 6) | bits;\r\n        state.queuedBits += 6;\r\n        while (state.queuedBits >= 8) {\r\n            emit((state.queue >> (state.queuedBits - 8)) & 0xff);\r\n            state.queuedBits -= 8;\r\n        }\r\n    }\r\n    else if (bits === -2) {\r\n        // ignore spaces, tabs, newlines, =\r\n        return;\r\n    }\r\n    else {\r\n        throw new Error(`Invalid Base64-URL character \"${String.fromCharCode(charCode)}\"`);\r\n    }\r\n}\r\n/**\r\n * Converts a JavaScript string (which may include any valid character) into a\r\n * Base64-URL encoded string. The string is first encoded in UTF-8 which is\r\n * then encoded as Base64-URL.\r\n *\r\n * @param str The string to convert.\r\n */\r\nfunction stringToBase64URL(str) {\r\n    const base64 = [];\r\n    const emitter = (char) => {\r\n        base64.push(char);\r\n    };\r\n    const state = { queue: 0, queuedBits: 0 };\r\n    stringToUTF8(str, (byte) => {\r\n        byteToBase64URL(byte, state, emitter);\r\n    });\r\n    byteToBase64URL(null, state, emitter);\r\n    return base64.join('');\r\n}\r\n/**\r\n * Converts a Base64-URL encoded string into a JavaScript string. It is assumed\r\n * that the underlying string has been encoded as UTF-8.\r\n *\r\n * @param str The Base64-URL encoded string.\r\n */\r\nfunction stringFromBase64URL(str) {\r\n    const conv = [];\r\n    const utf8Emit = (codepoint) => {\r\n        conv.push(String.fromCodePoint(codepoint));\r\n    };\r\n    const utf8State = {\r\n        utf8seq: 0,\r\n        codepoint: 0,\r\n    };\r\n    const b64State = { queue: 0, queuedBits: 0 };\r\n    const byteEmit = (byte) => {\r\n        stringFromUTF8(byte, utf8State, utf8Emit);\r\n    };\r\n    for (let i = 0; i < str.length; i += 1) {\r\n        byteFromBase64URL(str.charCodeAt(i), b64State, byteEmit);\r\n    }\r\n    return conv.join('');\r\n}\r\n/**\r\n * Converts a Unicode codepoint to a multi-byte UTF-8 sequence.\r\n *\r\n * @param codepoint The Unicode codepoint.\r\n * @param emit      Function which will be called for each UTF-8 byte that represents the codepoint.\r\n */\r\nfunction codepointToUTF8(codepoint, emit) {\r\n    if (codepoint <= 0x7f) {\r\n        emit(codepoint);\r\n        return;\r\n    }\r\n    else if (codepoint <= 0x7ff) {\r\n        emit(0xc0 | (codepoint >> 6));\r\n        emit(0x80 | (codepoint & 0x3f));\r\n        return;\r\n    }\r\n    else if (codepoint <= 0xffff) {\r\n        emit(0xe0 | (codepoint >> 12));\r\n        emit(0x80 | ((codepoint >> 6) & 0x3f));\r\n        emit(0x80 | (codepoint & 0x3f));\r\n        return;\r\n    }\r\n    else if (codepoint <= 0x10ffff) {\r\n        emit(0xf0 | (codepoint >> 18));\r\n        emit(0x80 | ((codepoint >> 12) & 0x3f));\r\n        emit(0x80 | ((codepoint >> 6) & 0x3f));\r\n        emit(0x80 | (codepoint & 0x3f));\r\n        return;\r\n    }\r\n    throw new Error(`Unrecognized Unicode codepoint: ${codepoint.toString(16)}`);\r\n}\r\n/**\r\n * Converts a JavaScript string to a sequence of UTF-8 bytes.\r\n *\r\n * @param str  The string to convert to UTF-8.\r\n * @param emit Function which will be called for each UTF-8 byte of the string.\r\n */\r\nfunction stringToUTF8(str, emit) {\r\n    for (let i = 0; i < str.length; i += 1) {\r\n        let codepoint = str.charCodeAt(i);\r\n        if (codepoint > 0xd7ff && codepoint <= 0xdbff) {\r\n            // most UTF-16 codepoints are Unicode codepoints, except values in this\r\n            // range where the next UTF-16 codepoint needs to be combined with the\r\n            // current one to get the Unicode codepoint\r\n            const highSurrogate = ((codepoint - 0xd800) * 0x400) & 0xffff;\r\n            const lowSurrogate = (str.charCodeAt(i + 1) - 0xdc00) & 0xffff;\r\n            codepoint = (lowSurrogate | highSurrogate) + 0x10000;\r\n            i += 1;\r\n        }\r\n        codepointToUTF8(codepoint, emit);\r\n    }\r\n}\r\n/**\r\n * Converts a UTF-8 byte to a Unicode codepoint.\r\n *\r\n * @param byte  The UTF-8 byte next in the sequence.\r\n * @param state The shared state between consecutive UTF-8 bytes in the\r\n *              sequence, an object with the shape `{ utf8seq: 0, codepoint: 0 }`.\r\n * @param emit  Function which will be called for each codepoint.\r\n */\r\nfunction stringFromUTF8(byte, state, emit) {\r\n    if (state.utf8seq === 0) {\r\n        if (byte <= 0x7f) {\r\n            emit(byte);\r\n            return;\r\n        }\r\n        // count the number of 1 leading bits until you reach 0\r\n        for (let leadingBit = 1; leadingBit < 6; leadingBit += 1) {\r\n            if (((byte >> (7 - leadingBit)) & 1) === 0) {\r\n                state.utf8seq = leadingBit;\r\n                break;\r\n            }\r\n        }\r\n        if (state.utf8seq === 2) {\r\n            state.codepoint = byte & 31;\r\n        }\r\n        else if (state.utf8seq === 3) {\r\n            state.codepoint = byte & 15;\r\n        }\r\n        else if (state.utf8seq === 4) {\r\n            state.codepoint = byte & 7;\r\n        }\r\n        else {\r\n            throw new Error('Invalid UTF-8 sequence');\r\n        }\r\n        state.utf8seq -= 1;\r\n    }\r\n    else if (state.utf8seq > 0) {\r\n        if (byte <= 0x7f) {\r\n            throw new Error('Invalid UTF-8 sequence');\r\n        }\r\n        state.codepoint = (state.codepoint << 6) | (byte & 63);\r\n        state.utf8seq -= 1;\r\n        if (state.utf8seq === 0) {\r\n            emit(state.codepoint);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Helper functions to convert different types of strings to Uint8Array\r\n */\r\nfunction base64UrlToUint8Array(str) {\r\n    const result = [];\r\n    const state = { queue: 0, queuedBits: 0 };\r\n    const onByte = (byte) => {\r\n        result.push(byte);\r\n    };\r\n    for (let i = 0; i < str.length; i += 1) {\r\n        byteFromBase64URL(str.charCodeAt(i), state, onByte);\r\n    }\r\n    return new Uint8Array(result);\r\n}\r\nfunction stringToUint8Array(str) {\r\n    const result = [];\r\n    stringToUTF8(str, (byte) => result.push(byte));\r\n    return new Uint8Array(result);\r\n}\r\nfunction bytesToBase64URL(bytes) {\r\n    const result = [];\r\n    const state = { queue: 0, queuedBits: 0 };\r\n    const onChar = (char) => {\r\n        result.push(char);\r\n    };\r\n    bytes.forEach((byte) => byteToBase64URL(byte, state, onChar));\r\n    // always call with `null` after processing all bytes\r\n    byteToBase64URL(null, state, onChar);\r\n    return result.join('');\r\n}\r\n//# sourceMappingURL=base64url.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/base64url.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/constants.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/constants.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   API_VERSIONS: () => (/* binding */ API_VERSIONS),\n/* harmony export */   API_VERSION_HEADER_NAME: () => (/* binding */ API_VERSION_HEADER_NAME),\n/* harmony export */   AUDIENCE: () => (/* binding */ AUDIENCE),\n/* harmony export */   AUTO_REFRESH_TICK_DURATION_MS: () => (/* binding */ AUTO_REFRESH_TICK_DURATION_MS),\n/* harmony export */   AUTO_REFRESH_TICK_THRESHOLD: () => (/* binding */ AUTO_REFRESH_TICK_THRESHOLD),\n/* harmony export */   BASE64URL_REGEX: () => (/* binding */ BASE64URL_REGEX),\n/* harmony export */   DEFAULT_HEADERS: () => (/* binding */ DEFAULT_HEADERS),\n/* harmony export */   EXPIRY_MARGIN_MS: () => (/* binding */ EXPIRY_MARGIN_MS),\n/* harmony export */   GOTRUE_URL: () => (/* binding */ GOTRUE_URL),\n/* harmony export */   JWKS_TTL: () => (/* binding */ JWKS_TTL),\n/* harmony export */   NETWORK_FAILURE: () => (/* binding */ NETWORK_FAILURE),\n/* harmony export */   STORAGE_KEY: () => (/* binding */ STORAGE_KEY)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/version.js\");\n\r\n/** Current session will be checked for refresh at this interval. */\r\nconst AUTO_REFRESH_TICK_DURATION_MS = 30 * 1000;\r\n/**\r\n * A token refresh will be attempted this many ticks before the current session expires. */\r\nconst AUTO_REFRESH_TICK_THRESHOLD = 3;\r\n/*\r\n * Earliest time before an access token expires that the session should be refreshed.\r\n */\r\nconst EXPIRY_MARGIN_MS = AUTO_REFRESH_TICK_THRESHOLD * AUTO_REFRESH_TICK_DURATION_MS;\r\nconst GOTRUE_URL = 'http://localhost:9999';\r\nconst STORAGE_KEY = 'supabase.auth.token';\r\nconst AUDIENCE = '';\r\nconst DEFAULT_HEADERS = { 'X-Client-Info': `gotrue-js/${_version__WEBPACK_IMPORTED_MODULE_0__.version}` };\r\nconst NETWORK_FAILURE = {\r\n    MAX_RETRIES: 10,\r\n    RETRY_INTERVAL: 2, // in deciseconds\r\n};\r\nconst API_VERSION_HEADER_NAME = 'X-Supabase-Api-Version';\r\nconst API_VERSIONS = {\r\n    '2024-01-01': {\r\n        timestamp: Date.parse('2024-01-01T00:00:00.0Z'),\r\n        name: '2024-01-01',\r\n    },\r\n};\r\nconst BASE64URL_REGEX = /^([a-z0-9_-]{4})*($|[a-z0-9_-]{3}$|[a-z0-9_-]{2}$)$/i;\r\nconst JWKS_TTL = 10 * 60 * 1000; // 10 minutes\r\n//# sourceMappingURL=constants.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQ3BDO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDTztBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw4QkFBOEIsNkNBQU8sQ0FBQztBQUNoRTtBQUNQO0FBQ0E7QUFDQTtBQUNPO0FBQ0E7QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDTyxzQ0FBc0MsRUFBRSxnQkFBZ0IsRUFBRSxhQUFhLEVBQUU7QUFDekUsaUNBQWlDO0FBQ3hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanM/NGJkNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uJztcclxuLyoqIEN1cnJlbnQgc2Vzc2lvbiB3aWxsIGJlIGNoZWNrZWQgZm9yIHJlZnJlc2ggYXQgdGhpcyBpbnRlcnZhbC4gKi9cclxuZXhwb3J0IGNvbnN0IEFVVE9fUkVGUkVTSF9USUNLX0RVUkFUSU9OX01TID0gMzAgKiAxMDAwO1xyXG4vKipcclxuICogQSB0b2tlbiByZWZyZXNoIHdpbGwgYmUgYXR0ZW1wdGVkIHRoaXMgbWFueSB0aWNrcyBiZWZvcmUgdGhlIGN1cnJlbnQgc2Vzc2lvbiBleHBpcmVzLiAqL1xyXG5leHBvcnQgY29uc3QgQVVUT19SRUZSRVNIX1RJQ0tfVEhSRVNIT0xEID0gMztcclxuLypcclxuICogRWFybGllc3QgdGltZSBiZWZvcmUgYW4gYWNjZXNzIHRva2VuIGV4cGlyZXMgdGhhdCB0aGUgc2Vzc2lvbiBzaG91bGQgYmUgcmVmcmVzaGVkLlxyXG4gKi9cclxuZXhwb3J0IGNvbnN0IEVYUElSWV9NQVJHSU5fTVMgPSBBVVRPX1JFRlJFU0hfVElDS19USFJFU0hPTEQgKiBBVVRPX1JFRlJFU0hfVElDS19EVVJBVElPTl9NUztcclxuZXhwb3J0IGNvbnN0IEdPVFJVRV9VUkwgPSAnaHR0cDovL2xvY2FsaG9zdDo5OTk5JztcclxuZXhwb3J0IGNvbnN0IFNUT1JBR0VfS0VZID0gJ3N1cGFiYXNlLmF1dGgudG9rZW4nO1xyXG5leHBvcnQgY29uc3QgQVVESUVOQ0UgPSAnJztcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSEVBREVSUyA9IHsgJ1gtQ2xpZW50LUluZm8nOiBgZ290cnVlLWpzLyR7dmVyc2lvbn1gIH07XHJcbmV4cG9ydCBjb25zdCBORVRXT1JLX0ZBSUxVUkUgPSB7XHJcbiAgICBNQVhfUkVUUklFUzogMTAsXHJcbiAgICBSRVRSWV9JTlRFUlZBTDogMiwgLy8gaW4gZGVjaXNlY29uZHNcclxufTtcclxuZXhwb3J0IGNvbnN0IEFQSV9WRVJTSU9OX0hFQURFUl9OQU1FID0gJ1gtU3VwYWJhc2UtQXBpLVZlcnNpb24nO1xyXG5leHBvcnQgY29uc3QgQVBJX1ZFUlNJT05TID0ge1xyXG4gICAgJzIwMjQtMDEtMDEnOiB7XHJcbiAgICAgICAgdGltZXN0YW1wOiBEYXRlLnBhcnNlKCcyMDI0LTAxLTAxVDAwOjAwOjAwLjBaJyksXHJcbiAgICAgICAgbmFtZTogJzIwMjQtMDEtMDEnLFxyXG4gICAgfSxcclxufTtcclxuZXhwb3J0IGNvbnN0IEJBU0U2NFVSTF9SRUdFWCA9IC9eKFthLXowLTlfLV17NH0pKigkfFthLXowLTlfLV17M30kfFthLXowLTlfLV17Mn0kKSQvaTtcclxuZXhwb3J0IGNvbnN0IEpXS1NfVFRMID0gMTAgKiA2MCAqIDEwMDA7IC8vIDEwIG1pbnV0ZXNcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js":
/*!******************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/errors.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthApiError: () => (/* binding */ AuthApiError),\n/* harmony export */   AuthError: () => (/* binding */ AuthError),\n/* harmony export */   AuthImplicitGrantRedirectError: () => (/* binding */ AuthImplicitGrantRedirectError),\n/* harmony export */   AuthInvalidCredentialsError: () => (/* binding */ AuthInvalidCredentialsError),\n/* harmony export */   AuthInvalidJwtError: () => (/* binding */ AuthInvalidJwtError),\n/* harmony export */   AuthInvalidTokenResponseError: () => (/* binding */ AuthInvalidTokenResponseError),\n/* harmony export */   AuthPKCEGrantCodeExchangeError: () => (/* binding */ AuthPKCEGrantCodeExchangeError),\n/* harmony export */   AuthRetryableFetchError: () => (/* binding */ AuthRetryableFetchError),\n/* harmony export */   AuthSessionMissingError: () => (/* binding */ AuthSessionMissingError),\n/* harmony export */   AuthUnknownError: () => (/* binding */ AuthUnknownError),\n/* harmony export */   AuthWeakPasswordError: () => (/* binding */ AuthWeakPasswordError),\n/* harmony export */   CustomAuthError: () => (/* binding */ CustomAuthError),\n/* harmony export */   isAuthApiError: () => (/* binding */ isAuthApiError),\n/* harmony export */   isAuthError: () => (/* binding */ isAuthError),\n/* harmony export */   isAuthImplicitGrantRedirectError: () => (/* binding */ isAuthImplicitGrantRedirectError),\n/* harmony export */   isAuthRetryableFetchError: () => (/* binding */ isAuthRetryableFetchError),\n/* harmony export */   isAuthSessionMissingError: () => (/* binding */ isAuthSessionMissingError),\n/* harmony export */   isAuthWeakPasswordError: () => (/* binding */ isAuthWeakPasswordError)\n/* harmony export */ });\nclass AuthError extends Error {\r\n    constructor(message, status, code) {\r\n        super(message);\r\n        this.__isAuthError = true;\r\n        this.name = 'AuthError';\r\n        this.status = status;\r\n        this.code = code;\r\n    }\r\n}\r\nfunction isAuthError(error) {\r\n    return typeof error === 'object' && error !== null && '__isAuthError' in error;\r\n}\r\nclass AuthApiError extends AuthError {\r\n    constructor(message, status, code) {\r\n        super(message, status, code);\r\n        this.name = 'AuthApiError';\r\n        this.status = status;\r\n        this.code = code;\r\n    }\r\n}\r\nfunction isAuthApiError(error) {\r\n    return isAuthError(error) && error.name === 'AuthApiError';\r\n}\r\nclass AuthUnknownError extends AuthError {\r\n    constructor(message, originalError) {\r\n        super(message);\r\n        this.name = 'AuthUnknownError';\r\n        this.originalError = originalError;\r\n    }\r\n}\r\nclass CustomAuthError extends AuthError {\r\n    constructor(message, name, status, code) {\r\n        super(message, status, code);\r\n        this.name = name;\r\n        this.status = status;\r\n    }\r\n}\r\nclass AuthSessionMissingError extends CustomAuthError {\r\n    constructor() {\r\n        super('Auth session missing!', 'AuthSessionMissingError', 400, undefined);\r\n    }\r\n}\r\nfunction isAuthSessionMissingError(error) {\r\n    return isAuthError(error) && error.name === 'AuthSessionMissingError';\r\n}\r\nclass AuthInvalidTokenResponseError extends CustomAuthError {\r\n    constructor() {\r\n        super('Auth session or user missing', 'AuthInvalidTokenResponseError', 500, undefined);\r\n    }\r\n}\r\nclass AuthInvalidCredentialsError extends CustomAuthError {\r\n    constructor(message) {\r\n        super(message, 'AuthInvalidCredentialsError', 400, undefined);\r\n    }\r\n}\r\nclass AuthImplicitGrantRedirectError extends CustomAuthError {\r\n    constructor(message, details = null) {\r\n        super(message, 'AuthImplicitGrantRedirectError', 500, undefined);\r\n        this.details = null;\r\n        this.details = details;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            message: this.message,\r\n            status: this.status,\r\n            details: this.details,\r\n        };\r\n    }\r\n}\r\nfunction isAuthImplicitGrantRedirectError(error) {\r\n    return isAuthError(error) && error.name === 'AuthImplicitGrantRedirectError';\r\n}\r\nclass AuthPKCEGrantCodeExchangeError extends CustomAuthError {\r\n    constructor(message, details = null) {\r\n        super(message, 'AuthPKCEGrantCodeExchangeError', 500, undefined);\r\n        this.details = null;\r\n        this.details = details;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            message: this.message,\r\n            status: this.status,\r\n            details: this.details,\r\n        };\r\n    }\r\n}\r\nclass AuthRetryableFetchError extends CustomAuthError {\r\n    constructor(message, status) {\r\n        super(message, 'AuthRetryableFetchError', status, undefined);\r\n    }\r\n}\r\nfunction isAuthRetryableFetchError(error) {\r\n    return isAuthError(error) && error.name === 'AuthRetryableFetchError';\r\n}\r\n/**\r\n * This error is thrown on certain methods when the password used is deemed\r\n * weak. Inspect the reasons to identify what password strength rules are\r\n * inadequate.\r\n */\r\nclass AuthWeakPasswordError extends CustomAuthError {\r\n    constructor(message, status, reasons) {\r\n        super(message, 'AuthWeakPasswordError', status, 'weak_password');\r\n        this.reasons = reasons;\r\n    }\r\n}\r\nfunction isAuthWeakPasswordError(error) {\r\n    return isAuthError(error) && error.name === 'AuthWeakPasswordError';\r\n}\r\nclass AuthInvalidJwtError extends CustomAuthError {\r\n    constructor(message) {\r\n        super(message, 'AuthInvalidJwtError', 400, 'invalid_jwt');\r\n    }\r\n}\r\n//# sourceMappingURL=errors.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9lcnJvcnMuanM/ZjQ3NyJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgQXV0aEVycm9yIGV4dGVuZHMgRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzLCBjb2RlKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5fX2lzQXV0aEVycm9yID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSAnQXV0aEVycm9yJztcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIHR5cGVvZiBlcnJvciA9PT0gJ29iamVjdCcgJiYgZXJyb3IgIT09IG51bGwgJiYgJ19faXNBdXRoRXJyb3InIGluIGVycm9yO1xyXG59XHJcbmV4cG9ydCBjbGFzcyBBdXRoQXBpRXJyb3IgZXh0ZW5kcyBBdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzLCBjb2RlKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgc3RhdHVzLCBjb2RlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSAnQXV0aEFwaUVycm9yJztcclxuICAgICAgICB0aGlzLnN0YXR1cyA9IHN0YXR1cztcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb2RlO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhBcGlFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aEFwaUVycm9yJztcclxufVxyXG5leHBvcnQgY2xhc3MgQXV0aFVua25vd25FcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBvcmlnaW5hbEVycm9yKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gJ0F1dGhVbmtub3duRXJyb3InO1xyXG4gICAgICAgIHRoaXMub3JpZ2luYWxFcnJvciA9IG9yaWdpbmFsRXJyb3I7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEN1c3RvbUF1dGhFcnJvciBleHRlbmRzIEF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBuYW1lLCBzdGF0dXMsIGNvZGUpIHtcclxuICAgICAgICBzdXBlcihtZXNzYWdlLCBzdGF0dXMsIGNvZGUpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEF1dGhTZXNzaW9uTWlzc2luZ0Vycm9yIGV4dGVuZHMgQ3VzdG9tQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKCdBdXRoIHNlc3Npb24gbWlzc2luZyEnLCAnQXV0aFNlc3Npb25NaXNzaW5nRXJyb3InLCA0MDAsIHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aFNlc3Npb25NaXNzaW5nRXJyb3IoZXJyb3IpIHtcclxuICAgIHJldHVybiBpc0F1dGhFcnJvcihlcnJvcikgJiYgZXJyb3IubmFtZSA9PT0gJ0F1dGhTZXNzaW9uTWlzc2luZ0Vycm9yJztcclxufVxyXG5leHBvcnQgY2xhc3MgQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoJ0F1dGggc2Vzc2lvbiBvciB1c2VyIG1pc3NpbmcnLCAnQXV0aEludmFsaWRUb2tlblJlc3BvbnNlRXJyb3InLCA1MDAsIHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEF1dGhJbnZhbGlkQ3JlZGVudGlhbHNFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhJbnZhbGlkQ3JlZGVudGlhbHNFcnJvcicsIDQwMCwgdW5kZWZpbmVkKTtcclxuICAgIH1cclxufVxyXG5leHBvcnQgY2xhc3MgQXV0aEltcGxpY2l0R3JhbnRSZWRpcmVjdEVycm9yIGV4dGVuZHMgQ3VzdG9tQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvcicsIDUwMCwgdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLmRldGFpbHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXHJcbiAgICAgICAgICAgIGRldGFpbHM6IHRoaXMuZGV0YWlscyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhJbXBsaWNpdEdyYW50UmVkaXJlY3RFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aEltcGxpY2l0R3JhbnRSZWRpcmVjdEVycm9yJztcclxufVxyXG5leHBvcnQgY2xhc3MgQXV0aFBLQ0VHcmFudENvZGVFeGNoYW5nZUVycm9yIGV4dGVuZHMgQ3VzdG9tQXV0aEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGRldGFpbHMgPSBudWxsKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhQS0NFR3JhbnRDb2RlRXhjaGFuZ2VFcnJvcicsIDUwMCwgdW5kZWZpbmVkKTtcclxuICAgICAgICB0aGlzLmRldGFpbHMgPSBudWxsO1xyXG4gICAgICAgIHRoaXMuZGV0YWlscyA9IGRldGFpbHM7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXHJcbiAgICAgICAgICAgIGRldGFpbHM6IHRoaXMuZGV0YWlscyxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBBdXRoUmV0cnlhYmxlRmV0Y2hFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBzdGF0dXMpIHtcclxuICAgICAgICBzdXBlcihtZXNzYWdlLCAnQXV0aFJldHJ5YWJsZUZldGNoRXJyb3InLCBzdGF0dXMsIHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGlzQXV0aFJldHJ5YWJsZUZldGNoRXJyb3IoZXJyb3IpIHtcclxuICAgIHJldHVybiBpc0F1dGhFcnJvcihlcnJvcikgJiYgZXJyb3IubmFtZSA9PT0gJ0F1dGhSZXRyeWFibGVGZXRjaEVycm9yJztcclxufVxyXG4vKipcclxuICogVGhpcyBlcnJvciBpcyB0aHJvd24gb24gY2VydGFpbiBtZXRob2RzIHdoZW4gdGhlIHBhc3N3b3JkIHVzZWQgaXMgZGVlbWVkXHJcbiAqIHdlYWsuIEluc3BlY3QgdGhlIHJlYXNvbnMgdG8gaWRlbnRpZnkgd2hhdCBwYXNzd29yZCBzdHJlbmd0aCBydWxlcyBhcmVcclxuICogaW5hZGVxdWF0ZS5cclxuICovXHJcbmV4cG9ydCBjbGFzcyBBdXRoV2Vha1Bhc3N3b3JkRXJyb3IgZXh0ZW5kcyBDdXN0b21BdXRoRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgc3RhdHVzLCByZWFzb25zKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhXZWFrUGFzc3dvcmRFcnJvcicsIHN0YXR1cywgJ3dlYWtfcGFzc3dvcmQnKTtcclxuICAgICAgICB0aGlzLnJlYXNvbnMgPSByZWFzb25zO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBpc0F1dGhXZWFrUGFzc3dvcmRFcnJvcihlcnJvcikge1xyXG4gICAgcmV0dXJuIGlzQXV0aEVycm9yKGVycm9yKSAmJiBlcnJvci5uYW1lID09PSAnQXV0aFdlYWtQYXNzd29yZEVycm9yJztcclxufVxyXG5leHBvcnQgY2xhc3MgQXV0aEludmFsaWRKd3RFcnJvciBleHRlbmRzIEN1c3RvbUF1dGhFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgJ0F1dGhJbnZhbGlkSnd0RXJyb3InLCA0MDAsICdpbnZhbGlkX2p3dCcpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9ycy5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/fetch.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   _generateLinkResponse: () => (/* binding */ _generateLinkResponse),\n/* harmony export */   _noResolveJsonResponse: () => (/* binding */ _noResolveJsonResponse),\n/* harmony export */   _request: () => (/* binding */ _request),\n/* harmony export */   _sessionResponse: () => (/* binding */ _sessionResponse),\n/* harmony export */   _sessionResponsePassword: () => (/* binding */ _sessionResponsePassword),\n/* harmony export */   _ssoResponse: () => (/* binding */ _ssoResponse),\n/* harmony export */   _userResponse: () => (/* binding */ _userResponse),\n/* harmony export */   handleError: () => (/* binding */ handleError)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/constants.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js\");\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\r\nconst NETWORK_ERROR_CODES = [502, 503, 504];\r\nasync function handleError(error) {\r\n    var _a;\r\n    if (!(0,_helpers__WEBPACK_IMPORTED_MODULE_1__.looksLikeFetchResponse)(error)) {\r\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthRetryableFetchError(_getErrorMessage(error), 0);\r\n    }\r\n    if (NETWORK_ERROR_CODES.includes(error.status)) {\r\n        // status in 500...599 range - server had an error, request might be retryed.\r\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthRetryableFetchError(_getErrorMessage(error), error.status);\r\n    }\r\n    let data;\r\n    try {\r\n        data = await error.json();\r\n    }\r\n    catch (e) {\r\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthUnknownError(_getErrorMessage(e), e);\r\n    }\r\n    let errorCode = undefined;\r\n    const responseAPIVersion = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.parseResponseAPIVersion)(error);\r\n    if (responseAPIVersion &&\r\n        responseAPIVersion.getTime() >= _constants__WEBPACK_IMPORTED_MODULE_0__.API_VERSIONS['2024-01-01'].timestamp &&\r\n        typeof data === 'object' &&\r\n        data &&\r\n        typeof data.code === 'string') {\r\n        errorCode = data.code;\r\n    }\r\n    else if (typeof data === 'object' && data && typeof data.error_code === 'string') {\r\n        errorCode = data.error_code;\r\n    }\r\n    if (!errorCode) {\r\n        // Legacy support for weak password errors, when there were no error codes\r\n        if (typeof data === 'object' &&\r\n            data &&\r\n            typeof data.weak_password === 'object' &&\r\n            data.weak_password &&\r\n            Array.isArray(data.weak_password.reasons) &&\r\n            data.weak_password.reasons.length &&\r\n            data.weak_password.reasons.reduce((a, i) => a && typeof i === 'string', true)) {\r\n            throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthWeakPasswordError(_getErrorMessage(data), error.status, data.weak_password.reasons);\r\n        }\r\n    }\r\n    else if (errorCode === 'weak_password') {\r\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthWeakPasswordError(_getErrorMessage(data), error.status, ((_a = data.weak_password) === null || _a === void 0 ? void 0 : _a.reasons) || []);\r\n    }\r\n    else if (errorCode === 'session_not_found') {\r\n        // The `session_id` inside the JWT does not correspond to a row in the\r\n        // `sessions` table. This usually means the user has signed out, has been\r\n        // deleted, or their session has somehow been terminated.\r\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthSessionMissingError();\r\n    }\r\n    throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthApiError(_getErrorMessage(data), error.status || 500, errorCode);\r\n}\r\nconst _getRequestParams = (method, options, parameters, body) => {\r\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\r\n    if (method === 'GET') {\r\n        return params;\r\n    }\r\n    params.headers = Object.assign({ 'Content-Type': 'application/json;charset=UTF-8' }, options === null || options === void 0 ? void 0 : options.headers);\r\n    params.body = JSON.stringify(body);\r\n    return Object.assign(Object.assign({}, params), parameters);\r\n};\r\nasync function _request(fetcher, method, url, options) {\r\n    var _a;\r\n    const headers = Object.assign({}, options === null || options === void 0 ? void 0 : options.headers);\r\n    if (!headers[_constants__WEBPACK_IMPORTED_MODULE_0__.API_VERSION_HEADER_NAME]) {\r\n        headers[_constants__WEBPACK_IMPORTED_MODULE_0__.API_VERSION_HEADER_NAME] = _constants__WEBPACK_IMPORTED_MODULE_0__.API_VERSIONS['2024-01-01'].name;\r\n    }\r\n    if (options === null || options === void 0 ? void 0 : options.jwt) {\r\n        headers['Authorization'] = `Bearer ${options.jwt}`;\r\n    }\r\n    const qs = (_a = options === null || options === void 0 ? void 0 : options.query) !== null && _a !== void 0 ? _a : {};\r\n    if (options === null || options === void 0 ? void 0 : options.redirectTo) {\r\n        qs['redirect_to'] = options.redirectTo;\r\n    }\r\n    const queryString = Object.keys(qs).length ? '?' + new URLSearchParams(qs).toString() : '';\r\n    const data = await _handleRequest(fetcher, method, url + queryString, {\r\n        headers,\r\n        noResolveJson: options === null || options === void 0 ? void 0 : options.noResolveJson,\r\n    }, {}, options === null || options === void 0 ? void 0 : options.body);\r\n    return (options === null || options === void 0 ? void 0 : options.xform) ? options === null || options === void 0 ? void 0 : options.xform(data) : { data: Object.assign({}, data), error: null };\r\n}\r\nasync function _handleRequest(fetcher, method, url, options, parameters, body) {\r\n    const requestParams = _getRequestParams(method, options, parameters, body);\r\n    let result;\r\n    try {\r\n        result = await fetcher(url, Object.assign({}, requestParams));\r\n    }\r\n    catch (e) {\r\n        console.error(e);\r\n        // fetch failed, likely due to a network or CORS error\r\n        throw new _errors__WEBPACK_IMPORTED_MODULE_2__.AuthRetryableFetchError(_getErrorMessage(e), 0);\r\n    }\r\n    if (!result.ok) {\r\n        await handleError(result);\r\n    }\r\n    if (options === null || options === void 0 ? void 0 : options.noResolveJson) {\r\n        return result;\r\n    }\r\n    try {\r\n        return await result.json();\r\n    }\r\n    catch (e) {\r\n        await handleError(e);\r\n    }\r\n}\r\nfunction _sessionResponse(data) {\r\n    var _a;\r\n    let session = null;\r\n    if (hasSession(data)) {\r\n        session = Object.assign({}, data);\r\n        if (!data.expires_at) {\r\n            session.expires_at = (0,_helpers__WEBPACK_IMPORTED_MODULE_1__.expiresAt)(data.expires_in);\r\n        }\r\n    }\r\n    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\r\n    return { data: { session, user }, error: null };\r\n}\r\nfunction _sessionResponsePassword(data) {\r\n    const response = _sessionResponse(data);\r\n    if (!response.error &&\r\n        data.weak_password &&\r\n        typeof data.weak_password === 'object' &&\r\n        Array.isArray(data.weak_password.reasons) &&\r\n        data.weak_password.reasons.length &&\r\n        data.weak_password.message &&\r\n        typeof data.weak_password.message === 'string' &&\r\n        data.weak_password.reasons.reduce((a, i) => a && typeof i === 'string', true)) {\r\n        response.data.weak_password = data.weak_password;\r\n    }\r\n    return response;\r\n}\r\nfunction _userResponse(data) {\r\n    var _a;\r\n    const user = (_a = data.user) !== null && _a !== void 0 ? _a : data;\r\n    return { data: { user }, error: null };\r\n}\r\nfunction _ssoResponse(data) {\r\n    return { data, error: null };\r\n}\r\nfunction _generateLinkResponse(data) {\r\n    const { action_link, email_otp, hashed_token, redirect_to, verification_type } = data, rest = __rest(data, [\"action_link\", \"email_otp\", \"hashed_token\", \"redirect_to\", \"verification_type\"]);\r\n    const properties = {\r\n        action_link,\r\n        email_otp,\r\n        hashed_token,\r\n        redirect_to,\r\n        verification_type,\r\n    };\r\n    const user = Object.assign({}, rest);\r\n    return {\r\n        data: {\r\n            properties,\r\n            user,\r\n        },\r\n        error: null,\r\n    };\r\n}\r\nfunction _noResolveJsonResponse(data) {\r\n    return data;\r\n}\r\n/**\r\n * hasSession checks if the response object contains a valid session\r\n * @param data A response object\r\n * @returns true if a session is in the response\r\n */\r\nfunction hasSession(data) {\r\n    return data.access_token && data.refresh_token && data.expires_in;\r\n}\r\n//# sourceMappingURL=fetch.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/helpers.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Deferred: () => (/* binding */ Deferred),\n/* harmony export */   decodeJWT: () => (/* binding */ decodeJWT),\n/* harmony export */   deepClone: () => (/* binding */ deepClone),\n/* harmony export */   expiresAt: () => (/* binding */ expiresAt),\n/* harmony export */   generatePKCEChallenge: () => (/* binding */ generatePKCEChallenge),\n/* harmony export */   generatePKCEVerifier: () => (/* binding */ generatePKCEVerifier),\n/* harmony export */   getAlgorithm: () => (/* binding */ getAlgorithm),\n/* harmony export */   getCodeChallengeAndMethod: () => (/* binding */ getCodeChallengeAndMethod),\n/* harmony export */   getItemAsync: () => (/* binding */ getItemAsync),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   looksLikeFetchResponse: () => (/* binding */ looksLikeFetchResponse),\n/* harmony export */   parseParametersFromURL: () => (/* binding */ parseParametersFromURL),\n/* harmony export */   parseResponseAPIVersion: () => (/* binding */ parseResponseAPIVersion),\n/* harmony export */   removeItemAsync: () => (/* binding */ removeItemAsync),\n/* harmony export */   resolveFetch: () => (/* binding */ resolveFetch),\n/* harmony export */   retryable: () => (/* binding */ retryable),\n/* harmony export */   setItemAsync: () => (/* binding */ setItemAsync),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   supportsLocalStorage: () => (/* binding */ supportsLocalStorage),\n/* harmony export */   userNotAvailableProxy: () => (/* binding */ userNotAvailableProxy),\n/* harmony export */   uuid: () => (/* binding */ uuid),\n/* harmony export */   validateExp: () => (/* binding */ validateExp),\n/* harmony export */   validateUUID: () => (/* binding */ validateUUID)\n/* harmony export */ });\n/* harmony import */ var _constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/constants.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js\");\n/* harmony import */ var _base64url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64url */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/base64url.js\");\n\r\n\r\n\r\nfunction expiresAt(expiresIn) {\r\n    const timeNow = Math.round(Date.now() / 1000);\r\n    return timeNow + expiresIn;\r\n}\r\nfunction uuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        const r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\r\nconst isBrowser = () => typeof window !== 'undefined' && typeof document !== 'undefined';\r\nconst localStorageWriteTests = {\r\n    tested: false,\r\n    writable: false,\r\n};\r\n/**\r\n * Checks whether localStorage is supported on this browser.\r\n */\r\nconst supportsLocalStorage = () => {\r\n    if (!isBrowser()) {\r\n        return false;\r\n    }\r\n    try {\r\n        if (typeof globalThis.localStorage !== 'object') {\r\n            return false;\r\n        }\r\n    }\r\n    catch (e) {\r\n        // DOM exception when accessing `localStorage`\r\n        return false;\r\n    }\r\n    if (localStorageWriteTests.tested) {\r\n        return localStorageWriteTests.writable;\r\n    }\r\n    const randomKey = `lswt-${Math.random()}${Math.random()}`;\r\n    try {\r\n        globalThis.localStorage.setItem(randomKey, randomKey);\r\n        globalThis.localStorage.removeItem(randomKey);\r\n        localStorageWriteTests.tested = true;\r\n        localStorageWriteTests.writable = true;\r\n    }\r\n    catch (e) {\r\n        // localStorage can't be written to\r\n        // https://www.chromium.org/for-testers/bug-reporting-guidelines/uncaught-securityerror-failed-to-read-the-localstorage-property-from-window-access-is-denied-for-this-document\r\n        localStorageWriteTests.tested = true;\r\n        localStorageWriteTests.writable = false;\r\n    }\r\n    return localStorageWriteTests.writable;\r\n};\r\n/**\r\n * Extracts parameters encoded in the URL both in the query and fragment.\r\n */\r\nfunction parseParametersFromURL(href) {\r\n    const result = {};\r\n    const url = new URL(href);\r\n    if (url.hash && url.hash[0] === '#') {\r\n        try {\r\n            const hashSearchParams = new URLSearchParams(url.hash.substring(1));\r\n            hashSearchParams.forEach((value, key) => {\r\n                result[key] = value;\r\n            });\r\n        }\r\n        catch (e) {\r\n            // hash is not a query string\r\n        }\r\n    }\r\n    // search parameters take precedence over hash parameters\r\n    url.searchParams.forEach((value, key) => {\r\n        result[key] = value;\r\n    });\r\n    return result;\r\n}\r\nconst resolveFetch = (customFetch) => {\r\n    let _fetch;\r\n    if (customFetch) {\r\n        _fetch = customFetch;\r\n    }\r\n    else if (typeof fetch === 'undefined') {\r\n        _fetch = (...args) => Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @supabase/node-fetch */ \"(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\", 23)).then(({ default: fetch }) => fetch(...args));\r\n    }\r\n    else {\r\n        _fetch = fetch;\r\n    }\r\n    return (...args) => _fetch(...args);\r\n};\r\nconst looksLikeFetchResponse = (maybeResponse) => {\r\n    return (typeof maybeResponse === 'object' &&\r\n        maybeResponse !== null &&\r\n        'status' in maybeResponse &&\r\n        'ok' in maybeResponse &&\r\n        'json' in maybeResponse &&\r\n        typeof maybeResponse.json === 'function');\r\n};\r\n// Storage helpers\r\nconst setItemAsync = async (storage, key, data) => {\r\n    await storage.setItem(key, JSON.stringify(data));\r\n};\r\nconst getItemAsync = async (storage, key) => {\r\n    const value = await storage.getItem(key);\r\n    if (!value) {\r\n        return null;\r\n    }\r\n    try {\r\n        return JSON.parse(value);\r\n    }\r\n    catch (_a) {\r\n        return value;\r\n    }\r\n};\r\nconst removeItemAsync = async (storage, key) => {\r\n    await storage.removeItem(key);\r\n};\r\n/**\r\n * A deferred represents some asynchronous work that is not yet finished, which\r\n * may or may not culminate in a value.\r\n * Taken from: https://github.com/mike-north/types/blob/master/src/async.ts\r\n */\r\nclass Deferred {\r\n    constructor() {\r\n        // eslint-disable-next-line @typescript-eslint/no-extra-semi\r\n        ;\r\n        this.promise = new Deferred.promiseConstructor((res, rej) => {\r\n            // eslint-disable-next-line @typescript-eslint/no-extra-semi\r\n            ;\r\n            this.resolve = res;\r\n            this.reject = rej;\r\n        });\r\n    }\r\n}\r\nDeferred.promiseConstructor = Promise;\r\nfunction decodeJWT(token) {\r\n    const parts = token.split('.');\r\n    if (parts.length !== 3) {\r\n        throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthInvalidJwtError('Invalid JWT structure');\r\n    }\r\n    // Regex checks for base64url format\r\n    for (let i = 0; i < parts.length; i++) {\r\n        if (!_constants__WEBPACK_IMPORTED_MODULE_0__.BASE64URL_REGEX.test(parts[i])) {\r\n            throw new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthInvalidJwtError('JWT not in base64url format');\r\n        }\r\n    }\r\n    const data = {\r\n        // using base64url lib\r\n        header: JSON.parse((0,_base64url__WEBPACK_IMPORTED_MODULE_2__.stringFromBase64URL)(parts[0])),\r\n        payload: JSON.parse((0,_base64url__WEBPACK_IMPORTED_MODULE_2__.stringFromBase64URL)(parts[1])),\r\n        signature: (0,_base64url__WEBPACK_IMPORTED_MODULE_2__.base64UrlToUint8Array)(parts[2]),\r\n        raw: {\r\n            header: parts[0],\r\n            payload: parts[1],\r\n        },\r\n    };\r\n    return data;\r\n}\r\n/**\r\n * Creates a promise that resolves to null after some time.\r\n */\r\nasync function sleep(time) {\r\n    return await new Promise((accept) => {\r\n        setTimeout(() => accept(null), time);\r\n    });\r\n}\r\n/**\r\n * Converts the provided async function into a retryable function. Each result\r\n * or thrown error is sent to the isRetryable function which should return true\r\n * if the function should run again.\r\n */\r\nfunction retryable(fn, isRetryable) {\r\n    const promise = new Promise((accept, reject) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-extra-semi\r\n        ;\r\n        (async () => {\r\n            for (let attempt = 0; attempt < Infinity; attempt++) {\r\n                try {\r\n                    const result = await fn(attempt);\r\n                    if (!isRetryable(attempt, null, result)) {\r\n                        accept(result);\r\n                        return;\r\n                    }\r\n                }\r\n                catch (e) {\r\n                    if (!isRetryable(attempt, e)) {\r\n                        reject(e);\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n        })();\r\n    });\r\n    return promise;\r\n}\r\nfunction dec2hex(dec) {\r\n    return ('0' + dec.toString(16)).substr(-2);\r\n}\r\n// Functions below taken from: https://stackoverflow.com/questions/63309409/creating-a-code-verifier-and-challenge-for-pkce-auth-on-spotify-api-in-reactjs\r\nfunction generatePKCEVerifier() {\r\n    const verifierLength = 56;\r\n    const array = new Uint32Array(verifierLength);\r\n    if (typeof crypto === 'undefined') {\r\n        const charSet = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-._~';\r\n        const charSetLen = charSet.length;\r\n        let verifier = '';\r\n        for (let i = 0; i < verifierLength; i++) {\r\n            verifier += charSet.charAt(Math.floor(Math.random() * charSetLen));\r\n        }\r\n        return verifier;\r\n    }\r\n    crypto.getRandomValues(array);\r\n    return Array.from(array, dec2hex).join('');\r\n}\r\nasync function sha256(randomString) {\r\n    const encoder = new TextEncoder();\r\n    const encodedData = encoder.encode(randomString);\r\n    const hash = await crypto.subtle.digest('SHA-256', encodedData);\r\n    const bytes = new Uint8Array(hash);\r\n    return Array.from(bytes)\r\n        .map((c) => String.fromCharCode(c))\r\n        .join('');\r\n}\r\nasync function generatePKCEChallenge(verifier) {\r\n    const hasCryptoSupport = typeof crypto !== 'undefined' &&\r\n        typeof crypto.subtle !== 'undefined' &&\r\n        typeof TextEncoder !== 'undefined';\r\n    if (!hasCryptoSupport) {\r\n        console.warn('WebCrypto API is not supported. Code challenge method will default to use plain instead of sha256.');\r\n        return verifier;\r\n    }\r\n    const hashed = await sha256(verifier);\r\n    return btoa(hashed).replace(/\\+/g, '-').replace(/\\//g, '_').replace(/=+$/, '');\r\n}\r\nasync function getCodeChallengeAndMethod(storage, storageKey, isPasswordRecovery = false) {\r\n    const codeVerifier = generatePKCEVerifier();\r\n    let storedCodeVerifier = codeVerifier;\r\n    if (isPasswordRecovery) {\r\n        storedCodeVerifier += '/PASSWORD_RECOVERY';\r\n    }\r\n    await setItemAsync(storage, `${storageKey}-code-verifier`, storedCodeVerifier);\r\n    const codeChallenge = await generatePKCEChallenge(codeVerifier);\r\n    const codeChallengeMethod = codeVerifier === codeChallenge ? 'plain' : 's256';\r\n    return [codeChallenge, codeChallengeMethod];\r\n}\r\n/** Parses the API version which is 2YYY-MM-DD. */\r\nconst API_VERSION_REGEX = /^2[0-9]{3}-(0[1-9]|1[0-2])-(0[1-9]|1[0-9]|2[0-9]|3[0-1])$/i;\r\nfunction parseResponseAPIVersion(response) {\r\n    const apiVersion = response.headers.get(_constants__WEBPACK_IMPORTED_MODULE_0__.API_VERSION_HEADER_NAME);\r\n    if (!apiVersion) {\r\n        return null;\r\n    }\r\n    if (!apiVersion.match(API_VERSION_REGEX)) {\r\n        return null;\r\n    }\r\n    try {\r\n        const date = new Date(`${apiVersion}T00:00:00.0Z`);\r\n        return date;\r\n    }\r\n    catch (e) {\r\n        return null;\r\n    }\r\n}\r\nfunction validateExp(exp) {\r\n    if (!exp) {\r\n        throw new Error('Missing exp claim');\r\n    }\r\n    const timeNow = Math.floor(Date.now() / 1000);\r\n    if (exp <= timeNow) {\r\n        throw new Error('JWT has expired');\r\n    }\r\n}\r\nfunction getAlgorithm(alg) {\r\n    switch (alg) {\r\n        case 'RS256':\r\n            return {\r\n                name: 'RSASSA-PKCS1-v1_5',\r\n                hash: { name: 'SHA-256' },\r\n            };\r\n        case 'ES256':\r\n            return {\r\n                name: 'ECDSA',\r\n                namedCurve: 'P-256',\r\n                hash: { name: 'SHA-256' },\r\n            };\r\n        default:\r\n            throw new Error('Invalid alg claim');\r\n    }\r\n}\r\nconst UUID_REGEX = /^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/;\r\nfunction validateUUID(str) {\r\n    if (!UUID_REGEX.test(str)) {\r\n        throw new Error('@supabase/auth-js: Expected parameter to be UUID but is not');\r\n    }\r\n}\r\nfunction userNotAvailableProxy() {\r\n    const proxyTarget = {};\r\n    return new Proxy(proxyTarget, {\r\n        get: (target, prop) => {\r\n            if (prop === '__isUserNotAvailableProxy') {\r\n                return true;\r\n            }\r\n            // Preventative check for common problematic symbols during cloning/inspection\r\n            // These symbols might be accessed by structuredClone or other internal mechanisms.\r\n            if (typeof prop === 'symbol') {\r\n                const sProp = prop.toString();\r\n                if (sProp === 'Symbol(Symbol.toPrimitive)' ||\r\n                    sProp === 'Symbol(Symbol.toStringTag)' ||\r\n                    sProp === 'Symbol(util.inspect.custom)') {\r\n                    // Node.js util.inspect\r\n                    return undefined;\r\n                }\r\n            }\r\n            throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Accessing the \"${prop}\" property of the session object is not supported. Please use getUser() instead.`);\r\n        },\r\n        set: (_target, prop) => {\r\n            throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Setting the \"${prop}\" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);\r\n        },\r\n        deleteProperty: (_target, prop) => {\r\n            throw new Error(`@supabase/auth-js: client was created with userStorage option and there was no user stored in the user storage. Deleting the \"${prop}\" property of the session object is not supported. Please use getUser() to fetch a user object you can manipulate.`);\r\n        },\r\n    });\r\n}\r\n/**\r\n * Deep clones a JSON-serializable object using JSON.parse(JSON.stringify(obj)).\r\n * Note: Only works for JSON-safe data.\r\n */\r\nfunction deepClone(obj) {\r\n    return JSON.parse(JSON.stringify(obj));\r\n}\r\n//# sourceMappingURL=helpers.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/local-storage.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/local-storage.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   memoryLocalStorageAdapter: () => (/* binding */ memoryLocalStorageAdapter)\n/* harmony export */ });\n/**\r\n * Returns a localStorage-like object that stores the key-value pairs in\r\n * memory.\r\n */\r\nfunction memoryLocalStorageAdapter(store = {}) {\r\n    return {\r\n        getItem: (key) => {\r\n            return store[key] || null;\r\n        },\r\n        setItem: (key, value) => {\r\n            store[key] = value;\r\n        },\r\n        removeItem: (key) => {\r\n            delete store[key];\r\n        },\r\n    };\r\n}\r\n//# sourceMappingURL=local-storage.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL2xvY2FsLXN0b3JhZ2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ08sNkNBQTZDO0FBQ3BEO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi9sb2NhbC1zdG9yYWdlLmpzP2FlZDMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIFJldHVybnMgYSBsb2NhbFN0b3JhZ2UtbGlrZSBvYmplY3QgdGhhdCBzdG9yZXMgdGhlIGtleS12YWx1ZSBwYWlycyBpblxyXG4gKiBtZW1vcnkuXHJcbiAqL1xyXG5leHBvcnQgZnVuY3Rpb24gbWVtb3J5TG9jYWxTdG9yYWdlQWRhcHRlcihzdG9yZSA9IHt9KSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGdldEl0ZW06IChrZXkpID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuIHN0b3JlW2tleV0gfHwgbnVsbDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHNldEl0ZW06IChrZXksIHZhbHVlKSA9PiB7XHJcbiAgICAgICAgICAgIHN0b3JlW2tleV0gPSB2YWx1ZTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHJlbW92ZUl0ZW06IChrZXkpID0+IHtcclxuICAgICAgICAgICAgZGVsZXRlIHN0b3JlW2tleV07XHJcbiAgICAgICAgfSxcclxuICAgIH07XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9jYWwtc3RvcmFnZS5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/local-storage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/locks.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/locks.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LockAcquireTimeoutError: () => (/* binding */ LockAcquireTimeoutError),\n/* harmony export */   NavigatorLockAcquireTimeoutError: () => (/* binding */ NavigatorLockAcquireTimeoutError),\n/* harmony export */   ProcessLockAcquireTimeoutError: () => (/* binding */ ProcessLockAcquireTimeoutError),\n/* harmony export */   internals: () => (/* binding */ internals),\n/* harmony export */   navigatorLock: () => (/* binding */ navigatorLock),\n/* harmony export */   processLock: () => (/* binding */ processLock)\n/* harmony export */ });\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js\");\n\r\n/**\r\n * @experimental\r\n */\r\nconst internals = {\r\n    /**\r\n     * @experimental\r\n     */\r\n    debug: !!(globalThis &&\r\n        (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.supportsLocalStorage)() &&\r\n        globalThis.localStorage &&\r\n        globalThis.localStorage.getItem('supabase.gotrue-js.locks.debug') === 'true'),\r\n};\r\n/**\r\n * An error thrown when a lock cannot be acquired after some amount of time.\r\n *\r\n * Use the {@link #isAcquireTimeout} property instead of checking with `instanceof`.\r\n */\r\nclass LockAcquireTimeoutError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.isAcquireTimeout = true;\r\n    }\r\n}\r\nclass NavigatorLockAcquireTimeoutError extends LockAcquireTimeoutError {\r\n}\r\nclass ProcessLockAcquireTimeoutError extends LockAcquireTimeoutError {\r\n}\r\n/**\r\n * Implements a global exclusive lock using the Navigator LockManager API. It\r\n * is available on all browsers released after 2022-03-15 with Safari being the\r\n * last one to release support. If the API is not available, this function will\r\n * throw. Make sure you check availablility before configuring {@link\r\n * GoTrueClient}.\r\n *\r\n * You can turn on debugging by setting the `supabase.gotrue-js.locks.debug`\r\n * local storage item to `true`.\r\n *\r\n * Internals:\r\n *\r\n * Since the LockManager API does not preserve stack traces for the async\r\n * function passed in the `request` method, a trick is used where acquiring the\r\n * lock releases a previously started promise to run the operation in the `fn`\r\n * function. The lock waits for that promise to finish (with or without error),\r\n * while the function will finally wait for the result anyway.\r\n *\r\n * @param name Name of the lock to be acquired.\r\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\r\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\r\n *                       will time out after so many milliseconds. An error is\r\n *                       a timeout if it has `isAcquireTimeout` set to true.\r\n * @param fn The operation to run once the lock is acquired.\r\n */\r\nasync function navigatorLock(name, acquireTimeout, fn) {\r\n    if (internals.debug) {\r\n        console.log('@supabase/gotrue-js: navigatorLock: acquire lock', name, acquireTimeout);\r\n    }\r\n    const abortController = new globalThis.AbortController();\r\n    if (acquireTimeout > 0) {\r\n        setTimeout(() => {\r\n            abortController.abort();\r\n            if (internals.debug) {\r\n                console.log('@supabase/gotrue-js: navigatorLock acquire timed out', name);\r\n            }\r\n        }, acquireTimeout);\r\n    }\r\n    // MDN article: https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request\r\n    // Wrapping navigator.locks.request() with a plain Promise is done as some\r\n    // libraries like zone.js patch the Promise object to track the execution\r\n    // context. However, it appears that most browsers use an internal promise\r\n    // implementation when using the navigator.locks.request() API causing them\r\n    // to lose context and emit confusing log messages or break certain features.\r\n    // This wrapping is believed to help zone.js track the execution context\r\n    // better.\r\n    return await Promise.resolve().then(() => globalThis.navigator.locks.request(name, acquireTimeout === 0\r\n        ? {\r\n            mode: 'exclusive',\r\n            ifAvailable: true,\r\n        }\r\n        : {\r\n            mode: 'exclusive',\r\n            signal: abortController.signal,\r\n        }, async (lock) => {\r\n        if (lock) {\r\n            if (internals.debug) {\r\n                console.log('@supabase/gotrue-js: navigatorLock: acquired', name, lock.name);\r\n            }\r\n            try {\r\n                return await fn();\r\n            }\r\n            finally {\r\n                if (internals.debug) {\r\n                    console.log('@supabase/gotrue-js: navigatorLock: released', name, lock.name);\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            if (acquireTimeout === 0) {\r\n                if (internals.debug) {\r\n                    console.log('@supabase/gotrue-js: navigatorLock: not immediately available', name);\r\n                }\r\n                throw new NavigatorLockAcquireTimeoutError(`Acquiring an exclusive Navigator LockManager lock \"${name}\" immediately failed`);\r\n            }\r\n            else {\r\n                if (internals.debug) {\r\n                    try {\r\n                        const result = await globalThis.navigator.locks.query();\r\n                        console.log('@supabase/gotrue-js: Navigator LockManager state', JSON.stringify(result, null, '  '));\r\n                    }\r\n                    catch (e) {\r\n                        console.warn('@supabase/gotrue-js: Error when querying Navigator LockManager state', e);\r\n                    }\r\n                }\r\n                // Browser is not following the Navigator LockManager spec, it\r\n                // returned a null lock when we didn't use ifAvailable. So we can\r\n                // pretend the lock is acquired in the name of backward compatibility\r\n                // and user experience and just run the function.\r\n                console.warn('@supabase/gotrue-js: Navigator LockManager returned a null lock when using #request without ifAvailable set to true, it appears this browser is not following the LockManager spec https://developer.mozilla.org/en-US/docs/Web/API/LockManager/request');\r\n                return await fn();\r\n            }\r\n        }\r\n    }));\r\n}\r\nconst PROCESS_LOCKS = {};\r\n/**\r\n * Implements a global exclusive lock that works only in the current process.\r\n * Useful for environments like React Native or other non-browser\r\n * single-process (i.e. no concept of \"tabs\") environments.\r\n *\r\n * Use {@link #navigatorLock} in browser environments.\r\n *\r\n * @param name Name of the lock to be acquired.\r\n * @param acquireTimeout If negative, no timeout. If 0 an error is thrown if\r\n *                       the lock can't be acquired without waiting. If positive, the lock acquire\r\n *                       will time out after so many milliseconds. An error is\r\n *                       a timeout if it has `isAcquireTimeout` set to true.\r\n * @param fn The operation to run once the lock is acquired.\r\n */\r\nasync function processLock(name, acquireTimeout, fn) {\r\n    var _a;\r\n    const previousOperation = (_a = PROCESS_LOCKS[name]) !== null && _a !== void 0 ? _a : Promise.resolve();\r\n    const currentOperation = Promise.race([\r\n        previousOperation.catch(() => {\r\n            // ignore error of previous operation that we're waiting to finish\r\n            return null;\r\n        }),\r\n        acquireTimeout >= 0\r\n            ? new Promise((_, reject) => {\r\n                setTimeout(() => {\r\n                    reject(new ProcessLockAcquireTimeoutError(`Acquring process lock with name \"${name}\" timed out`));\r\n                }, acquireTimeout);\r\n            })\r\n            : null,\r\n    ].filter((x) => x))\r\n        .catch((e) => {\r\n        if (e && e.isAcquireTimeout) {\r\n            throw e;\r\n        }\r\n        return null;\r\n    })\r\n        .then(async () => {\r\n        // previous operations finished and we didn't get a race on the acquire\r\n        // timeout, so the current operation can finally start\r\n        return await fn();\r\n    });\r\n    PROCESS_LOCKS[name] = currentOperation.catch(async (e) => {\r\n        if (e && e.isAcquireTimeout) {\r\n            // if the current operation timed out, it doesn't mean that the previous\r\n            // operation finished, so we need contnue waiting for it to finish\r\n            await previousOperation;\r\n            return null;\r\n        }\r\n        throw e;\r\n    });\r\n    // finally wait for the current operation to finish successfully, with an\r\n    // error or with an acquire timeout error\r\n    return await currentOperation;\r\n}\r\n//# sourceMappingURL=locks.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/locks.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/polyfills.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/polyfills.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   polyfillGlobalThis: () => (/* binding */ polyfillGlobalThis)\n/* harmony export */ });\n/**\r\n * https://mathiasbynens.be/notes/globalthis\r\n */\r\nfunction polyfillGlobalThis() {\r\n    if (typeof globalThis === 'object')\r\n        return;\r\n    try {\r\n        Object.defineProperty(Object.prototype, '__magic__', {\r\n            get: function () {\r\n                return this;\r\n            },\r\n            configurable: true,\r\n        });\r\n        // @ts-expect-error 'Allow access to magic'\r\n        __magic__.globalThis = __magic__;\r\n        // @ts-expect-error 'Allow access to magic'\r\n        delete Object.prototype.__magic__;\r\n    }\r\n    catch (e) {\r\n        if (typeof self !== 'undefined') {\r\n            // @ts-expect-error 'Allow access to globals'\r\n            self.globalThis = self;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=polyfills.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3BvbHlmaWxscy5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3BvbHlmaWxscy5qcz9iZDE0Il0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvZ2xvYmFsdGhpc1xyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIHBvbHlmaWxsR2xvYmFsVGhpcygpIHtcclxuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0LnByb3RvdHlwZSwgJ19fbWFnaWNfXycsIHtcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgJ0FsbG93IGFjY2VzcyB0byBtYWdpYydcclxuICAgICAgICBfX21hZ2ljX18uZ2xvYmFsVGhpcyA9IF9fbWFnaWNfXztcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yICdBbGxvdyBhY2Nlc3MgdG8gbWFnaWMnXHJcbiAgICAgICAgZGVsZXRlIE9iamVjdC5wcm90b3R5cGUuX19tYWdpY19fO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGUpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgJ0FsbG93IGFjY2VzcyB0byBnbG9iYWxzJ1xyXG4gICAgICAgICAgICBzZWxmLmdsb2JhbFRoaXMgPSBzZWxmO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb2x5ZmlsbHMuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/polyfills.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/types.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/types.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SIGN_OUT_SCOPES: () => (/* binding */ SIGN_OUT_SCOPES)\n/* harmony export */ });\nconst WeakPasswordReasons = ['length', 'characters', 'pwned'];\r\nconst AMRMethods = [\r\n    'password',\r\n    'otp',\r\n    'oauth',\r\n    'totp',\r\n    'mfa/totp',\r\n    'mfa/phone',\r\n    'mfa/webauthn',\r\n    'anonymous',\r\n    'sso/saml',\r\n    'magiclink',\r\n    'web3',\r\n];\r\nconst FactorTypes = ['totp', 'phone', 'webauthn'];\r\nconst FactorVerificationStatuses = ['verified', 'unverified'];\r\nconst MFATOTPChannels = ['sms', 'whatsapp'];\r\nconst SIGN_OUT_SCOPES = ['global', 'local', 'others'];\r\n//# sourceMappingURL=types.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3R5cGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUCIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvYXV0aC1qcy9kaXN0L21vZHVsZS9saWIvdHlwZXMuanM/MjQ5MiJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBXZWFrUGFzc3dvcmRSZWFzb25zID0gWydsZW5ndGgnLCAnY2hhcmFjdGVycycsICdwd25lZCddO1xyXG5jb25zdCBBTVJNZXRob2RzID0gW1xyXG4gICAgJ3Bhc3N3b3JkJyxcclxuICAgICdvdHAnLFxyXG4gICAgJ29hdXRoJyxcclxuICAgICd0b3RwJyxcclxuICAgICdtZmEvdG90cCcsXHJcbiAgICAnbWZhL3Bob25lJyxcclxuICAgICdtZmEvd2ViYXV0aG4nLFxyXG4gICAgJ2Fub255bW91cycsXHJcbiAgICAnc3NvL3NhbWwnLFxyXG4gICAgJ21hZ2ljbGluaycsXHJcbiAgICAnd2ViMycsXHJcbl07XHJcbmNvbnN0IEZhY3RvclR5cGVzID0gWyd0b3RwJywgJ3Bob25lJywgJ3dlYmF1dGhuJ107XHJcbmNvbnN0IEZhY3RvclZlcmlmaWNhdGlvblN0YXR1c2VzID0gWyd2ZXJpZmllZCcsICd1bnZlcmlmaWVkJ107XHJcbmNvbnN0IE1GQVRPVFBDaGFubmVscyA9IFsnc21zJywgJ3doYXRzYXBwJ107XHJcbmV4cG9ydCBjb25zdCBTSUdOX09VVF9TQ09QRVMgPSBbJ2dsb2JhbCcsICdsb2NhbCcsICdvdGhlcnMnXTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/version.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/version.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n// Generated automatically during releases by scripts/update-version-files.ts\r\n// This file provides runtime access to the package version for:\r\n// - HTTP request headers (e.g., X-Client-Info header for API requests)\r\n// - Debugging and support (identifying which version is running)\r\n// - Telemetry and logging (version reporting in errors/analytics)\r\n// - Ensuring build artifacts match the published package version\r\nconst version = '2.75.0';\r\n//# sourceMappingURL=version.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3ZlcnNpb24uanM/NjQ0NSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYXV0b21hdGljYWxseSBkdXJpbmcgcmVsZWFzZXMgYnkgc2NyaXB0cy91cGRhdGUtdmVyc2lvbi1maWxlcy50c1xyXG4vLyBUaGlzIGZpbGUgcHJvdmlkZXMgcnVudGltZSBhY2Nlc3MgdG8gdGhlIHBhY2thZ2UgdmVyc2lvbiBmb3I6XHJcbi8vIC0gSFRUUCByZXF1ZXN0IGhlYWRlcnMgKGUuZy4sIFgtQ2xpZW50LUluZm8gaGVhZGVyIGZvciBBUEkgcmVxdWVzdHMpXHJcbi8vIC0gRGVidWdnaW5nIGFuZCBzdXBwb3J0IChpZGVudGlmeWluZyB3aGljaCB2ZXJzaW9uIGlzIHJ1bm5pbmcpXHJcbi8vIC0gVGVsZW1ldHJ5IGFuZCBsb2dnaW5nICh2ZXJzaW9uIHJlcG9ydGluZyBpbiBlcnJvcnMvYW5hbHl0aWNzKVxyXG4vLyAtIEVuc3VyaW5nIGJ1aWxkIGFydGlmYWN0cyBtYXRjaCB0aGUgcHVibGlzaGVkIHBhY2thZ2UgdmVyc2lvblxyXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICcyLjc1LjAnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/web3/ethereum.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/web3/ethereum.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createSiweMessage: () => (/* binding */ createSiweMessage),\n/* harmony export */   fromHex: () => (/* binding */ fromHex),\n/* harmony export */   getAddress: () => (/* binding */ getAddress),\n/* harmony export */   toHex: () => (/* binding */ toHex)\n/* harmony export */ });\n// types and functions copied over from viem so this library doesn't depend on it\r\nfunction getAddress(address) {\r\n    if (!/^0x[a-fA-F0-9]{40}$/.test(address)) {\r\n        throw new Error(`@supabase/auth-js: Address \"${address}\" is invalid.`);\r\n    }\r\n    return address.toLowerCase();\r\n}\r\nfunction fromHex(hex) {\r\n    return parseInt(hex, 16);\r\n}\r\nfunction toHex(value) {\r\n    const bytes = new TextEncoder().encode(value);\r\n    const hex = Array.from(bytes, (byte) => byte.toString(16).padStart(2, '0')).join('');\r\n    return ('0x' + hex);\r\n}\r\n/**\r\n * Creates EIP-4361 formatted message.\r\n */\r\nfunction createSiweMessage(parameters) {\r\n    var _a;\r\n    const { chainId, domain, expirationTime, issuedAt = new Date(), nonce, notBefore, requestId, resources, scheme, uri, version, } = parameters;\r\n    // Validate fields\r\n    {\r\n        if (!Number.isInteger(chainId))\r\n            throw new Error(`@supabase/auth-js: Invalid SIWE message field \"chainId\". Chain ID must be a EIP-155 chain ID. Provided value: ${chainId}`);\r\n        if (!domain)\r\n            throw new Error(`@supabase/auth-js: Invalid SIWE message field \"domain\". Domain must be provided.`);\r\n        if (nonce && nonce.length < 8)\r\n            throw new Error(`@supabase/auth-js: Invalid SIWE message field \"nonce\". Nonce must be at least 8 characters. Provided value: ${nonce}`);\r\n        if (!uri)\r\n            throw new Error(`@supabase/auth-js: Invalid SIWE message field \"uri\". URI must be provided.`);\r\n        if (version !== '1')\r\n            throw new Error(`@supabase/auth-js: Invalid SIWE message field \"version\". Version must be '1'. Provided value: ${version}`);\r\n        if ((_a = parameters.statement) === null || _a === void 0 ? void 0 : _a.includes('\\n'))\r\n            throw new Error(`@supabase/auth-js: Invalid SIWE message field \"statement\". Statement must not include '\\\\n'. Provided value: ${parameters.statement}`);\r\n    }\r\n    // Construct message\r\n    const address = getAddress(parameters.address);\r\n    const origin = scheme ? `${scheme}://${domain}` : domain;\r\n    const statement = parameters.statement ? `${parameters.statement}\\n` : '';\r\n    const prefix = `${origin} wants you to sign in with your Ethereum account:\\n${address}\\n\\n${statement}`;\r\n    let suffix = `URI: ${uri}\\nVersion: ${version}\\nChain ID: ${chainId}${nonce ? `\\nNonce: ${nonce}` : ''}\\nIssued At: ${issuedAt.toISOString()}`;\r\n    if (expirationTime)\r\n        suffix += `\\nExpiration Time: ${expirationTime.toISOString()}`;\r\n    if (notBefore)\r\n        suffix += `\\nNot Before: ${notBefore.toISOString()}`;\r\n    if (requestId)\r\n        suffix += `\\nRequest ID: ${requestId}`;\r\n    if (resources) {\r\n        let content = '\\nResources:';\r\n        for (const resource of resources) {\r\n            if (!resource || typeof resource !== 'string')\r\n                throw new Error(`@supabase/auth-js: Invalid SIWE message field \"resources\". Every resource must be a valid string. Provided value: ${resource}`);\r\n            content += `\\n- ${resource}`;\r\n        }\r\n        suffix += content;\r\n    }\r\n    return `${prefix}\\n${suffix}`;\r\n}\r\n//# sourceMappingURL=ethereum.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2F1dGgtanMvZGlzdC9tb2R1bGUvbGliL3dlYjMvZXRoZXJldW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0FBQ087QUFDUCx5QkFBeUIsR0FBRztBQUM1Qix1REFBdUQsUUFBUTtBQUMvRDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBLFlBQVksd0hBQXdIO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBLDZJQUE2SSxRQUFRO0FBQ3JKO0FBQ0E7QUFDQTtBQUNBLDJJQUEySSxNQUFNO0FBQ2pKO0FBQ0E7QUFDQTtBQUNBLDZIQUE2SCxRQUFRO0FBQ3JJO0FBQ0EsNElBQTRJLHFCQUFxQjtBQUNqSztBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsT0FBTyxLQUFLLE9BQU87QUFDbEQsZ0RBQWdELHFCQUFxQjtBQUNyRSxzQkFBc0IsUUFBUSxvREFBb0QsUUFBUSxNQUFNLFVBQVU7QUFDMUcseUJBQXlCLElBQUksYUFBYSxRQUFRLGNBQWMsUUFBUSxFQUFFLG9CQUFvQixNQUFNLE9BQU8sZUFBZSx1QkFBdUI7QUFDako7QUFDQSx3Q0FBd0MsNkJBQTZCO0FBQ3JFO0FBQ0EsbUNBQW1DLHdCQUF3QjtBQUMzRDtBQUNBLG1DQUFtQyxVQUFVO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUpBQXFKLFNBQVM7QUFDOUosOEJBQThCLFNBQVM7QUFDdkM7QUFDQTtBQUNBO0FBQ0EsY0FBYyxPQUFPLElBQUksT0FBTztBQUNoQztBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9hdXRoLWpzL2Rpc3QvbW9kdWxlL2xpYi93ZWIzL2V0aGVyZXVtLmpzPzBiYzMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gdHlwZXMgYW5kIGZ1bmN0aW9ucyBjb3BpZWQgb3ZlciBmcm9tIHZpZW0gc28gdGhpcyBsaWJyYXJ5IGRvZXNuJ3QgZGVwZW5kIG9uIGl0XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRBZGRyZXNzKGFkZHJlc3MpIHtcclxuICAgIGlmICghL14weFthLWZBLUYwLTldezQwfSQvLnRlc3QoYWRkcmVzcykpIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzdXBhYmFzZS9hdXRoLWpzOiBBZGRyZXNzIFwiJHthZGRyZXNzfVwiIGlzIGludmFsaWQuYCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYWRkcmVzcy50b0xvd2VyQ2FzZSgpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBmcm9tSGV4KGhleCkge1xyXG4gICAgcmV0dXJuIHBhcnNlSW50KGhleCwgMTYpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiB0b0hleCh2YWx1ZSkge1xyXG4gICAgY29uc3QgYnl0ZXMgPSBuZXcgVGV4dEVuY29kZXIoKS5lbmNvZGUodmFsdWUpO1xyXG4gICAgY29uc3QgaGV4ID0gQXJyYXkuZnJvbShieXRlcywgKGJ5dGUpID0+IGJ5dGUudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDIsICcwJykpLmpvaW4oJycpO1xyXG4gICAgcmV0dXJuICgnMHgnICsgaGV4KTtcclxufVxyXG4vKipcclxuICogQ3JlYXRlcyBFSVAtNDM2MSBmb3JtYXR0ZWQgbWVzc2FnZS5cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTaXdlTWVzc2FnZShwYXJhbWV0ZXJzKSB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICBjb25zdCB7IGNoYWluSWQsIGRvbWFpbiwgZXhwaXJhdGlvblRpbWUsIGlzc3VlZEF0ID0gbmV3IERhdGUoKSwgbm9uY2UsIG5vdEJlZm9yZSwgcmVxdWVzdElkLCByZXNvdXJjZXMsIHNjaGVtZSwgdXJpLCB2ZXJzaW9uLCB9ID0gcGFyYW1ldGVycztcclxuICAgIC8vIFZhbGlkYXRlIGZpZWxkc1xyXG4gICAge1xyXG4gICAgICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihjaGFpbklkKSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAc3VwYWJhc2UvYXV0aC1qczogSW52YWxpZCBTSVdFIG1lc3NhZ2UgZmllbGQgXCJjaGFpbklkXCIuIENoYWluIElEIG11c3QgYmUgYSBFSVAtMTU1IGNoYWluIElELiBQcm92aWRlZCB2YWx1ZTogJHtjaGFpbklkfWApO1xyXG4gICAgICAgIGlmICghZG9tYWluKVxyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEBzdXBhYmFzZS9hdXRoLWpzOiBJbnZhbGlkIFNJV0UgbWVzc2FnZSBmaWVsZCBcImRvbWFpblwiLiBEb21haW4gbXVzdCBiZSBwcm92aWRlZC5gKTtcclxuICAgICAgICBpZiAobm9uY2UgJiYgbm9uY2UubGVuZ3RoIDwgOClcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAc3VwYWJhc2UvYXV0aC1qczogSW52YWxpZCBTSVdFIG1lc3NhZ2UgZmllbGQgXCJub25jZVwiLiBOb25jZSBtdXN0IGJlIGF0IGxlYXN0IDggY2hhcmFjdGVycy4gUHJvdmlkZWQgdmFsdWU6ICR7bm9uY2V9YCk7XHJcbiAgICAgICAgaWYgKCF1cmkpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHN1cGFiYXNlL2F1dGgtanM6IEludmFsaWQgU0lXRSBtZXNzYWdlIGZpZWxkIFwidXJpXCIuIFVSSSBtdXN0IGJlIHByb3ZpZGVkLmApO1xyXG4gICAgICAgIGlmICh2ZXJzaW9uICE9PSAnMScpXHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHN1cGFiYXNlL2F1dGgtanM6IEludmFsaWQgU0lXRSBtZXNzYWdlIGZpZWxkIFwidmVyc2lvblwiLiBWZXJzaW9uIG11c3QgYmUgJzEnLiBQcm92aWRlZCB2YWx1ZTogJHt2ZXJzaW9ufWApO1xyXG4gICAgICAgIGlmICgoX2EgPSBwYXJhbWV0ZXJzLnN0YXRlbWVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmluY2x1ZGVzKCdcXG4nKSlcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBAc3VwYWJhc2UvYXV0aC1qczogSW52YWxpZCBTSVdFIG1lc3NhZ2UgZmllbGQgXCJzdGF0ZW1lbnRcIi4gU3RhdGVtZW50IG11c3Qgbm90IGluY2x1ZGUgJ1xcXFxuJy4gUHJvdmlkZWQgdmFsdWU6ICR7cGFyYW1ldGVycy5zdGF0ZW1lbnR9YCk7XHJcbiAgICB9XHJcbiAgICAvLyBDb25zdHJ1Y3QgbWVzc2FnZVxyXG4gICAgY29uc3QgYWRkcmVzcyA9IGdldEFkZHJlc3MocGFyYW1ldGVycy5hZGRyZXNzKTtcclxuICAgIGNvbnN0IG9yaWdpbiA9IHNjaGVtZSA/IGAke3NjaGVtZX06Ly8ke2RvbWFpbn1gIDogZG9tYWluO1xyXG4gICAgY29uc3Qgc3RhdGVtZW50ID0gcGFyYW1ldGVycy5zdGF0ZW1lbnQgPyBgJHtwYXJhbWV0ZXJzLnN0YXRlbWVudH1cXG5gIDogJyc7XHJcbiAgICBjb25zdCBwcmVmaXggPSBgJHtvcmlnaW59IHdhbnRzIHlvdSB0byBzaWduIGluIHdpdGggeW91ciBFdGhlcmV1bSBhY2NvdW50OlxcbiR7YWRkcmVzc31cXG5cXG4ke3N0YXRlbWVudH1gO1xyXG4gICAgbGV0IHN1ZmZpeCA9IGBVUkk6ICR7dXJpfVxcblZlcnNpb246ICR7dmVyc2lvbn1cXG5DaGFpbiBJRDogJHtjaGFpbklkfSR7bm9uY2UgPyBgXFxuTm9uY2U6ICR7bm9uY2V9YCA6ICcnfVxcbklzc3VlZCBBdDogJHtpc3N1ZWRBdC50b0lTT1N0cmluZygpfWA7XHJcbiAgICBpZiAoZXhwaXJhdGlvblRpbWUpXHJcbiAgICAgICAgc3VmZml4ICs9IGBcXG5FeHBpcmF0aW9uIFRpbWU6ICR7ZXhwaXJhdGlvblRpbWUudG9JU09TdHJpbmcoKX1gO1xyXG4gICAgaWYgKG5vdEJlZm9yZSlcclxuICAgICAgICBzdWZmaXggKz0gYFxcbk5vdCBCZWZvcmU6ICR7bm90QmVmb3JlLnRvSVNPU3RyaW5nKCl9YDtcclxuICAgIGlmIChyZXF1ZXN0SWQpXHJcbiAgICAgICAgc3VmZml4ICs9IGBcXG5SZXF1ZXN0IElEOiAke3JlcXVlc3RJZH1gO1xyXG4gICAgaWYgKHJlc291cmNlcykge1xyXG4gICAgICAgIGxldCBjb250ZW50ID0gJ1xcblJlc291cmNlczonO1xyXG4gICAgICAgIGZvciAoY29uc3QgcmVzb3VyY2Ugb2YgcmVzb3VyY2VzKSB7XHJcbiAgICAgICAgICAgIGlmICghcmVzb3VyY2UgfHwgdHlwZW9mIHJlc291cmNlICE9PSAnc3RyaW5nJylcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQHN1cGFiYXNlL2F1dGgtanM6IEludmFsaWQgU0lXRSBtZXNzYWdlIGZpZWxkIFwicmVzb3VyY2VzXCIuIEV2ZXJ5IHJlc291cmNlIG11c3QgYmUgYSB2YWxpZCBzdHJpbmcuIFByb3ZpZGVkIHZhbHVlOiAke3Jlc291cmNlfWApO1xyXG4gICAgICAgICAgICBjb250ZW50ICs9IGBcXG4tICR7cmVzb3VyY2V9YDtcclxuICAgICAgICB9XHJcbiAgICAgICAgc3VmZml4ICs9IGNvbnRlbnQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYCR7cHJlZml4fVxcbiR7c3VmZml4fWA7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXRoZXJldW0uanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/web3/ethereum.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/webauthn.errors.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/webauthn.errors.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebAuthnError: () => (/* binding */ WebAuthnError),\n/* harmony export */   WebAuthnUnknownError: () => (/* binding */ WebAuthnUnknownError),\n/* harmony export */   identifyAuthenticationError: () => (/* binding */ identifyAuthenticationError),\n/* harmony export */   identifyRegistrationError: () => (/* binding */ identifyRegistrationError),\n/* harmony export */   isWebAuthnError: () => (/* binding */ isWebAuthnError)\n/* harmony export */ });\n/* harmony import */ var _webauthn__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./webauthn */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/webauthn.js\");\n/* eslint-disable @typescript-eslint/ban-ts-comment */\r\n\r\n/**\r\n * A custom Error used to return a more nuanced error detailing _why_ one of the eight documented\r\n * errors in the spec was raised after calling `navigator.credentials.create()` or\r\n * `navigator.credentials.get()`:\r\n *\r\n * - `AbortError`\r\n * - `ConstraintError`\r\n * - `InvalidStateError`\r\n * - `NotAllowedError`\r\n * - `NotSupportedError`\r\n * - `SecurityError`\r\n * - `TypeError`\r\n * - `UnknownError`\r\n *\r\n * Error messages were determined through investigation of the spec to determine under which\r\n * scenarios a given error would be raised.\r\n */\r\nclass WebAuthnError extends Error {\r\n    constructor({ message, code, cause, name, }) {\r\n        var _a;\r\n        // @ts-ignore: help Rollup understand that `cause` is okay to set\r\n        super(message, { cause });\r\n        this.__isWebAuthnError = true;\r\n        this.name = (_a = name !== null && name !== void 0 ? name : (cause instanceof Error ? cause.name : undefined)) !== null && _a !== void 0 ? _a : 'Unknown Error';\r\n        this.code = code;\r\n    }\r\n}\r\n/**\r\n * Error class for unknown WebAuthn errors.\r\n * Wraps unexpected errors that don't match known WebAuthn error conditions.\r\n */\r\nclass WebAuthnUnknownError extends WebAuthnError {\r\n    constructor(message, originalError) {\r\n        super({\r\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\r\n            cause: originalError,\r\n            message,\r\n        });\r\n        this.name = 'WebAuthnUnknownError';\r\n        this.originalError = originalError;\r\n    }\r\n}\r\n/**\r\n * Type guard to check if an error is a WebAuthnError.\r\n * @param {unknown} error - The error to check\r\n * @returns {boolean} True if the error is a WebAuthnError\r\n */\r\nfunction isWebAuthnError(error) {\r\n    return typeof error === 'object' && error !== null && '__isWebAuthnError' in error;\r\n}\r\n/**\r\n * Attempt to intuit _why_ an error was raised after calling `navigator.credentials.create()`.\r\n * Maps browser errors to specific WebAuthn error codes for better debugging.\r\n * @param {Object} params - Error identification parameters\r\n * @param {Error} params.error - The error thrown by the browser\r\n * @param {CredentialCreationOptions} params.options - The options passed to credentials.create()\r\n * @returns {WebAuthnError} A WebAuthnError with a specific error code\r\n * @see {@link https://w3c.github.io/webauthn/#sctn-createCredential W3C WebAuthn Spec - Create Credential}\r\n */\r\nfunction identifyRegistrationError({ error, options, }) {\r\n    var _a, _b, _c;\r\n    const { publicKey } = options;\r\n    if (!publicKey) {\r\n        throw Error('options was missing required publicKey property');\r\n    }\r\n    if (error.name === 'AbortError') {\r\n        if (options.signal instanceof AbortSignal) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 16)\r\n            return new WebAuthnError({\r\n                message: 'Registration ceremony was sent an abort signal',\r\n                code: 'ERROR_CEREMONY_ABORTED',\r\n                cause: error,\r\n            });\r\n        }\r\n    }\r\n    else if (error.name === 'ConstraintError') {\r\n        if (((_a = publicKey.authenticatorSelection) === null || _a === void 0 ? void 0 : _a.requireResidentKey) === true) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-op-make-cred (Step 4)\r\n            return new WebAuthnError({\r\n                message: 'Discoverable credentials were required but no available authenticator supported it',\r\n                code: 'ERROR_AUTHENTICATOR_MISSING_DISCOVERABLE_CREDENTIAL_SUPPORT',\r\n                cause: error,\r\n            });\r\n        }\r\n        else if (\r\n        // @ts-ignore: `mediation` doesn't yet exist on CredentialCreationOptions but it's possible as of Sept 2024\r\n        options.mediation === 'conditional' &&\r\n            ((_b = publicKey.authenticatorSelection) === null || _b === void 0 ? void 0 : _b.userVerification) === 'required') {\r\n            // https://w3c.github.io/webauthn/#sctn-createCredential (Step 22.4)\r\n            return new WebAuthnError({\r\n                message: 'User verification was required during automatic registration but it could not be performed',\r\n                code: 'ERROR_AUTO_REGISTER_USER_VERIFICATION_FAILURE',\r\n                cause: error,\r\n            });\r\n        }\r\n        else if (((_c = publicKey.authenticatorSelection) === null || _c === void 0 ? void 0 : _c.userVerification) === 'required') {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-op-make-cred (Step 5)\r\n            return new WebAuthnError({\r\n                message: 'User verification was required but no available authenticator supported it',\r\n                code: 'ERROR_AUTHENTICATOR_MISSING_USER_VERIFICATION_SUPPORT',\r\n                cause: error,\r\n            });\r\n        }\r\n    }\r\n    else if (error.name === 'InvalidStateError') {\r\n        // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 20)\r\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-make-cred (Step 3)\r\n        return new WebAuthnError({\r\n            message: 'The authenticator was previously registered',\r\n            code: 'ERROR_AUTHENTICATOR_PREVIOUSLY_REGISTERED',\r\n            cause: error,\r\n        });\r\n    }\r\n    else if (error.name === 'NotAllowedError') {\r\n        /**\r\n         * Pass the error directly through. Platforms are overloading this error beyond what the spec\r\n         * defines and we don't want to overwrite potentially useful error messages.\r\n         */\r\n        return new WebAuthnError({\r\n            message: error.message,\r\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\r\n            cause: error,\r\n        });\r\n    }\r\n    else if (error.name === 'NotSupportedError') {\r\n        const validPubKeyCredParams = publicKey.pubKeyCredParams.filter((param) => param.type === 'public-key');\r\n        if (validPubKeyCredParams.length === 0) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 10)\r\n            return new WebAuthnError({\r\n                message: 'No entry in pubKeyCredParams was of type \"public-key\"',\r\n                code: 'ERROR_MALFORMED_PUBKEYCREDPARAMS',\r\n                cause: error,\r\n            });\r\n        }\r\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-make-cred (Step 2)\r\n        return new WebAuthnError({\r\n            message: 'No available authenticator supported any of the specified pubKeyCredParams algorithms',\r\n            code: 'ERROR_AUTHENTICATOR_NO_SUPPORTED_PUBKEYCREDPARAMS_ALG',\r\n            cause: error,\r\n        });\r\n    }\r\n    else if (error.name === 'SecurityError') {\r\n        const effectiveDomain = window.location.hostname;\r\n        if (!(0,_webauthn__WEBPACK_IMPORTED_MODULE_0__.isValidDomain)(effectiveDomain)) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 7)\r\n            return new WebAuthnError({\r\n                message: `${window.location.hostname} is an invalid domain`,\r\n                code: 'ERROR_INVALID_DOMAIN',\r\n                cause: error,\r\n            });\r\n        }\r\n        else if (publicKey.rp.id !== effectiveDomain) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 8)\r\n            return new WebAuthnError({\r\n                message: `The RP ID \"${publicKey.rp.id}\" is invalid for this domain`,\r\n                code: 'ERROR_INVALID_RP_ID',\r\n                cause: error,\r\n            });\r\n        }\r\n    }\r\n    else if (error.name === 'TypeError') {\r\n        if (publicKey.user.id.byteLength < 1 || publicKey.user.id.byteLength > 64) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 5)\r\n            return new WebAuthnError({\r\n                message: 'User ID was not between 1 and 64 characters',\r\n                code: 'ERROR_INVALID_USER_ID_LENGTH',\r\n                cause: error,\r\n            });\r\n        }\r\n    }\r\n    else if (error.name === 'UnknownError') {\r\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-make-cred (Step 1)\r\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-make-cred (Step 8)\r\n        return new WebAuthnError({\r\n            message: 'The authenticator was unable to process the specified options, or could not create a new credential',\r\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\r\n            cause: error,\r\n        });\r\n    }\r\n    return new WebAuthnError({\r\n        message: 'a Non-Webauthn related error has occurred',\r\n        code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\r\n        cause: error,\r\n    });\r\n}\r\n/**\r\n * Attempt to intuit _why_ an error was raised after calling `navigator.credentials.get()`.\r\n * Maps browser errors to specific WebAuthn error codes for better debugging.\r\n * @param {Object} params - Error identification parameters\r\n * @param {Error} params.error - The error thrown by the browser\r\n * @param {CredentialRequestOptions} params.options - The options passed to credentials.get()\r\n * @returns {WebAuthnError} A WebAuthnError with a specific error code\r\n * @see {@link https://w3c.github.io/webauthn/#sctn-getAssertion W3C WebAuthn Spec - Get Assertion}\r\n */\r\nfunction identifyAuthenticationError({ error, options, }) {\r\n    const { publicKey } = options;\r\n    if (!publicKey) {\r\n        throw Error('options was missing required publicKey property');\r\n    }\r\n    if (error.name === 'AbortError') {\r\n        if (options.signal instanceof AbortSignal) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-createCredential (Step 16)\r\n            return new WebAuthnError({\r\n                message: 'Authentication ceremony was sent an abort signal',\r\n                code: 'ERROR_CEREMONY_ABORTED',\r\n                cause: error,\r\n            });\r\n        }\r\n    }\r\n    else if (error.name === 'NotAllowedError') {\r\n        /**\r\n         * Pass the error directly through. Platforms are overloading this error beyond what the spec\r\n         * defines and we don't want to overwrite potentially useful error messages.\r\n         */\r\n        return new WebAuthnError({\r\n            message: error.message,\r\n            code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\r\n            cause: error,\r\n        });\r\n    }\r\n    else if (error.name === 'SecurityError') {\r\n        const effectiveDomain = window.location.hostname;\r\n        if (!(0,_webauthn__WEBPACK_IMPORTED_MODULE_0__.isValidDomain)(effectiveDomain)) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-discover-from-external-source (Step 5)\r\n            return new WebAuthnError({\r\n                message: `${window.location.hostname} is an invalid domain`,\r\n                code: 'ERROR_INVALID_DOMAIN',\r\n                cause: error,\r\n            });\r\n        }\r\n        else if (publicKey.rpId !== effectiveDomain) {\r\n            // https://www.w3.org/TR/webauthn-2/#sctn-discover-from-external-source (Step 6)\r\n            return new WebAuthnError({\r\n                message: `The RP ID \"${publicKey.rpId}\" is invalid for this domain`,\r\n                code: 'ERROR_INVALID_RP_ID',\r\n                cause: error,\r\n            });\r\n        }\r\n    }\r\n    else if (error.name === 'UnknownError') {\r\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-get-assertion (Step 1)\r\n        // https://www.w3.org/TR/webauthn-2/#sctn-op-get-assertion (Step 12)\r\n        return new WebAuthnError({\r\n            message: 'The authenticator was unable to process the specified options, or could not create a new assertion signature',\r\n            code: 'ERROR_AUTHENTICATOR_GENERAL_ERROR',\r\n            cause: error,\r\n        });\r\n    }\r\n    return new WebAuthnError({\r\n        message: 'a Non-Webauthn related error has occurred',\r\n        code: 'ERROR_PASSTHROUGH_SEE_CAUSE_PROPERTY',\r\n        cause: error,\r\n    });\r\n}\r\n//# sourceMappingURL=webauthn.errors.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/webauthn.errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/webauthn.js":
/*!********************************************************************!*\
  !*** ./node_modules/@supabase/auth-js/dist/module/lib/webauthn.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_CREATION_OPTIONS: () => (/* binding */ DEFAULT_CREATION_OPTIONS),\n/* harmony export */   DEFAULT_REQUEST_OPTIONS: () => (/* binding */ DEFAULT_REQUEST_OPTIONS),\n/* harmony export */   WebAuthnAbortService: () => (/* binding */ WebAuthnAbortService),\n/* harmony export */   WebAuthnApi: () => (/* binding */ WebAuthnApi),\n/* harmony export */   WebAuthnError: () => (/* reexport safe */ _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.WebAuthnError),\n/* harmony export */   createCredential: () => (/* binding */ createCredential),\n/* harmony export */   deserializeCredentialCreationOptions: () => (/* binding */ deserializeCredentialCreationOptions),\n/* harmony export */   deserializeCredentialRequestOptions: () => (/* binding */ deserializeCredentialRequestOptions),\n/* harmony export */   getCredential: () => (/* binding */ getCredential),\n/* harmony export */   identifyAuthenticationError: () => (/* reexport safe */ _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.identifyAuthenticationError),\n/* harmony export */   identifyRegistrationError: () => (/* reexport safe */ _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.identifyRegistrationError),\n/* harmony export */   isValidDomain: () => (/* binding */ isValidDomain),\n/* harmony export */   isWebAuthnError: () => (/* reexport safe */ _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.isWebAuthnError),\n/* harmony export */   mergeCredentialCreationOptions: () => (/* binding */ mergeCredentialCreationOptions),\n/* harmony export */   mergeCredentialRequestOptions: () => (/* binding */ mergeCredentialRequestOptions),\n/* harmony export */   serializeCredentialCreationResponse: () => (/* binding */ serializeCredentialCreationResponse),\n/* harmony export */   serializeCredentialRequestResponse: () => (/* binding */ serializeCredentialRequestResponse),\n/* harmony export */   webAuthnAbortService: () => (/* binding */ webAuthnAbortService)\n/* harmony export */ });\n/* harmony import */ var _base64url__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base64url */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/base64url.js\");\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/errors.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/helpers.js\");\n/* harmony import */ var _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./webauthn.errors */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/webauthn.errors.js\");\nvar __rest = (undefined && undefined.__rest) || function (s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n};\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * WebAuthn abort service to manage ceremony cancellation.\r\n * Ensures only one WebAuthn ceremony is active at a time to prevent \"operation already in progress\" errors.\r\n *\r\n * @experimental This class is experimental and may change in future releases\r\n * @see {@link https://w3c.github.io/webauthn/#sctn-automation-webdriver-capability W3C WebAuthn Spec - Aborting Ceremonies}\r\n */\r\nclass WebAuthnAbortService {\r\n    /**\r\n     * Create an abort signal for a new WebAuthn operation.\r\n     * Automatically cancels any existing operation.\r\n     *\r\n     * @returns {AbortSignal} Signal to pass to navigator.credentials.create() or .get()\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal MDN - AbortSignal}\r\n     */\r\n    createNewAbortSignal() {\r\n        // Abort any existing calls to navigator.credentials.create() or navigator.credentials.get()\r\n        if (this.controller) {\r\n            const abortError = new Error('Cancelling existing WebAuthn API call for new one');\r\n            abortError.name = 'AbortError';\r\n            this.controller.abort(abortError);\r\n        }\r\n        const newController = new AbortController();\r\n        this.controller = newController;\r\n        return newController.signal;\r\n    }\r\n    /**\r\n     * Manually cancel the current WebAuthn operation.\r\n     * Useful for cleaning up when user cancels or navigates away.\r\n     *\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/AbortController/abort MDN - AbortController.abort}\r\n     */\r\n    cancelCeremony() {\r\n        if (this.controller) {\r\n            const abortError = new Error('Manually cancelling existing WebAuthn API call');\r\n            abortError.name = 'AbortError';\r\n            this.controller.abort(abortError);\r\n            this.controller = undefined;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Singleton instance to ensure only one WebAuthn ceremony is active at a time.\r\n * This prevents \"operation already in progress\" errors when retrying WebAuthn operations.\r\n *\r\n * @experimental This instance is experimental and may change in future releases\r\n */\r\nconst webAuthnAbortService = new WebAuthnAbortService();\r\n/**\r\n * Convert base64url encoded strings in WebAuthn credential creation options to ArrayBuffers\r\n * as required by the WebAuthn browser API.\r\n * Supports both native WebAuthn Level 3 parseCreationOptionsFromJSON and manual fallback.\r\n *\r\n * @param {ServerCredentialCreationOptions} options - JSON options from server with base64url encoded fields\r\n * @returns {PublicKeyCredentialCreationOptionsFuture} Options ready for navigator.credentials.create()\r\n * @see {@link https://w3c.github.io/webauthn/#sctn-parseCreationOptionsFromJSON W3C WebAuthn Spec - parseCreationOptionsFromJSON}\r\n */\r\nfunction deserializeCredentialCreationOptions(options) {\r\n    if (!options) {\r\n        throw new Error('Credential creation options are required');\r\n    }\r\n    // Check if the native parseCreationOptionsFromJSON method is available\r\n    if (typeof PublicKeyCredential !== 'undefined' &&\r\n        'parseCreationOptionsFromJSON' in PublicKeyCredential &&\r\n        typeof PublicKeyCredential\r\n            .parseCreationOptionsFromJSON === 'function') {\r\n        // Use the native WebAuthn Level 3 method\r\n        return PublicKeyCredential.parseCreationOptionsFromJSON(\r\n        /** we assert the options here as typescript still doesn't know about future webauthn types */\r\n        options);\r\n    }\r\n    // Fallback to manual parsing for browsers that don't support the native method\r\n    // Destructure to separate fields that need transformation\r\n    const { challenge: challengeStr, user: userOpts, excludeCredentials } = options, restOptions = __rest(options\r\n    // Convert challenge from base64url to ArrayBuffer\r\n    , [\"challenge\", \"user\", \"excludeCredentials\"]);\r\n    // Convert challenge from base64url to ArrayBuffer\r\n    const challenge = (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.base64UrlToUint8Array)(challengeStr).buffer;\r\n    // Convert user.id from base64url to ArrayBuffer\r\n    const user = Object.assign(Object.assign({}, userOpts), { id: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.base64UrlToUint8Array)(userOpts.id).buffer });\r\n    // Build the result object\r\n    const result = Object.assign(Object.assign({}, restOptions), { challenge,\r\n        user });\r\n    // Only add excludeCredentials if it exists\r\n    if (excludeCredentials && excludeCredentials.length > 0) {\r\n        result.excludeCredentials = new Array(excludeCredentials.length);\r\n        for (let i = 0; i < excludeCredentials.length; i++) {\r\n            const cred = excludeCredentials[i];\r\n            result.excludeCredentials[i] = Object.assign(Object.assign({}, cred), { id: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.base64UrlToUint8Array)(cred.id).buffer, type: cred.type || 'public-key', \r\n                // Cast transports to handle future transport types like \"cable\"\r\n                transports: cred.transports });\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Convert base64url encoded strings in WebAuthn credential request options to ArrayBuffers\r\n * as required by the WebAuthn browser API.\r\n * Supports both native WebAuthn Level 3 parseRequestOptionsFromJSON and manual fallback.\r\n *\r\n * @param {ServerCredentialRequestOptions} options - JSON options from server with base64url encoded fields\r\n * @returns {PublicKeyCredentialRequestOptionsFuture} Options ready for navigator.credentials.get()\r\n * @see {@link https://w3c.github.io/webauthn/#sctn-parseRequestOptionsFromJSON W3C WebAuthn Spec - parseRequestOptionsFromJSON}\r\n */\r\nfunction deserializeCredentialRequestOptions(options) {\r\n    if (!options) {\r\n        throw new Error('Credential request options are required');\r\n    }\r\n    // Check if the native parseRequestOptionsFromJSON method is available\r\n    if (typeof PublicKeyCredential !== 'undefined' &&\r\n        'parseRequestOptionsFromJSON' in PublicKeyCredential &&\r\n        typeof PublicKeyCredential\r\n            .parseRequestOptionsFromJSON === 'function') {\r\n        // Use the native WebAuthn Level 3 method\r\n        return PublicKeyCredential.parseRequestOptionsFromJSON(options);\r\n    }\r\n    // Fallback to manual parsing for browsers that don't support the native method\r\n    // Destructure to separate fields that need transformation\r\n    const { challenge: challengeStr, allowCredentials } = options, restOptions = __rest(options\r\n    // Convert challenge from base64url to ArrayBuffer\r\n    , [\"challenge\", \"allowCredentials\"]);\r\n    // Convert challenge from base64url to ArrayBuffer\r\n    const challenge = (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.base64UrlToUint8Array)(challengeStr).buffer;\r\n    // Build the result object\r\n    const result = Object.assign(Object.assign({}, restOptions), { challenge });\r\n    // Only add allowCredentials if it exists\r\n    if (allowCredentials && allowCredentials.length > 0) {\r\n        result.allowCredentials = new Array(allowCredentials.length);\r\n        for (let i = 0; i < allowCredentials.length; i++) {\r\n            const cred = allowCredentials[i];\r\n            result.allowCredentials[i] = Object.assign(Object.assign({}, cred), { id: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.base64UrlToUint8Array)(cred.id).buffer, type: cred.type || 'public-key', \r\n                // Cast transports to handle future transport types like \"cable\"\r\n                transports: cred.transports });\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Convert a registration/enrollment credential response to server format.\r\n * Serializes binary fields to base64url for JSON transmission.\r\n * Supports both native WebAuthn Level 3 toJSON and manual fallback.\r\n *\r\n * @param {RegistrationCredential} credential - Credential from navigator.credentials.create()\r\n * @returns {RegistrationResponseJSON} JSON-serializable credential for server\r\n * @see {@link https://w3c.github.io/webauthn/#dom-publickeycredential-tojson W3C WebAuthn Spec - toJSON}\r\n */\r\nfunction serializeCredentialCreationResponse(credential) {\r\n    var _a;\r\n    // Check if the credential instance has the toJSON method\r\n    if ('toJSON' in credential && typeof credential.toJSON === 'function') {\r\n        // Use the native WebAuthn Level 3 method\r\n        return credential.toJSON();\r\n    }\r\n    const credentialWithAttachment = credential;\r\n    return {\r\n        id: credential.id,\r\n        rawId: credential.id,\r\n        response: {\r\n            attestationObject: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64URL)(new Uint8Array(credential.response.attestationObject)),\r\n            clientDataJSON: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64URL)(new Uint8Array(credential.response.clientDataJSON)),\r\n        },\r\n        type: 'public-key',\r\n        clientExtensionResults: credential.getClientExtensionResults(),\r\n        // Convert null to undefined and cast to AuthenticatorAttachment type\r\n        authenticatorAttachment: ((_a = credentialWithAttachment.authenticatorAttachment) !== null && _a !== void 0 ? _a : undefined),\r\n    };\r\n}\r\n/**\r\n * Convert an authentication/verification credential response to server format.\r\n * Serializes binary fields to base64url for JSON transmission.\r\n * Supports both native WebAuthn Level 3 toJSON and manual fallback.\r\n *\r\n * @param {AuthenticationCredential} credential - Credential from navigator.credentials.get()\r\n * @returns {AuthenticationResponseJSON} JSON-serializable credential for server\r\n * @see {@link https://w3c.github.io/webauthn/#dom-publickeycredential-tojson W3C WebAuthn Spec - toJSON}\r\n */\r\nfunction serializeCredentialRequestResponse(credential) {\r\n    var _a;\r\n    // Check if the credential instance has the toJSON method\r\n    if ('toJSON' in credential && typeof credential.toJSON === 'function') {\r\n        // Use the native WebAuthn Level 3 method\r\n        return credential.toJSON();\r\n    }\r\n    // Fallback to manual conversion for browsers that don't support toJSON\r\n    // Access authenticatorAttachment via type assertion to handle TypeScript version differences\r\n    // @simplewebauthn/types includes this property but base TypeScript 4.7.4 doesn't\r\n    const credentialWithAttachment = credential;\r\n    const clientExtensionResults = credential.getClientExtensionResults();\r\n    const assertionResponse = credential.response;\r\n    return {\r\n        id: credential.id,\r\n        rawId: credential.id, // W3C spec expects rawId to match id for JSON format\r\n        response: {\r\n            authenticatorData: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64URL)(new Uint8Array(assertionResponse.authenticatorData)),\r\n            clientDataJSON: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64URL)(new Uint8Array(assertionResponse.clientDataJSON)),\r\n            signature: (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64URL)(new Uint8Array(assertionResponse.signature)),\r\n            userHandle: assertionResponse.userHandle\r\n                ? (0,_base64url__WEBPACK_IMPORTED_MODULE_0__.bytesToBase64URL)(new Uint8Array(assertionResponse.userHandle))\r\n                : undefined,\r\n        },\r\n        type: 'public-key',\r\n        clientExtensionResults,\r\n        // Convert null to undefined and cast to AuthenticatorAttachment type\r\n        authenticatorAttachment: ((_a = credentialWithAttachment.authenticatorAttachment) !== null && _a !== void 0 ? _a : undefined),\r\n    };\r\n}\r\n/**\r\n * A simple test to determine if a hostname is a properly-formatted domain name.\r\n * Considers localhost valid for development environments.\r\n *\r\n * A \"valid domain\" is defined here: https://url.spec.whatwg.org/#valid-domain\r\n *\r\n * Regex sourced from here:\r\n * https://www.oreilly.com/library/view/regular-expressions-cookbook/9781449327453/ch08s15.html\r\n *\r\n * @param {string} hostname - The hostname to validate\r\n * @returns {boolean} True if valid domain or localhost\r\n * @see {@link https://url.spec.whatwg.org/#valid-domain WHATWG URL Spec - Valid Domain}\r\n */\r\nfunction isValidDomain(hostname) {\r\n    return (\r\n    // Consider localhost valid as well since it's okay wrt Secure Contexts\r\n    hostname === 'localhost' || /^([a-z0-9]+(-[a-z0-9]+)*\\.)+[a-z]{2,}$/i.test(hostname));\r\n}\r\n/**\r\n * Determine if the browser is capable of WebAuthn.\r\n * Checks for necessary Web APIs: PublicKeyCredential and Credential Management.\r\n *\r\n * @returns {boolean} True if browser supports WebAuthn\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredential#browser_compatibility MDN - PublicKeyCredential Browser Compatibility}\r\n */\r\nfunction browserSupportsWebAuthn() {\r\n    var _a, _b;\r\n    return !!((0,_helpers__WEBPACK_IMPORTED_MODULE_2__.isBrowser)() &&\r\n        'PublicKeyCredential' in window &&\r\n        window.PublicKeyCredential &&\r\n        'credentials' in navigator &&\r\n        typeof ((_a = navigator === null || navigator === void 0 ? void 0 : navigator.credentials) === null || _a === void 0 ? void 0 : _a.create) === 'function' &&\r\n        typeof ((_b = navigator === null || navigator === void 0 ? void 0 : navigator.credentials) === null || _b === void 0 ? void 0 : _b.get) === 'function');\r\n}\r\n/**\r\n * Create a WebAuthn credential using the browser's credentials API.\r\n * Wraps navigator.credentials.create() with error handling.\r\n *\r\n * @param {CredentialCreationOptions} options - Options including publicKey parameters\r\n * @returns {Promise<RequestResult<RegistrationCredential, WebAuthnError>>} Created credential or error\r\n * @see {@link https://w3c.github.io/webauthn/#sctn-createCredential W3C WebAuthn Spec - Create Credential}\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/create MDN - credentials.create}\r\n */\r\nasync function createCredential(options) {\r\n    try {\r\n        const response = await navigator.credentials.create(\r\n        /** we assert the type here until typescript types are updated */\r\n        options);\r\n        if (!response) {\r\n            return {\r\n                data: null,\r\n                error: new _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.WebAuthnUnknownError('Empty credential response', response),\r\n            };\r\n        }\r\n        if (!(response instanceof PublicKeyCredential)) {\r\n            return {\r\n                data: null,\r\n                error: new _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.WebAuthnUnknownError('Browser returned unexpected credential type', response),\r\n            };\r\n        }\r\n        return { data: response, error: null };\r\n    }\r\n    catch (err) {\r\n        return {\r\n            data: null,\r\n            error: (0,_webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.identifyRegistrationError)({\r\n                error: err,\r\n                options,\r\n            }),\r\n        };\r\n    }\r\n}\r\n/**\r\n * Get a WebAuthn credential using the browser's credentials API.\r\n * Wraps navigator.credentials.get() with error handling.\r\n *\r\n * @param {CredentialRequestOptions} options - Options including publicKey parameters\r\n * @returns {Promise<RequestResult<AuthenticationCredential, WebAuthnError>>} Retrieved credential or error\r\n * @see {@link https://w3c.github.io/webauthn/#sctn-getAssertion W3C WebAuthn Spec - Get Assertion}\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/CredentialsContainer/get MDN - credentials.get}\r\n */\r\nasync function getCredential(options) {\r\n    try {\r\n        const response = await navigator.credentials.get(\r\n        /** we assert the type here until typescript types are updated */\r\n        options);\r\n        if (!response) {\r\n            return {\r\n                data: null,\r\n                error: new _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.WebAuthnUnknownError('Empty credential response', response),\r\n            };\r\n        }\r\n        if (!(response instanceof PublicKeyCredential)) {\r\n            return {\r\n                data: null,\r\n                error: new _webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.WebAuthnUnknownError('Browser returned unexpected credential type', response),\r\n            };\r\n        }\r\n        return { data: response, error: null };\r\n    }\r\n    catch (err) {\r\n        return {\r\n            data: null,\r\n            error: (0,_webauthn_errors__WEBPACK_IMPORTED_MODULE_3__.identifyAuthenticationError)({\r\n                error: err,\r\n                options,\r\n            }),\r\n        };\r\n    }\r\n}\r\nconst DEFAULT_CREATION_OPTIONS = {\r\n    hints: ['security-key'],\r\n    authenticatorSelection: {\r\n        authenticatorAttachment: 'cross-platform',\r\n        requireResidentKey: false,\r\n        /** set to preferred because older yubikeys don't have PIN/Biometric */\r\n        userVerification: 'preferred',\r\n        residentKey: 'discouraged',\r\n    },\r\n    attestation: 'none',\r\n};\r\nconst DEFAULT_REQUEST_OPTIONS = {\r\n    /** set to preferred because older yubikeys don't have PIN/Biometric */\r\n    userVerification: 'preferred',\r\n    hints: ['security-key'],\r\n};\r\nfunction deepMerge(...sources) {\r\n    const isObject = (val) => val !== null && typeof val === 'object' && !Array.isArray(val);\r\n    const isArrayBufferLike = (val) => val instanceof ArrayBuffer || ArrayBuffer.isView(val);\r\n    const result = {};\r\n    for (const source of sources) {\r\n        if (!source)\r\n            continue;\r\n        for (const key in source) {\r\n            const value = source[key];\r\n            if (value === undefined)\r\n                continue;\r\n            if (Array.isArray(value)) {\r\n                // preserve array reference, including unions like AuthenticatorTransport[]\r\n                result[key] = value;\r\n            }\r\n            else if (isArrayBufferLike(value)) {\r\n                result[key] = value;\r\n            }\r\n            else if (isObject(value)) {\r\n                const existing = result[key];\r\n                if (isObject(existing)) {\r\n                    result[key] = deepMerge(existing, value);\r\n                }\r\n                else {\r\n                    result[key] = deepMerge(value);\r\n                }\r\n            }\r\n            else {\r\n                result[key] = value;\r\n            }\r\n        }\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Merges WebAuthn credential creation options with overrides.\r\n * Sets sensible defaults for authenticator selection and extensions.\r\n *\r\n * @param {PublicKeyCredentialCreationOptionsFuture} baseOptions - The base options from the server\r\n * @param {PublicKeyCredentialCreationOptionsFuture} overrides - Optional overrides to apply\r\n * @param {string} friendlyName - Optional friendly name for the credential\r\n * @returns {PublicKeyCredentialCreationOptionsFuture} Merged credential creation options\r\n * @see {@link https://w3c.github.io/webauthn/#dictdef-authenticatorselectioncriteria W3C WebAuthn Spec - AuthenticatorSelectionCriteria}\r\n */\r\nfunction mergeCredentialCreationOptions(baseOptions, overrides) {\r\n    return deepMerge(DEFAULT_CREATION_OPTIONS, baseOptions, overrides || {});\r\n}\r\n/**\r\n * Merges WebAuthn credential request options with overrides.\r\n * Sets sensible defaults for user verification and hints.\r\n *\r\n * @param {PublicKeyCredentialRequestOptionsFuture} baseOptions - The base options from the server\r\n * @param {PublicKeyCredentialRequestOptionsFuture} overrides - Optional overrides to apply\r\n * @returns {PublicKeyCredentialRequestOptionsFuture} Merged credential request options\r\n * @see {@link https://w3c.github.io/webauthn/#dictdef-publickeycredentialrequestoptions W3C WebAuthn Spec - PublicKeyCredentialRequestOptions}\r\n */\r\nfunction mergeCredentialRequestOptions(baseOptions, overrides) {\r\n    return deepMerge(DEFAULT_REQUEST_OPTIONS, baseOptions, overrides || {});\r\n}\r\n/**\r\n * WebAuthn API wrapper for Supabase Auth.\r\n * Provides methods for enrolling, challenging, verifying, authenticating, and registering WebAuthn credentials.\r\n *\r\n * @experimental This API is experimental and may change in future releases\r\n * @see {@link https://w3c.github.io/webauthn/ W3C WebAuthn Specification}\r\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/Web_Authentication_API MDN - Web Authentication API}\r\n */\r\nclass WebAuthnApi {\r\n    constructor(client) {\r\n        this.client = client;\r\n        // Bind all methods so they can be destructured\r\n        this.enroll = this._enroll.bind(this);\r\n        this.challenge = this._challenge.bind(this);\r\n        this.verify = this._verify.bind(this);\r\n        this.authenticate = this._authenticate.bind(this);\r\n        this.register = this._register.bind(this);\r\n    }\r\n    /**\r\n     * Enroll a new WebAuthn factor.\r\n     * Creates an unverified WebAuthn factor that must be verified with a credential.\r\n     *\r\n     * @experimental This method is experimental and may change in future releases\r\n     * @param {Omit<MFAEnrollWebauthnParams, 'factorType'>} params - Enrollment parameters (friendlyName required)\r\n     * @returns {Promise<AuthMFAEnrollWebauthnResponse>} Enrolled factor details or error\r\n     * @see {@link https://w3c.github.io/webauthn/#sctn-registering-a-new-credential W3C WebAuthn Spec - Registering a New Credential}\r\n     */\r\n    async _enroll(params) {\r\n        return this.client.mfa.enroll(Object.assign(Object.assign({}, params), { factorType: 'webauthn' }));\r\n    }\r\n    /**\r\n     * Challenge for WebAuthn credential creation or authentication.\r\n     * Combines server challenge with browser credential operations.\r\n     * Handles both registration (create) and authentication (request) flows.\r\n     *\r\n     * @experimental This method is experimental and may change in future releases\r\n     * @param {MFAChallengeWebauthnParams & { friendlyName?: string; signal?: AbortSignal }} params - Challenge parameters including factorId\r\n     * @param {Object} overrides - Allows you to override the parameters passed to navigator.credentials\r\n     * @param {PublicKeyCredentialCreationOptionsFuture} overrides.create - Override options for credential creation\r\n     * @param {PublicKeyCredentialRequestOptionsFuture} overrides.request - Override options for credential request\r\n     * @returns {Promise<RequestResult>} Challenge response with credential or error\r\n     * @see {@link https://w3c.github.io/webauthn/#sctn-credential-creation W3C WebAuthn Spec - Credential Creation}\r\n     * @see {@link https://w3c.github.io/webauthn/#sctn-verifying-assertion W3C WebAuthn Spec - Verifying Assertion}\r\n     */\r\n    async _challenge({ factorId, webauthn, friendlyName, signal, }, overrides) {\r\n        try {\r\n            // Get challenge from server using the client's MFA methods\r\n            const { data: challengeResponse, error: challengeError } = await this.client.mfa.challenge({\r\n                factorId,\r\n                webauthn,\r\n            });\r\n            if (!challengeResponse) {\r\n                return { data: null, error: challengeError };\r\n            }\r\n            const abortSignal = signal !== null && signal !== void 0 ? signal : webAuthnAbortService.createNewAbortSignal();\r\n            /** webauthn will fail if either of the name/displayname are blank */\r\n            if (challengeResponse.webauthn.type === 'create') {\r\n                const { user } = challengeResponse.webauthn.credential_options.publicKey;\r\n                if (!user.name) {\r\n                    user.name = `${user.id}:${friendlyName}`;\r\n                }\r\n                if (!user.displayName) {\r\n                    user.displayName = user.name;\r\n                }\r\n            }\r\n            switch (challengeResponse.webauthn.type) {\r\n                case 'create': {\r\n                    const options = mergeCredentialCreationOptions(challengeResponse.webauthn.credential_options.publicKey, overrides === null || overrides === void 0 ? void 0 : overrides.create);\r\n                    const { data, error } = await createCredential({\r\n                        publicKey: options,\r\n                        signal: abortSignal,\r\n                    });\r\n                    if (data) {\r\n                        return {\r\n                            data: {\r\n                                factorId,\r\n                                challengeId: challengeResponse.id,\r\n                                webauthn: {\r\n                                    type: challengeResponse.webauthn.type,\r\n                                    credential_response: data,\r\n                                },\r\n                            },\r\n                            error: null,\r\n                        };\r\n                    }\r\n                    return { data: null, error };\r\n                }\r\n                case 'request': {\r\n                    const options = mergeCredentialRequestOptions(challengeResponse.webauthn.credential_options.publicKey, overrides === null || overrides === void 0 ? void 0 : overrides.request);\r\n                    const { data, error } = await getCredential(Object.assign(Object.assign({}, challengeResponse.webauthn.credential_options), { publicKey: options, signal: abortSignal }));\r\n                    if (data) {\r\n                        return {\r\n                            data: {\r\n                                factorId,\r\n                                challengeId: challengeResponse.id,\r\n                                webauthn: {\r\n                                    type: challengeResponse.webauthn.type,\r\n                                    credential_response: data,\r\n                                },\r\n                            },\r\n                            error: null,\r\n                        };\r\n                    }\r\n                    return { data: null, error };\r\n                }\r\n            }\r\n        }\r\n        catch (error) {\r\n            if ((0,_errors__WEBPACK_IMPORTED_MODULE_1__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            return {\r\n                data: null,\r\n                error: new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthUnknownError('Unexpected error in challenge', error),\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Verify a WebAuthn credential with the server.\r\n     * Completes the WebAuthn ceremony by sending the credential to the server for verification.\r\n     *\r\n     * @experimental This method is experimental and may change in future releases\r\n     * @param {Object} params - Verification parameters\r\n     * @param {string} params.challengeId - ID of the challenge being verified\r\n     * @param {string} params.factorId - ID of the WebAuthn factor\r\n     * @param {MFAVerifyWebauthnParams<T>['webauthn']} params.webauthn - WebAuthn credential response\r\n     * @returns {Promise<AuthMFAVerifyResponse>} Verification result with session or error\r\n     * @see {@link https://w3c.github.io/webauthn/#sctn-verifying-assertion W3C WebAuthn Spec - Verifying an Authentication Assertion}\r\n     * */\r\n    async _verify({ challengeId, factorId, webauthn, }) {\r\n        return this.client.mfa.verify({\r\n            factorId,\r\n            challengeId,\r\n            webauthn: webauthn,\r\n        });\r\n    }\r\n    /**\r\n     * Complete WebAuthn authentication flow.\r\n     * Performs challenge and verification in a single operation for existing credentials.\r\n     *\r\n     * @experimental This method is experimental and may change in future releases\r\n     * @param {Object} params - Authentication parameters\r\n     * @param {string} params.factorId - ID of the WebAuthn factor to authenticate with\r\n     * @param {Object} params.webauthn - WebAuthn configuration\r\n     * @param {string} params.webauthn.rpId - Relying Party ID (defaults to current hostname)\r\n     * @param {string[]} params.webauthn.rpOrigins - Allowed origins (defaults to current origin)\r\n     * @param {AbortSignal} params.webauthn.signal - Optional abort signal\r\n     * @param {PublicKeyCredentialRequestOptionsFuture} overrides - Override options for navigator.credentials.get\r\n     * @returns {Promise<RequestResult<AuthMFAVerifyResponseData, WebAuthnError | AuthError>>} Authentication result\r\n     * @see {@link https://w3c.github.io/webauthn/#sctn-authentication W3C WebAuthn Spec - Authentication Ceremony}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialRequestOptions MDN - PublicKeyCredentialRequestOptions}\r\n     */\r\n    async _authenticate({ factorId, webauthn: { rpId = typeof window !== 'undefined' ? window.location.hostname : undefined, rpOrigins = typeof window !== 'undefined' ? [window.location.origin] : undefined, signal, }, }, overrides) {\r\n        if (!rpId) {\r\n            return {\r\n                data: null,\r\n                error: new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthError('rpId is required for WebAuthn authentication'),\r\n            };\r\n        }\r\n        try {\r\n            if (!browserSupportsWebAuthn()) {\r\n                return {\r\n                    data: null,\r\n                    error: new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthUnknownError('Browser does not support WebAuthn', null),\r\n                };\r\n            }\r\n            // Get challenge and credential\r\n            const { data: challengeResponse, error: challengeError } = await this.challenge({\r\n                factorId,\r\n                webauthn: { rpId, rpOrigins },\r\n                signal,\r\n            }, { request: overrides });\r\n            if (!challengeResponse) {\r\n                return { data: null, error: challengeError };\r\n            }\r\n            const { webauthn } = challengeResponse;\r\n            // Verify credential\r\n            return this._verify({\r\n                factorId,\r\n                challengeId: challengeResponse.challengeId,\r\n                webauthn: {\r\n                    type: webauthn.type,\r\n                    rpId,\r\n                    rpOrigins,\r\n                    credential_response: webauthn.credential_response,\r\n                },\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_errors__WEBPACK_IMPORTED_MODULE_1__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            return {\r\n                data: null,\r\n                error: new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthUnknownError('Unexpected error in authenticate', error),\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Complete WebAuthn registration flow.\r\n     * Performs enrollment, challenge, and verification in a single operation for new credentials.\r\n     *\r\n     * @experimental This method is experimental and may change in future releases\r\n     * @param {Object} params - Registration parameters\r\n     * @param {string} params.friendlyName - User-friendly name for the credential\r\n     * @param {string} params.rpId - Relying Party ID (defaults to current hostname)\r\n     * @param {string[]} params.rpOrigins - Allowed origins (defaults to current origin)\r\n     * @param {AbortSignal} params.signal - Optional abort signal\r\n     * @param {PublicKeyCredentialCreationOptionsFuture} overrides - Override options for navigator.credentials.create\r\n     * @returns {Promise<RequestResult<AuthMFAVerifyResponseData, WebAuthnError | AuthError>>} Registration result\r\n     * @see {@link https://w3c.github.io/webauthn/#sctn-registering-a-new-credential W3C WebAuthn Spec - Registration Ceremony}\r\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/PublicKeyCredentialCreationOptions MDN - PublicKeyCredentialCreationOptions}\r\n     */\r\n    async _register({ friendlyName, rpId = typeof window !== 'undefined' ? window.location.hostname : undefined, rpOrigins = typeof window !== 'undefined' ? [window.location.origin] : undefined, signal, }, overrides) {\r\n        if (!rpId) {\r\n            return {\r\n                data: null,\r\n                error: new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthError('rpId is required for WebAuthn registration'),\r\n            };\r\n        }\r\n        try {\r\n            if (!browserSupportsWebAuthn()) {\r\n                return {\r\n                    data: null,\r\n                    error: new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthUnknownError('Browser does not support WebAuthn', null),\r\n                };\r\n            }\r\n            // Enroll factor\r\n            const { data: factor, error: enrollError } = await this._enroll({\r\n                friendlyName,\r\n            });\r\n            if (!factor) {\r\n                await this.client.mfa\r\n                    .listFactors()\r\n                    .then((factors) => {\r\n                    var _a;\r\n                    return (_a = factors.data) === null || _a === void 0 ? void 0 : _a.all.find((v) => v.factor_type === 'webauthn' &&\r\n                        v.friendly_name === friendlyName &&\r\n                        v.status !== 'unverified');\r\n                })\r\n                    .then((factor) => (factor ? this.client.mfa.unenroll({ factorId: factor === null || factor === void 0 ? void 0 : factor.id }) : void 0));\r\n                return { data: null, error: enrollError };\r\n            }\r\n            // Get challenge and create credential\r\n            const { data: challengeResponse, error: challengeError } = await this._challenge({\r\n                factorId: factor.id,\r\n                friendlyName: factor.friendly_name,\r\n                webauthn: { rpId, rpOrigins },\r\n                signal,\r\n            }, {\r\n                create: overrides,\r\n            });\r\n            if (!challengeResponse) {\r\n                return { data: null, error: challengeError };\r\n            }\r\n            return this._verify({\r\n                factorId: factor.id,\r\n                challengeId: challengeResponse.challengeId,\r\n                webauthn: {\r\n                    rpId,\r\n                    rpOrigins,\r\n                    type: challengeResponse.webauthn.type,\r\n                    credential_response: challengeResponse.webauthn.credential_response,\r\n                },\r\n            });\r\n        }\r\n        catch (error) {\r\n            if ((0,_errors__WEBPACK_IMPORTED_MODULE_1__.isAuthError)(error)) {\r\n                return { data: null, error };\r\n            }\r\n            return {\r\n                data: null,\r\n                error: new _errors__WEBPACK_IMPORTED_MODULE_1__.AuthUnknownError('Unexpected error in register', error),\r\n            };\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=webauthn.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/auth-js/dist/module/lib/webauthn.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/functions-js/dist/module/FunctionsClient.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@supabase/functions-js/dist/module/FunctionsClient.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionsClient: () => (/* binding */ FunctionsClient)\n/* harmony export */ });\n/* harmony import */ var _helper__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helper */ \"(ssr)/./node_modules/@supabase/functions-js/dist/module/helper.js\");\n/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@supabase/functions-js/dist/module/types.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass FunctionsClient {\r\n    constructor(url, { headers = {}, customFetch, region = _types__WEBPACK_IMPORTED_MODULE_0__.FunctionRegion.Any, } = {}) {\r\n        this.url = url;\r\n        this.headers = headers;\r\n        this.region = region;\r\n        this.fetch = (0,_helper__WEBPACK_IMPORTED_MODULE_1__.resolveFetch)(customFetch);\r\n    }\r\n    /**\r\n     * Updates the authorization header\r\n     * @param token - the new jwt token sent in the authorisation header\r\n     */\r\n    setAuth(token) {\r\n        this.headers.Authorization = `Bearer ${token}`;\r\n    }\r\n    /**\r\n     * Invokes a function\r\n     * @param functionName - The name of the Function to invoke.\r\n     * @param options - Options for invoking the Function.\r\n     */\r\n    invoke(functionName_1) {\r\n        return __awaiter(this, arguments, void 0, function* (functionName, options = {}) {\r\n            var _a;\r\n            try {\r\n                const { headers, method, body: functionArgs, signal } = options;\r\n                let _headers = {};\r\n                let { region } = options;\r\n                if (!region) {\r\n                    region = this.region;\r\n                }\r\n                // Add region as query parameter using URL API\r\n                const url = new URL(`${this.url}/${functionName}`);\r\n                if (region && region !== 'any') {\r\n                    _headers['x-region'] = region;\r\n                    url.searchParams.set('forceFunctionRegion', region);\r\n                }\r\n                let body;\r\n                if (functionArgs &&\r\n                    ((headers && !Object.prototype.hasOwnProperty.call(headers, 'Content-Type')) || !headers)) {\r\n                    if ((typeof Blob !== 'undefined' && functionArgs instanceof Blob) ||\r\n                        functionArgs instanceof ArrayBuffer) {\r\n                        // will work for File as File inherits Blob\r\n                        // also works for ArrayBuffer as it is the same underlying structure as a Blob\r\n                        _headers['Content-Type'] = 'application/octet-stream';\r\n                        body = functionArgs;\r\n                    }\r\n                    else if (typeof functionArgs === 'string') {\r\n                        // plain string\r\n                        _headers['Content-Type'] = 'text/plain';\r\n                        body = functionArgs;\r\n                    }\r\n                    else if (typeof FormData !== 'undefined' && functionArgs instanceof FormData) {\r\n                        // don't set content-type headers\r\n                        // Request will automatically add the right boundary value\r\n                        body = functionArgs;\r\n                    }\r\n                    else {\r\n                        // default, assume this is JSON\r\n                        _headers['Content-Type'] = 'application/json';\r\n                        body = JSON.stringify(functionArgs);\r\n                    }\r\n                }\r\n                const response = yield this.fetch(url.toString(), {\r\n                    method: method || 'POST',\r\n                    // headers priority is (high to low):\r\n                    // 1. invoke-level headers\r\n                    // 2. client-level headers\r\n                    // 3. default Content-Type header\r\n                    headers: Object.assign(Object.assign(Object.assign({}, _headers), this.headers), headers),\r\n                    body,\r\n                    signal,\r\n                }).catch((fetchError) => {\r\n                    if (fetchError.name === 'AbortError') {\r\n                        throw fetchError;\r\n                    }\r\n                    throw new _types__WEBPACK_IMPORTED_MODULE_0__.FunctionsFetchError(fetchError);\r\n                });\r\n                const isRelayError = response.headers.get('x-relay-error');\r\n                if (isRelayError && isRelayError === 'true') {\r\n                    throw new _types__WEBPACK_IMPORTED_MODULE_0__.FunctionsRelayError(response);\r\n                }\r\n                if (!response.ok) {\r\n                    throw new _types__WEBPACK_IMPORTED_MODULE_0__.FunctionsHttpError(response);\r\n                }\r\n                let responseType = ((_a = response.headers.get('Content-Type')) !== null && _a !== void 0 ? _a : 'text/plain').split(';')[0].trim();\r\n                let data;\r\n                if (responseType === 'application/json') {\r\n                    data = yield response.json();\r\n                }\r\n                else if (responseType === 'application/octet-stream') {\r\n                    data = yield response.blob();\r\n                }\r\n                else if (responseType === 'text/event-stream') {\r\n                    data = response;\r\n                }\r\n                else if (responseType === 'multipart/form-data') {\r\n                    data = yield response.formData();\r\n                }\r\n                else {\r\n                    // default to text\r\n                    data = yield response.text();\r\n                }\r\n                return { data, error: null, response };\r\n            }\r\n            catch (error) {\r\n                if (error instanceof Error && error.name === 'AbortError') {\r\n                    return { data: null, error: new _types__WEBPACK_IMPORTED_MODULE_0__.FunctionsFetchError(error) };\r\n                }\r\n                return {\r\n                    data: null,\r\n                    error,\r\n                    response: error instanceof _types__WEBPACK_IMPORTED_MODULE_0__.FunctionsHttpError || error instanceof _types__WEBPACK_IMPORTED_MODULE_0__.FunctionsRelayError\r\n                        ? error.context\r\n                        : undefined,\r\n                };\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=FunctionsClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/functions-js/dist/module/FunctionsClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/functions-js/dist/module/helper.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@supabase/functions-js/dist/module/helper.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   resolveFetch: () => (/* binding */ resolveFetch)\n/* harmony export */ });\nconst resolveFetch = (customFetch) => {\r\n    let _fetch;\r\n    if (customFetch) {\r\n        _fetch = customFetch;\r\n    }\r\n    else if (typeof fetch === 'undefined') {\r\n        _fetch = (...args) => Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @supabase/node-fetch */ \"(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\", 23)).then(({ default: fetch }) => fetch(...args));\r\n    }\r\n    else {\r\n        _fetch = fetch;\r\n    }\r\n    return (...args) => _fetch(...args);\r\n};\r\n//# sourceMappingURL=helper.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcy9kaXN0L21vZHVsZS9oZWxwZXIuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixnTEFBOEIsU0FBUyxnQkFBZ0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcy9kaXN0L21vZHVsZS9oZWxwZXIuanM/YTA1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY29uc3QgcmVzb2x2ZUZldGNoID0gKGN1c3RvbUZldGNoKSA9PiB7XHJcbiAgICBsZXQgX2ZldGNoO1xyXG4gICAgaWYgKGN1c3RvbUZldGNoKSB7XHJcbiAgICAgICAgX2ZldGNoID0gY3VzdG9tRmV0Y2g7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgX2ZldGNoID0gKC4uLmFyZ3MpID0+IGltcG9ydCgnQHN1cGFiYXNlL25vZGUtZmV0Y2gnKS50aGVuKCh7IGRlZmF1bHQ6IGZldGNoIH0pID0+IGZldGNoKC4uLmFyZ3MpKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIF9mZXRjaCA9IGZldGNoO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiBfZmV0Y2goLi4uYXJncyk7XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWhlbHBlci5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/functions-js/dist/module/helper.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/functions-js/dist/module/types.js":
/*!******************************************************************!*\
  !*** ./node_modules/@supabase/functions-js/dist/module/types.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FunctionRegion: () => (/* binding */ FunctionRegion),\n/* harmony export */   FunctionsError: () => (/* binding */ FunctionsError),\n/* harmony export */   FunctionsFetchError: () => (/* binding */ FunctionsFetchError),\n/* harmony export */   FunctionsHttpError: () => (/* binding */ FunctionsHttpError),\n/* harmony export */   FunctionsRelayError: () => (/* binding */ FunctionsRelayError)\n/* harmony export */ });\nclass FunctionsError extends Error {\r\n    constructor(message, name = 'FunctionsError', context) {\r\n        super(message);\r\n        this.name = name;\r\n        this.context = context;\r\n    }\r\n}\r\nclass FunctionsFetchError extends FunctionsError {\r\n    constructor(context) {\r\n        super('Failed to send a request to the Edge Function', 'FunctionsFetchError', context);\r\n    }\r\n}\r\nclass FunctionsRelayError extends FunctionsError {\r\n    constructor(context) {\r\n        super('Relay Error invoking the Edge Function', 'FunctionsRelayError', context);\r\n    }\r\n}\r\nclass FunctionsHttpError extends FunctionsError {\r\n    constructor(context) {\r\n        super('Edge Function returned a non-2xx status code', 'FunctionsHttpError', context);\r\n    }\r\n}\r\n// Define the enum for the 'region' property\r\nvar FunctionRegion;\r\n(function (FunctionRegion) {\r\n    FunctionRegion[\"Any\"] = \"any\";\r\n    FunctionRegion[\"ApNortheast1\"] = \"ap-northeast-1\";\r\n    FunctionRegion[\"ApNortheast2\"] = \"ap-northeast-2\";\r\n    FunctionRegion[\"ApSouth1\"] = \"ap-south-1\";\r\n    FunctionRegion[\"ApSoutheast1\"] = \"ap-southeast-1\";\r\n    FunctionRegion[\"ApSoutheast2\"] = \"ap-southeast-2\";\r\n    FunctionRegion[\"CaCentral1\"] = \"ca-central-1\";\r\n    FunctionRegion[\"EuCentral1\"] = \"eu-central-1\";\r\n    FunctionRegion[\"EuWest1\"] = \"eu-west-1\";\r\n    FunctionRegion[\"EuWest2\"] = \"eu-west-2\";\r\n    FunctionRegion[\"EuWest3\"] = \"eu-west-3\";\r\n    FunctionRegion[\"SaEast1\"] = \"sa-east-1\";\r\n    FunctionRegion[\"UsEast1\"] = \"us-east-1\";\r\n    FunctionRegion[\"UsWest1\"] = \"us-west-1\";\r\n    FunctionRegion[\"UsWest2\"] = \"us-west-2\";\r\n})(FunctionRegion || (FunctionRegion = {}));\r\n//# sourceMappingURL=types.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcy9kaXN0L21vZHVsZS90eXBlcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL2Z1bmN0aW9ucy1qcy9kaXN0L21vZHVsZS90eXBlcy5qcz8zZjk0Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBGdW5jdGlvbnNFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG5hbWUgPSAnRnVuY3Rpb25zRXJyb3InLCBjb250ZXh0KSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5uYW1lID0gbmFtZTtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGdW5jdGlvbnNGZXRjaEVycm9yIGV4dGVuZHMgRnVuY3Rpb25zRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xyXG4gICAgICAgIHN1cGVyKCdGYWlsZWQgdG8gc2VuZCBhIHJlcXVlc3QgdG8gdGhlIEVkZ2UgRnVuY3Rpb24nLCAnRnVuY3Rpb25zRmV0Y2hFcnJvcicsIGNvbnRleHQpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBGdW5jdGlvbnNSZWxheUVycm9yIGV4dGVuZHMgRnVuY3Rpb25zRXJyb3Ige1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCkge1xyXG4gICAgICAgIHN1cGVyKCdSZWxheSBFcnJvciBpbnZva2luZyB0aGUgRWRnZSBGdW5jdGlvbicsICdGdW5jdGlvbnNSZWxheUVycm9yJywgY29udGV4dCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGNsYXNzIEZ1bmN0aW9uc0h0dHBFcnJvciBleHRlbmRzIEZ1bmN0aW9uc0Vycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcclxuICAgICAgICBzdXBlcignRWRnZSBGdW5jdGlvbiByZXR1cm5lZCBhIG5vbi0yeHggc3RhdHVzIGNvZGUnLCAnRnVuY3Rpb25zSHR0cEVycm9yJywgY29udGV4dCk7XHJcbiAgICB9XHJcbn1cclxuLy8gRGVmaW5lIHRoZSBlbnVtIGZvciB0aGUgJ3JlZ2lvbicgcHJvcGVydHlcclxuZXhwb3J0IHZhciBGdW5jdGlvblJlZ2lvbjtcclxuKGZ1bmN0aW9uIChGdW5jdGlvblJlZ2lvbikge1xyXG4gICAgRnVuY3Rpb25SZWdpb25bXCJBbnlcIl0gPSBcImFueVwiO1xyXG4gICAgRnVuY3Rpb25SZWdpb25bXCJBcE5vcnRoZWFzdDFcIl0gPSBcImFwLW5vcnRoZWFzdC0xXCI7XHJcbiAgICBGdW5jdGlvblJlZ2lvbltcIkFwTm9ydGhlYXN0MlwiXSA9IFwiYXAtbm9ydGhlYXN0LTJcIjtcclxuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQXBTb3V0aDFcIl0gPSBcImFwLXNvdXRoLTFcIjtcclxuICAgIEZ1bmN0aW9uUmVnaW9uW1wiQXBTb3V0aGVhc3QxXCJdID0gXCJhcC1zb3V0aGVhc3QtMVwiO1xyXG4gICAgRnVuY3Rpb25SZWdpb25bXCJBcFNvdXRoZWFzdDJcIl0gPSBcImFwLXNvdXRoZWFzdC0yXCI7XHJcbiAgICBGdW5jdGlvblJlZ2lvbltcIkNhQ2VudHJhbDFcIl0gPSBcImNhLWNlbnRyYWwtMVwiO1xyXG4gICAgRnVuY3Rpb25SZWdpb25bXCJFdUNlbnRyYWwxXCJdID0gXCJldS1jZW50cmFsLTFcIjtcclxuICAgIEZ1bmN0aW9uUmVnaW9uW1wiRXVXZXN0MVwiXSA9IFwiZXUtd2VzdC0xXCI7XHJcbiAgICBGdW5jdGlvblJlZ2lvbltcIkV1V2VzdDJcIl0gPSBcImV1LXdlc3QtMlwiO1xyXG4gICAgRnVuY3Rpb25SZWdpb25bXCJFdVdlc3QzXCJdID0gXCJldS13ZXN0LTNcIjtcclxuICAgIEZ1bmN0aW9uUmVnaW9uW1wiU2FFYXN0MVwiXSA9IFwic2EtZWFzdC0xXCI7XHJcbiAgICBGdW5jdGlvblJlZ2lvbltcIlVzRWFzdDFcIl0gPSBcInVzLWVhc3QtMVwiO1xyXG4gICAgRnVuY3Rpb25SZWdpb25bXCJVc1dlc3QxXCJdID0gXCJ1cy13ZXN0LTFcIjtcclxuICAgIEZ1bmN0aW9uUmVnaW9uW1wiVXNXZXN0MlwiXSA9IFwidXMtd2VzdC0yXCI7XHJcbn0pKEZ1bmN0aW9uUmVnaW9uIHx8IChGdW5jdGlvblJlZ2lvbiA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVzLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/functions-js/dist/module/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/node-fetch/lib/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@supabase/node-fetch/lib/index.js ***!
  \********************************************************/
/***/ ((module, exports, __webpack_require__) => {

eval("\r\n\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n\r\nfunction _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }\r\n\r\nvar Stream = _interopDefault(__webpack_require__(/*! stream */ \"stream\"));\r\nvar http = _interopDefault(__webpack_require__(/*! http */ \"http\"));\r\nvar Url = _interopDefault(__webpack_require__(/*! url */ \"url\"));\r\nvar whatwgUrl = _interopDefault(__webpack_require__(/*! whatwg-url */ \"(ssr)/./node_modules/whatwg-url/lib/public-api.js\"));\r\nvar https = _interopDefault(__webpack_require__(/*! https */ \"https\"));\r\nvar zlib = _interopDefault(__webpack_require__(/*! zlib */ \"zlib\"));\r\n\r\n// Based on https://github.com/tmpvar/jsdom/blob/aa85b2abf07766ff7bf5c1f6daafb3726f2f2db5/lib/jsdom/living/blob.js\r\n\r\n// fix for \"Readable\" isn't a named export issue\r\nconst Readable = Stream.Readable;\r\n\r\nconst BUFFER = Symbol('buffer');\r\nconst TYPE = Symbol('type');\r\n\r\nclass Blob {\r\n\tconstructor() {\r\n\t\tthis[TYPE] = '';\r\n\r\n\t\tconst blobParts = arguments[0];\r\n\t\tconst options = arguments[1];\r\n\r\n\t\tconst buffers = [];\r\n\t\tlet size = 0;\r\n\r\n\t\tif (blobParts) {\r\n\t\t\tconst a = blobParts;\r\n\t\t\tconst length = Number(a.length);\r\n\t\t\tfor (let i = 0; i < length; i++) {\r\n\t\t\t\tconst element = a[i];\r\n\t\t\t\tlet buffer;\r\n\t\t\t\tif (element instanceof Buffer) {\r\n\t\t\t\t\tbuffer = element;\r\n\t\t\t\t} else if (ArrayBuffer.isView(element)) {\r\n\t\t\t\t\tbuffer = Buffer.from(element.buffer, element.byteOffset, element.byteLength);\r\n\t\t\t\t} else if (element instanceof ArrayBuffer) {\r\n\t\t\t\t\tbuffer = Buffer.from(element);\r\n\t\t\t\t} else if (element instanceof Blob) {\r\n\t\t\t\t\tbuffer = element[BUFFER];\r\n\t\t\t\t} else {\r\n\t\t\t\t\tbuffer = Buffer.from(typeof element === 'string' ? element : String(element));\r\n\t\t\t\t}\r\n\t\t\t\tsize += buffer.length;\r\n\t\t\t\tbuffers.push(buffer);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis[BUFFER] = Buffer.concat(buffers);\r\n\r\n\t\tlet type = options && options.type !== undefined && String(options.type).toLowerCase();\r\n\t\tif (type && !/[^\\u0020-\\u007E]/.test(type)) {\r\n\t\t\tthis[TYPE] = type;\r\n\t\t}\r\n\t}\r\n\tget size() {\r\n\t\treturn this[BUFFER].length;\r\n\t}\r\n\tget type() {\r\n\t\treturn this[TYPE];\r\n\t}\r\n\ttext() {\r\n\t\treturn Promise.resolve(this[BUFFER].toString());\r\n\t}\r\n\tarrayBuffer() {\r\n\t\tconst buf = this[BUFFER];\r\n\t\tconst ab = buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\r\n\t\treturn Promise.resolve(ab);\r\n\t}\r\n\tstream() {\r\n\t\tconst readable = new Readable();\r\n\t\treadable._read = function () {};\r\n\t\treadable.push(this[BUFFER]);\r\n\t\treadable.push(null);\r\n\t\treturn readable;\r\n\t}\r\n\ttoString() {\r\n\t\treturn '[object Blob]';\r\n\t}\r\n\tslice() {\r\n\t\tconst size = this.size;\r\n\r\n\t\tconst start = arguments[0];\r\n\t\tconst end = arguments[1];\r\n\t\tlet relativeStart, relativeEnd;\r\n\t\tif (start === undefined) {\r\n\t\t\trelativeStart = 0;\r\n\t\t} else if (start < 0) {\r\n\t\t\trelativeStart = Math.max(size + start, 0);\r\n\t\t} else {\r\n\t\t\trelativeStart = Math.min(start, size);\r\n\t\t}\r\n\t\tif (end === undefined) {\r\n\t\t\trelativeEnd = size;\r\n\t\t} else if (end < 0) {\r\n\t\t\trelativeEnd = Math.max(size + end, 0);\r\n\t\t} else {\r\n\t\t\trelativeEnd = Math.min(end, size);\r\n\t\t}\r\n\t\tconst span = Math.max(relativeEnd - relativeStart, 0);\r\n\r\n\t\tconst buffer = this[BUFFER];\r\n\t\tconst slicedBuffer = buffer.slice(relativeStart, relativeStart + span);\r\n\t\tconst blob = new Blob([], { type: arguments[2] });\r\n\t\tblob[BUFFER] = slicedBuffer;\r\n\t\treturn blob;\r\n\t}\r\n}\r\n\r\nObject.defineProperties(Blob.prototype, {\r\n\tsize: { enumerable: true },\r\n\ttype: { enumerable: true },\r\n\tslice: { enumerable: true }\r\n});\r\n\r\nObject.defineProperty(Blob.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Blob',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\n/**\r\n * fetch-error.js\r\n *\r\n * FetchError interface for operational errors\r\n */\r\n\r\n/**\r\n * Create FetchError instance\r\n *\r\n * @param   String      message      Error message for human\r\n * @param   String      type         Error type for machine\r\n * @param   String      systemError  For Node.js system error\r\n * @return  FetchError\r\n */\r\nfunction FetchError(message, type, systemError) {\r\n  Error.call(this, message);\r\n\r\n  this.message = message;\r\n  this.type = type;\r\n\r\n  // when err.type is `system`, err.code contains system error code\r\n  if (systemError) {\r\n    this.code = this.errno = systemError.code;\r\n  }\r\n\r\n  // hide custom error implementation details from end-users\r\n  Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\nFetchError.prototype = Object.create(Error.prototype);\r\nFetchError.prototype.constructor = FetchError;\r\nFetchError.prototype.name = 'FetchError';\r\n\r\nlet convert;\r\n\r\nconst INTERNALS = Symbol('Body internals');\r\n\r\n// fix an issue where \"PassThrough\" isn't a named export for node <10\r\nconst PassThrough = Stream.PassThrough;\r\n\r\n/**\r\n * Body mixin\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#body\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\r\nfunction Body(body) {\r\n\tvar _this = this;\r\n\r\n\tvar _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\r\n\t    _ref$size = _ref.size;\r\n\r\n\tlet size = _ref$size === undefined ? 0 : _ref$size;\r\n\tvar _ref$timeout = _ref.timeout;\r\n\tlet timeout = _ref$timeout === undefined ? 0 : _ref$timeout;\r\n\r\n\tif (body == null) {\r\n\t\t// body is undefined or null\r\n\t\tbody = null;\r\n\t} else if (isURLSearchParams(body)) {\r\n\t\t// body is a URLSearchParams\r\n\t\tbody = Buffer.from(body.toString());\r\n\t} else if (isBlob(body)) ; else if (Buffer.isBuffer(body)) ; else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\r\n\t\t// body is ArrayBuffer\r\n\t\tbody = Buffer.from(body);\r\n\t} else if (ArrayBuffer.isView(body)) {\r\n\t\t// body is ArrayBufferView\r\n\t\tbody = Buffer.from(body.buffer, body.byteOffset, body.byteLength);\r\n\t} else if (body instanceof Stream) ; else {\r\n\t\t// none of the above\r\n\t\t// coerce to string then buffer\r\n\t\tbody = Buffer.from(String(body));\r\n\t}\r\n\tthis[INTERNALS] = {\r\n\t\tbody,\r\n\t\tdisturbed: false,\r\n\t\terror: null\r\n\t};\r\n\tthis.size = size;\r\n\tthis.timeout = timeout;\r\n\r\n\tif (body instanceof Stream) {\r\n\t\tbody.on('error', function (err) {\r\n\t\t\tconst error = err.name === 'AbortError' ? err : new FetchError(`Invalid response body while trying to fetch ${_this.url}: ${err.message}`, 'system', err);\r\n\t\t\t_this[INTERNALS].error = error;\r\n\t\t});\r\n\t}\r\n}\r\n\r\nBody.prototype = {\r\n\tget body() {\r\n\t\treturn this[INTERNALS].body;\r\n\t},\r\n\r\n\tget bodyUsed() {\r\n\t\treturn this[INTERNALS].disturbed;\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as ArrayBuffer\r\n  *\r\n  * @return  Promise\r\n  */\r\n\tarrayBuffer() {\r\n\t\treturn consumeBody.call(this).then(function (buf) {\r\n\t\t\treturn buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Return raw response as Blob\r\n  *\r\n  * @return Promise\r\n  */\r\n\tblob() {\r\n\t\tlet ct = this.headers && this.headers.get('content-type') || '';\r\n\t\treturn consumeBody.call(this).then(function (buf) {\r\n\t\t\treturn Object.assign(\r\n\t\t\t// Prevent copying\r\n\t\t\tnew Blob([], {\r\n\t\t\t\ttype: ct.toLowerCase()\r\n\t\t\t}), {\r\n\t\t\t\t[BUFFER]: buf\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as json\r\n  *\r\n  * @return  Promise\r\n  */\r\n\tjson() {\r\n\t\tvar _this2 = this;\r\n\r\n\t\treturn consumeBody.call(this).then(function (buffer) {\r\n\t\t\ttry {\r\n\t\t\t\treturn JSON.parse(buffer.toString());\r\n\t\t\t} catch (err) {\r\n\t\t\t\treturn Body.Promise.reject(new FetchError(`invalid json response body at ${_this2.url} reason: ${err.message}`, 'invalid-json'));\r\n\t\t\t}\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as text\r\n  *\r\n  * @return  Promise\r\n  */\r\n\ttext() {\r\n\t\treturn consumeBody.call(this).then(function (buffer) {\r\n\t\t\treturn buffer.toString();\r\n\t\t});\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as buffer (non-spec api)\r\n  *\r\n  * @return  Promise\r\n  */\r\n\tbuffer() {\r\n\t\treturn consumeBody.call(this);\r\n\t},\r\n\r\n\t/**\r\n  * Decode response as text, while automatically detecting the encoding and\r\n  * trying to decode to UTF-8 (non-spec api)\r\n  *\r\n  * @return  Promise\r\n  */\r\n\ttextConverted() {\r\n\t\tvar _this3 = this;\r\n\r\n\t\treturn consumeBody.call(this).then(function (buffer) {\r\n\t\t\treturn convertBody(buffer, _this3.headers);\r\n\t\t});\r\n\t}\r\n};\r\n\r\n// In browsers, all properties are enumerable.\r\nObject.defineProperties(Body.prototype, {\r\n\tbody: { enumerable: true },\r\n\tbodyUsed: { enumerable: true },\r\n\tarrayBuffer: { enumerable: true },\r\n\tblob: { enumerable: true },\r\n\tjson: { enumerable: true },\r\n\ttext: { enumerable: true }\r\n});\r\n\r\nBody.mixIn = function (proto) {\r\n\tfor (const name of Object.getOwnPropertyNames(Body.prototype)) {\r\n\t\t// istanbul ignore else: future proof\r\n\t\tif (!(name in proto)) {\r\n\t\t\tconst desc = Object.getOwnPropertyDescriptor(Body.prototype, name);\r\n\t\t\tObject.defineProperty(proto, name, desc);\r\n\t\t}\r\n\t}\r\n};\r\n\r\n/**\r\n * Consume and convert an entire Body to a Buffer.\r\n *\r\n * Ref: https://fetch.spec.whatwg.org/#concept-body-consume-body\r\n *\r\n * @return  Promise\r\n */\r\nfunction consumeBody() {\r\n\tvar _this4 = this;\r\n\r\n\tif (this[INTERNALS].disturbed) {\r\n\t\treturn Body.Promise.reject(new TypeError(`body used already for: ${this.url}`));\r\n\t}\r\n\r\n\tthis[INTERNALS].disturbed = true;\r\n\r\n\tif (this[INTERNALS].error) {\r\n\t\treturn Body.Promise.reject(this[INTERNALS].error);\r\n\t}\r\n\r\n\tlet body = this.body;\r\n\r\n\t// body is null\r\n\tif (body === null) {\r\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\r\n\t}\r\n\r\n\t// body is blob\r\n\tif (isBlob(body)) {\r\n\t\tbody = body.stream();\r\n\t}\r\n\r\n\t// body is buffer\r\n\tif (Buffer.isBuffer(body)) {\r\n\t\treturn Body.Promise.resolve(body);\r\n\t}\r\n\r\n\t// istanbul ignore if: should never happen\r\n\tif (!(body instanceof Stream)) {\r\n\t\treturn Body.Promise.resolve(Buffer.alloc(0));\r\n\t}\r\n\r\n\t// body is stream\r\n\t// get ready to actually consume the body\r\n\tlet accum = [];\r\n\tlet accumBytes = 0;\r\n\tlet abort = false;\r\n\r\n\treturn new Body.Promise(function (resolve, reject) {\r\n\t\tlet resTimeout;\r\n\r\n\t\t// allow timeout on slow response body\r\n\t\tif (_this4.timeout) {\r\n\t\t\tresTimeout = setTimeout(function () {\r\n\t\t\t\tabort = true;\r\n\t\t\t\treject(new FetchError(`Response timeout while trying to fetch ${_this4.url} (over ${_this4.timeout}ms)`, 'body-timeout'));\r\n\t\t\t}, _this4.timeout);\r\n\t\t}\r\n\r\n\t\t// handle stream errors\r\n\t\tbody.on('error', function (err) {\r\n\t\t\tif (err.name === 'AbortError') {\r\n\t\t\t\t// if the request was aborted, reject with this Error\r\n\t\t\t\tabort = true;\r\n\t\t\t\treject(err);\r\n\t\t\t} else {\r\n\t\t\t\t// other errors, such as incorrect content-encoding\r\n\t\t\t\treject(new FetchError(`Invalid response body while trying to fetch ${_this4.url}: ${err.message}`, 'system', err));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\tbody.on('data', function (chunk) {\r\n\t\t\tif (abort || chunk === null) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (_this4.size && accumBytes + chunk.length > _this4.size) {\r\n\t\t\t\tabort = true;\r\n\t\t\t\treject(new FetchError(`content size at ${_this4.url} over limit: ${_this4.size}`, 'max-size'));\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\taccumBytes += chunk.length;\r\n\t\t\taccum.push(chunk);\r\n\t\t});\r\n\r\n\t\tbody.on('end', function () {\r\n\t\t\tif (abort) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tclearTimeout(resTimeout);\r\n\r\n\t\t\ttry {\r\n\t\t\t\tresolve(Buffer.concat(accum, accumBytes));\r\n\t\t\t} catch (err) {\r\n\t\t\t\t// handle streams that have accumulated too much data (issue #414)\r\n\t\t\t\treject(new FetchError(`Could not create Buffer from response body for ${_this4.url}: ${err.message}`, 'system', err));\r\n\t\t\t}\r\n\t\t});\r\n\t});\r\n}\r\n\r\n/**\r\n * Detect buffer encoding and convert to target encoding\r\n * ref: http://www.w3.org/TR/2011/WD-html5-20110113/parsing.html#determining-the-character-encoding\r\n *\r\n * @param   Buffer  buffer    Incoming buffer\r\n * @param   String  encoding  Target encoding\r\n * @return  String\r\n */\r\nfunction convertBody(buffer, headers) {\r\n\t{\r\n\t\tthrow new Error('The package `encoding` must be installed to use the textConverted() function');\r\n\t}\r\n\r\n\tconst ct = headers.get('content-type');\r\n\tlet charset = 'utf-8';\r\n\tlet res, str;\r\n\r\n\t// header\r\n\tif (ct) {\r\n\t\tres = /charset=([^;]*)/i.exec(ct);\r\n\t}\r\n\r\n\t// no charset in content type, peek at response body for at most 1024 bytes\r\n\tstr = buffer.slice(0, 1024).toString();\r\n\r\n\t// html5\r\n\tif (!res && str) {\r\n\t\tres = /<meta.+?charset=(['\"])(.+?)\\1/i.exec(str);\r\n\t}\r\n\r\n\t// html4\r\n\tif (!res && str) {\r\n\t\tres = /<meta[\\s]+?http-equiv=(['\"])content-type\\1[\\s]+?content=(['\"])(.+?)\\2/i.exec(str);\r\n\t\tif (!res) {\r\n\t\t\tres = /<meta[\\s]+?content=(['\"])(.+?)\\1[\\s]+?http-equiv=(['\"])content-type\\3/i.exec(str);\r\n\t\t\tif (res) {\r\n\t\t\t\tres.pop(); // drop last quote\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tif (res) {\r\n\t\t\tres = /charset=(.*)/i.exec(res.pop());\r\n\t\t}\r\n\t}\r\n\r\n\t// xml\r\n\tif (!res && str) {\r\n\t\tres = /<\\?xml.+?encoding=(['\"])(.+?)\\1/i.exec(str);\r\n\t}\r\n\r\n\t// found charset\r\n\tif (res) {\r\n\t\tcharset = res.pop();\r\n\r\n\t\t// prevent decode issues when sites use incorrect encoding\r\n\t\t// ref: https://hsivonen.fi/encoding-menu/\r\n\t\tif (charset === 'gb2312' || charset === 'gbk') {\r\n\t\t\tcharset = 'gb18030';\r\n\t\t}\r\n\t}\r\n\r\n\t// turn raw buffers into a single utf-8 buffer\r\n\treturn convert(buffer, 'UTF-8', charset).toString();\r\n}\r\n\r\n/**\r\n * Detect a URLSearchParams object\r\n * ref: https://github.com/bitinn/node-fetch/issues/296#issuecomment-307598143\r\n *\r\n * @param   Object  obj     Object to detect by type or brand\r\n * @return  String\r\n */\r\nfunction isURLSearchParams(obj) {\r\n\t// Duck-typing as a necessary condition.\r\n\tif (typeof obj !== 'object' || typeof obj.append !== 'function' || typeof obj.delete !== 'function' || typeof obj.get !== 'function' || typeof obj.getAll !== 'function' || typeof obj.has !== 'function' || typeof obj.set !== 'function') {\r\n\t\treturn false;\r\n\t}\r\n\r\n\t// Brand-checking and more duck-typing as optional condition.\r\n\treturn obj.constructor.name === 'URLSearchParams' || Object.prototype.toString.call(obj) === '[object URLSearchParams]' || typeof obj.sort === 'function';\r\n}\r\n\r\n/**\r\n * Check if `obj` is a W3C `Blob` object (which `File` inherits from)\r\n * @param  {*} obj\r\n * @return {boolean}\r\n */\r\nfunction isBlob(obj) {\r\n\treturn typeof obj === 'object' && typeof obj.arrayBuffer === 'function' && typeof obj.type === 'string' && typeof obj.stream === 'function' && typeof obj.constructor === 'function' && typeof obj.constructor.name === 'string' && /^(Blob|File)$/.test(obj.constructor.name) && /^(Blob|File)$/.test(obj[Symbol.toStringTag]);\r\n}\r\n\r\n/**\r\n * Clone body given Res/Req instance\r\n *\r\n * @param   Mixed  instance  Response or Request instance\r\n * @return  Mixed\r\n */\r\nfunction clone(instance) {\r\n\tlet p1, p2;\r\n\tlet body = instance.body;\r\n\r\n\t// don't allow cloning a used body\r\n\tif (instance.bodyUsed) {\r\n\t\tthrow new Error('cannot clone body after it is used');\r\n\t}\r\n\r\n\t// check that body is a stream and not form-data object\r\n\t// note: we can't clone the form-data object without having it as a dependency\r\n\tif (body instanceof Stream && typeof body.getBoundary !== 'function') {\r\n\t\t// tee instance body\r\n\t\tp1 = new PassThrough();\r\n\t\tp2 = new PassThrough();\r\n\t\tbody.pipe(p1);\r\n\t\tbody.pipe(p2);\r\n\t\t// set instance body to teed body and return the other teed body\r\n\t\tinstance[INTERNALS].body = p1;\r\n\t\tbody = p2;\r\n\t}\r\n\r\n\treturn body;\r\n}\r\n\r\n/**\r\n * Performs the operation \"extract a `Content-Type` value from |object|\" as\r\n * specified in the specification:\r\n * https://fetch.spec.whatwg.org/#concept-bodyinit-extract\r\n *\r\n * This function assumes that instance.body is present.\r\n *\r\n * @param   Mixed  instance  Any options.body input\r\n */\r\nfunction extractContentType(body) {\r\n\tif (body === null) {\r\n\t\t// body is null\r\n\t\treturn null;\r\n\t} else if (typeof body === 'string') {\r\n\t\t// body is string\r\n\t\treturn 'text/plain;charset=UTF-8';\r\n\t} else if (isURLSearchParams(body)) {\r\n\t\t// body is a URLSearchParams\r\n\t\treturn 'application/x-www-form-urlencoded;charset=UTF-8';\r\n\t} else if (isBlob(body)) {\r\n\t\t// body is blob\r\n\t\treturn body.type || null;\r\n\t} else if (Buffer.isBuffer(body)) {\r\n\t\t// body is buffer\r\n\t\treturn null;\r\n\t} else if (Object.prototype.toString.call(body) === '[object ArrayBuffer]') {\r\n\t\t// body is ArrayBuffer\r\n\t\treturn null;\r\n\t} else if (ArrayBuffer.isView(body)) {\r\n\t\t// body is ArrayBufferView\r\n\t\treturn null;\r\n\t} else if (typeof body.getBoundary === 'function') {\r\n\t\t// detect form data input from form-data module\r\n\t\treturn `multipart/form-data;boundary=${body.getBoundary()}`;\r\n\t} else if (body instanceof Stream) {\r\n\t\t// body is stream\r\n\t\t// can't really do much about this\r\n\t\treturn null;\r\n\t} else {\r\n\t\t// Body constructor defaults other things to string\r\n\t\treturn 'text/plain;charset=UTF-8';\r\n\t}\r\n}\r\n\r\n/**\r\n * The Fetch Standard treats this as if \"total bytes\" is a property on the body.\r\n * For us, we have to explicitly get it with a function.\r\n *\r\n * ref: https://fetch.spec.whatwg.org/#concept-body-total-bytes\r\n *\r\n * @param   Body    instance   Instance of Body\r\n * @return  Number?            Number of bytes, or null if not possible\r\n */\r\nfunction getTotalBytes(instance) {\r\n\tconst body = instance.body;\r\n\r\n\r\n\tif (body === null) {\r\n\t\t// body is null\r\n\t\treturn 0;\r\n\t} else if (isBlob(body)) {\r\n\t\treturn body.size;\r\n\t} else if (Buffer.isBuffer(body)) {\r\n\t\t// body is buffer\r\n\t\treturn body.length;\r\n\t} else if (body && typeof body.getLengthSync === 'function') {\r\n\t\t// detect form data input from form-data module\r\n\t\tif (body._lengthRetrievers && body._lengthRetrievers.length == 0 || // 1.x\r\n\t\tbody.hasKnownLength && body.hasKnownLength()) {\r\n\t\t\t// 2.x\r\n\t\t\treturn body.getLengthSync();\r\n\t\t}\r\n\t\treturn null;\r\n\t} else {\r\n\t\t// body is stream\r\n\t\treturn null;\r\n\t}\r\n}\r\n\r\n/**\r\n * Write a Body to a Node.js WritableStream (e.g. http.Request) object.\r\n *\r\n * @param   Body    instance   Instance of Body\r\n * @return  Void\r\n */\r\nfunction writeToStream(dest, instance) {\r\n\tconst body = instance.body;\r\n\r\n\r\n\tif (body === null) {\r\n\t\t// body is null\r\n\t\tdest.end();\r\n\t} else if (isBlob(body)) {\r\n\t\tbody.stream().pipe(dest);\r\n\t} else if (Buffer.isBuffer(body)) {\r\n\t\t// body is buffer\r\n\t\tdest.write(body);\r\n\t\tdest.end();\r\n\t} else {\r\n\t\t// body is stream\r\n\t\tbody.pipe(dest);\r\n\t}\r\n}\r\n\r\n// expose Promise\r\nBody.Promise = global.Promise;\r\n\r\n/**\r\n * headers.js\r\n *\r\n * Headers class offers convenient helpers\r\n */\r\n\r\nconst invalidTokenRegex = /[^\\^_`a-zA-Z\\-0-9!#$%&'*+.|~]/;\r\nconst invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/;\r\n\r\nfunction validateName(name) {\r\n\tname = `${name}`;\r\n\tif (invalidTokenRegex.test(name) || name === '') {\r\n\t\tthrow new TypeError(`${name} is not a legal HTTP header name`);\r\n\t}\r\n}\r\n\r\nfunction validateValue(value) {\r\n\tvalue = `${value}`;\r\n\tif (invalidHeaderCharRegex.test(value)) {\r\n\t\tthrow new TypeError(`${value} is not a legal HTTP header value`);\r\n\t}\r\n}\r\n\r\n/**\r\n * Find the key in the map object given a header name.\r\n *\r\n * Returns undefined if not found.\r\n *\r\n * @param   String  name  Header name\r\n * @return  String|Undefined\r\n */\r\nfunction find(map, name) {\r\n\tname = name.toLowerCase();\r\n\tfor (const key in map) {\r\n\t\tif (key.toLowerCase() === name) {\r\n\t\t\treturn key;\r\n\t\t}\r\n\t}\r\n\treturn undefined;\r\n}\r\n\r\nconst MAP = Symbol('map');\r\nclass Headers {\r\n\t/**\r\n  * Headers class\r\n  *\r\n  * @param   Object  headers  Response headers\r\n  * @return  Void\r\n  */\r\n\tconstructor() {\r\n\t\tlet init = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : undefined;\r\n\r\n\t\tthis[MAP] = Object.create(null);\r\n\r\n\t\tif (init instanceof Headers) {\r\n\t\t\tconst rawHeaders = init.raw();\r\n\t\t\tconst headerNames = Object.keys(rawHeaders);\r\n\r\n\t\t\tfor (const headerName of headerNames) {\r\n\t\t\t\tfor (const value of rawHeaders[headerName]) {\r\n\t\t\t\t\tthis.append(headerName, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\t// We don't worry about converting prop to ByteString here as append()\r\n\t\t// will handle it.\r\n\t\tif (init == null) ; else if (typeof init === 'object') {\r\n\t\t\tconst method = init[Symbol.iterator];\r\n\t\t\tif (method != null) {\r\n\t\t\t\tif (typeof method !== 'function') {\r\n\t\t\t\t\tthrow new TypeError('Header pairs must be iterable');\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// sequence<sequence<ByteString>>\r\n\t\t\t\t// Note: per spec we have to first exhaust the lists then process them\r\n\t\t\t\tconst pairs = [];\r\n\t\t\t\tfor (const pair of init) {\r\n\t\t\t\t\tif (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\r\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be iterable');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tpairs.push(Array.from(pair));\r\n\t\t\t\t}\r\n\r\n\t\t\t\tfor (const pair of pairs) {\r\n\t\t\t\t\tif (pair.length !== 2) {\r\n\t\t\t\t\t\tthrow new TypeError('Each header pair must be a name/value tuple');\r\n\t\t\t\t\t}\r\n\t\t\t\t\tthis.append(pair[0], pair[1]);\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// record<ByteString, ByteString>\r\n\t\t\t\tfor (const key of Object.keys(init)) {\r\n\t\t\t\t\tconst value = init[key];\r\n\t\t\t\t\tthis.append(key, value);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new TypeError('Provided initializer must be an object');\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Return combined header value given name\r\n  *\r\n  * @param   String  name  Header name\r\n  * @return  Mixed\r\n  */\r\n\tget(name) {\r\n\t\tname = `${name}`;\r\n\t\tvalidateName(name);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tif (key === undefined) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\r\n\t\treturn this[MAP][key].join(', ');\r\n\t}\r\n\r\n\t/**\r\n  * Iterate over all headers\r\n  *\r\n  * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\r\n  * @param   Boolean   thisArg   `this` context for callback function\r\n  * @return  Void\r\n  */\r\n\tforEach(callback) {\r\n\t\tlet thisArg = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\r\n\r\n\t\tlet pairs = getHeaders(this);\r\n\t\tlet i = 0;\r\n\t\twhile (i < pairs.length) {\r\n\t\t\tvar _pairs$i = pairs[i];\r\n\t\t\tconst name = _pairs$i[0],\r\n\t\t\t      value = _pairs$i[1];\r\n\r\n\t\t\tcallback.call(thisArg, value, name, this);\r\n\t\t\tpairs = getHeaders(this);\r\n\t\t\ti++;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Overwrite header values given name\r\n  *\r\n  * @param   String  name   Header name\r\n  * @param   String  value  Header value\r\n  * @return  Void\r\n  */\r\n\tset(name, value) {\r\n\t\tname = `${name}`;\r\n\t\tvalue = `${value}`;\r\n\t\tvalidateName(name);\r\n\t\tvalidateValue(value);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tthis[MAP][key !== undefined ? key : name] = [value];\r\n\t}\r\n\r\n\t/**\r\n  * Append a value onto existing header\r\n  *\r\n  * @param   String  name   Header name\r\n  * @param   String  value  Header value\r\n  * @return  Void\r\n  */\r\n\tappend(name, value) {\r\n\t\tname = `${name}`;\r\n\t\tvalue = `${value}`;\r\n\t\tvalidateName(name);\r\n\t\tvalidateValue(value);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tif (key !== undefined) {\r\n\t\t\tthis[MAP][key].push(value);\r\n\t\t} else {\r\n\t\t\tthis[MAP][name] = [value];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Check for header name existence\r\n  *\r\n  * @param   String   name  Header name\r\n  * @return  Boolean\r\n  */\r\n\thas(name) {\r\n\t\tname = `${name}`;\r\n\t\tvalidateName(name);\r\n\t\treturn find(this[MAP], name) !== undefined;\r\n\t}\r\n\r\n\t/**\r\n  * Delete all header values given name\r\n  *\r\n  * @param   String  name  Header name\r\n  * @return  Void\r\n  */\r\n\tdelete(name) {\r\n\t\tname = `${name}`;\r\n\t\tvalidateName(name);\r\n\t\tconst key = find(this[MAP], name);\r\n\t\tif (key !== undefined) {\r\n\t\t\tdelete this[MAP][key];\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n  * Return raw headers (non-spec api)\r\n  *\r\n  * @return  Object\r\n  */\r\n\traw() {\r\n\t\treturn this[MAP];\r\n\t}\r\n\r\n\t/**\r\n  * Get an iterator on keys.\r\n  *\r\n  * @return  Iterator\r\n  */\r\n\tkeys() {\r\n\t\treturn createHeadersIterator(this, 'key');\r\n\t}\r\n\r\n\t/**\r\n  * Get an iterator on values.\r\n  *\r\n  * @return  Iterator\r\n  */\r\n\tvalues() {\r\n\t\treturn createHeadersIterator(this, 'value');\r\n\t}\r\n\r\n\t/**\r\n  * Get an iterator on entries.\r\n  *\r\n  * This is the default iterator of the Headers object.\r\n  *\r\n  * @return  Iterator\r\n  */\r\n\t[Symbol.iterator]() {\r\n\t\treturn createHeadersIterator(this, 'key+value');\r\n\t}\r\n}\r\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\r\n\r\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Headers',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperties(Headers.prototype, {\r\n\tget: { enumerable: true },\r\n\tforEach: { enumerable: true },\r\n\tset: { enumerable: true },\r\n\tappend: { enumerable: true },\r\n\thas: { enumerable: true },\r\n\tdelete: { enumerable: true },\r\n\tkeys: { enumerable: true },\r\n\tvalues: { enumerable: true },\r\n\tentries: { enumerable: true }\r\n});\r\n\r\nfunction getHeaders(headers) {\r\n\tlet kind = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'key+value';\r\n\r\n\tconst keys = Object.keys(headers[MAP]).sort();\r\n\treturn keys.map(kind === 'key' ? function (k) {\r\n\t\treturn k.toLowerCase();\r\n\t} : kind === 'value' ? function (k) {\r\n\t\treturn headers[MAP][k].join(', ');\r\n\t} : function (k) {\r\n\t\treturn [k.toLowerCase(), headers[MAP][k].join(', ')];\r\n\t});\r\n}\r\n\r\nconst INTERNAL = Symbol('internal');\r\n\r\nfunction createHeadersIterator(target, kind) {\r\n\tconst iterator = Object.create(HeadersIteratorPrototype);\r\n\titerator[INTERNAL] = {\r\n\t\ttarget,\r\n\t\tkind,\r\n\t\tindex: 0\r\n\t};\r\n\treturn iterator;\r\n}\r\n\r\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\r\n\tnext() {\r\n\t\t// istanbul ignore if\r\n\t\tif (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\r\n\t\t\tthrow new TypeError('Value of `this` is not a HeadersIterator');\r\n\t\t}\r\n\r\n\t\tvar _INTERNAL = this[INTERNAL];\r\n\t\tconst target = _INTERNAL.target,\r\n\t\t      kind = _INTERNAL.kind,\r\n\t\t      index = _INTERNAL.index;\r\n\r\n\t\tconst values = getHeaders(target, kind);\r\n\t\tconst len = values.length;\r\n\t\tif (index >= len) {\r\n\t\t\treturn {\r\n\t\t\t\tvalue: undefined,\r\n\t\t\t\tdone: true\r\n\t\t\t};\r\n\t\t}\r\n\r\n\t\tthis[INTERNAL].index = index + 1;\r\n\r\n\t\treturn {\r\n\t\t\tvalue: values[index],\r\n\t\t\tdone: false\r\n\t\t};\r\n\t}\r\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\r\n\r\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\r\n\tvalue: 'HeadersIterator',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\n/**\r\n * Export the Headers object in a form that Node.js can consume.\r\n *\r\n * @param   Headers  headers\r\n * @return  Object\r\n */\r\nfunction exportNodeCompatibleHeaders(headers) {\r\n\tconst obj = Object.assign({ __proto__: null }, headers[MAP]);\r\n\r\n\t// http.request() only supports string as Host header. This hack makes\r\n\t// specifying custom Host header possible.\r\n\tconst hostHeaderKey = find(headers[MAP], 'Host');\r\n\tif (hostHeaderKey !== undefined) {\r\n\t\tobj[hostHeaderKey] = obj[hostHeaderKey][0];\r\n\t}\r\n\r\n\treturn obj;\r\n}\r\n\r\n/**\r\n * Create a Headers object from an object of headers, ignoring those that do\r\n * not conform to HTTP grammar productions.\r\n *\r\n * @param   Object  obj  Object of headers\r\n * @return  Headers\r\n */\r\nfunction createHeadersLenient(obj) {\r\n\tconst headers = new Headers();\r\n\tfor (const name of Object.keys(obj)) {\r\n\t\tif (invalidTokenRegex.test(name)) {\r\n\t\t\tcontinue;\r\n\t\t}\r\n\t\tif (Array.isArray(obj[name])) {\r\n\t\t\tfor (const val of obj[name]) {\r\n\t\t\t\tif (invalidHeaderCharRegex.test(val)) {\r\n\t\t\t\t\tcontinue;\r\n\t\t\t\t}\r\n\t\t\t\tif (headers[MAP][name] === undefined) {\r\n\t\t\t\t\theaders[MAP][name] = [val];\r\n\t\t\t\t} else {\r\n\t\t\t\t\theaders[MAP][name].push(val);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t} else if (!invalidHeaderCharRegex.test(obj[name])) {\r\n\t\t\theaders[MAP][name] = [obj[name]];\r\n\t\t}\r\n\t}\r\n\treturn headers;\r\n}\r\n\r\nconst INTERNALS$1 = Symbol('Response internals');\r\n\r\n// fix an issue where \"STATUS_CODES\" aren't a named export for node <10\r\nconst STATUS_CODES = http.STATUS_CODES;\r\n\r\n/**\r\n * Response class\r\n *\r\n * @param   Stream  body  Readable stream\r\n * @param   Object  opts  Response options\r\n * @return  Void\r\n */\r\nclass Response {\r\n\tconstructor() {\r\n\t\tlet body = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\r\n\t\tlet opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n\t\tBody.call(this, body, opts);\r\n\r\n\t\tconst status = opts.status || 200;\r\n\t\tconst headers = new Headers(opts.headers);\r\n\r\n\t\tif (body != null && !headers.has('Content-Type')) {\r\n\t\t\tconst contentType = extractContentType(body);\r\n\t\t\tif (contentType) {\r\n\t\t\t\theaders.append('Content-Type', contentType);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tthis[INTERNALS$1] = {\r\n\t\t\turl: opts.url,\r\n\t\t\tstatus,\r\n\t\t\tstatusText: opts.statusText || STATUS_CODES[status],\r\n\t\t\theaders,\r\n\t\t\tcounter: opts.counter\r\n\t\t};\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn this[INTERNALS$1].url || '';\r\n\t}\r\n\r\n\tget status() {\r\n\t\treturn this[INTERNALS$1].status;\r\n\t}\r\n\r\n\t/**\r\n  * Convenience property representing if the request ended normally\r\n  */\r\n\tget ok() {\r\n\t\treturn this[INTERNALS$1].status >= 200 && this[INTERNALS$1].status < 300;\r\n\t}\r\n\r\n\tget redirected() {\r\n\t\treturn this[INTERNALS$1].counter > 0;\r\n\t}\r\n\r\n\tget statusText() {\r\n\t\treturn this[INTERNALS$1].statusText;\r\n\t}\r\n\r\n\tget headers() {\r\n\t\treturn this[INTERNALS$1].headers;\r\n\t}\r\n\r\n\t/**\r\n  * Clone this response\r\n  *\r\n  * @return  Response\r\n  */\r\n\tclone() {\r\n\t\treturn new Response(clone(this), {\r\n\t\t\turl: this.url,\r\n\t\t\tstatus: this.status,\r\n\t\t\tstatusText: this.statusText,\r\n\t\t\theaders: this.headers,\r\n\t\t\tok: this.ok,\r\n\t\t\tredirected: this.redirected\r\n\t\t});\r\n\t}\r\n}\r\n\r\nBody.mixIn(Response.prototype);\r\n\r\nObject.defineProperties(Response.prototype, {\r\n\turl: { enumerable: true },\r\n\tstatus: { enumerable: true },\r\n\tok: { enumerable: true },\r\n\tredirected: { enumerable: true },\r\n\tstatusText: { enumerable: true },\r\n\theaders: { enumerable: true },\r\n\tclone: { enumerable: true }\r\n});\r\n\r\nObject.defineProperty(Response.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Response',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nconst INTERNALS$2 = Symbol('Request internals');\r\nconst URL = Url.URL || whatwgUrl.URL;\r\n\r\n// fix an issue where \"format\", \"parse\" aren't a named export for node <10\r\nconst parse_url = Url.parse;\r\nconst format_url = Url.format;\r\n\r\n/**\r\n * Wrapper around `new URL` to handle arbitrary URLs\r\n *\r\n * @param  {string} urlStr\r\n * @return {void}\r\n */\r\nfunction parseURL(urlStr) {\r\n\t/*\r\n \tCheck whether the URL is absolute or not\r\n \t\tScheme: https://tools.ietf.org/html/rfc3986#section-3.1\r\n \tAbsolute URL: https://tools.ietf.org/html/rfc3986#section-4.3\r\n */\r\n\tif (/^[a-zA-Z][a-zA-Z\\d+\\-.]*:/.exec(urlStr)) {\r\n\t\turlStr = new URL(urlStr).toString();\r\n\t}\r\n\r\n\t// Fallback to old implementation for arbitrary URLs\r\n\treturn parse_url(urlStr);\r\n}\r\n\r\nconst streamDestructionSupported = 'destroy' in Stream.Readable.prototype;\r\n\r\n/**\r\n * Check if a value is an instance of Request.\r\n *\r\n * @param   Mixed   input\r\n * @return  Boolean\r\n */\r\nfunction isRequest(input) {\r\n\treturn typeof input === 'object' && typeof input[INTERNALS$2] === 'object';\r\n}\r\n\r\nfunction isAbortSignal(signal) {\r\n\tconst proto = signal && typeof signal === 'object' && Object.getPrototypeOf(signal);\r\n\treturn !!(proto && proto.constructor.name === 'AbortSignal');\r\n}\r\n\r\n/**\r\n * Request class\r\n *\r\n * @param   Mixed   input  Url or Request instance\r\n * @param   Object  init   Custom options\r\n * @return  Void\r\n */\r\nclass Request {\r\n\tconstructor(input) {\r\n\t\tlet init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\r\n\r\n\t\tlet parsedURL;\r\n\r\n\t\t// normalize input\r\n\t\tif (!isRequest(input)) {\r\n\t\t\tif (input && input.href) {\r\n\t\t\t\t// in order to support Node.js' Url objects; though WHATWG's URL objects\r\n\t\t\t\t// will fall into this branch also (since their `toString()` will return\r\n\t\t\t\t// `href` property anyway)\r\n\t\t\t\tparsedURL = parseURL(input.href);\r\n\t\t\t} else {\r\n\t\t\t\t// coerce input to a string before attempting to parse\r\n\t\t\t\tparsedURL = parseURL(`${input}`);\r\n\t\t\t}\r\n\t\t\tinput = {};\r\n\t\t} else {\r\n\t\t\tparsedURL = parseURL(input.url);\r\n\t\t}\r\n\r\n\t\tlet method = init.method || input.method || 'GET';\r\n\t\tmethod = method.toUpperCase();\r\n\r\n\t\tif ((init.body != null || isRequest(input) && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\r\n\t\t\tthrow new TypeError('Request with GET/HEAD method cannot have body');\r\n\t\t}\r\n\r\n\t\tlet inputBody = init.body != null ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;\r\n\r\n\t\tBody.call(this, inputBody, {\r\n\t\t\ttimeout: init.timeout || input.timeout || 0,\r\n\t\t\tsize: init.size || input.size || 0\r\n\t\t});\r\n\r\n\t\tconst headers = new Headers(init.headers || input.headers || {});\r\n\r\n\t\tif (inputBody != null && !headers.has('Content-Type')) {\r\n\t\t\tconst contentType = extractContentType(inputBody);\r\n\t\t\tif (contentType) {\r\n\t\t\t\theaders.append('Content-Type', contentType);\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tlet signal = isRequest(input) ? input.signal : null;\r\n\t\tif ('signal' in init) signal = init.signal;\r\n\r\n\t\tif (signal != null && !isAbortSignal(signal)) {\r\n\t\t\tthrow new TypeError('Expected signal to be an instanceof AbortSignal');\r\n\t\t}\r\n\r\n\t\tthis[INTERNALS$2] = {\r\n\t\t\tmethod,\r\n\t\t\tredirect: init.redirect || input.redirect || 'follow',\r\n\t\t\theaders,\r\n\t\t\tparsedURL,\r\n\t\t\tsignal\r\n\t\t};\r\n\r\n\t\t// node-fetch-only options\r\n\t\tthis.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\r\n\t\tthis.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\r\n\t\tthis.counter = init.counter || input.counter || 0;\r\n\t\tthis.agent = init.agent || input.agent;\r\n\t}\r\n\r\n\tget method() {\r\n\t\treturn this[INTERNALS$2].method;\r\n\t}\r\n\r\n\tget url() {\r\n\t\treturn format_url(this[INTERNALS$2].parsedURL);\r\n\t}\r\n\r\n\tget headers() {\r\n\t\treturn this[INTERNALS$2].headers;\r\n\t}\r\n\r\n\tget redirect() {\r\n\t\treturn this[INTERNALS$2].redirect;\r\n\t}\r\n\r\n\tget signal() {\r\n\t\treturn this[INTERNALS$2].signal;\r\n\t}\r\n\r\n\t/**\r\n  * Clone this request\r\n  *\r\n  * @return  Request\r\n  */\r\n\tclone() {\r\n\t\treturn new Request(this);\r\n\t}\r\n}\r\n\r\nBody.mixIn(Request.prototype);\r\n\r\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\r\n\tvalue: 'Request',\r\n\twritable: false,\r\n\tenumerable: false,\r\n\tconfigurable: true\r\n});\r\n\r\nObject.defineProperties(Request.prototype, {\r\n\tmethod: { enumerable: true },\r\n\turl: { enumerable: true },\r\n\theaders: { enumerable: true },\r\n\tredirect: { enumerable: true },\r\n\tclone: { enumerable: true },\r\n\tsignal: { enumerable: true }\r\n});\r\n\r\n/**\r\n * Convert a Request to Node.js http request options.\r\n *\r\n * @param   Request  A Request instance\r\n * @return  Object   The options object to be passed to http.request\r\n */\r\nfunction getNodeRequestOptions(request) {\r\n\tconst parsedURL = request[INTERNALS$2].parsedURL;\r\n\tconst headers = new Headers(request[INTERNALS$2].headers);\r\n\r\n\t// fetch step 1.3\r\n\tif (!headers.has('Accept')) {\r\n\t\theaders.set('Accept', '*/*');\r\n\t}\r\n\r\n\t// Basic fetch\r\n\tif (!parsedURL.protocol || !parsedURL.hostname) {\r\n\t\tthrow new TypeError('Only absolute URLs are supported');\r\n\t}\r\n\r\n\tif (!/^https?:$/.test(parsedURL.protocol)) {\r\n\t\tthrow new TypeError('Only HTTP(S) protocols are supported');\r\n\t}\r\n\r\n\tif (request.signal && request.body instanceof Stream.Readable && !streamDestructionSupported) {\r\n\t\tthrow new Error('Cancellation of streamed requests with AbortSignal is not supported in node < 8');\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch steps 2.4-2.7\r\n\tlet contentLengthValue = null;\r\n\tif (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\r\n\t\tcontentLengthValue = '0';\r\n\t}\r\n\tif (request.body != null) {\r\n\t\tconst totalBytes = getTotalBytes(request);\r\n\t\tif (typeof totalBytes === 'number') {\r\n\t\t\tcontentLengthValue = String(totalBytes);\r\n\t\t}\r\n\t}\r\n\tif (contentLengthValue) {\r\n\t\theaders.set('Content-Length', contentLengthValue);\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch step 2.11\r\n\tif (!headers.has('User-Agent')) {\r\n\t\theaders.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\r\n\t}\r\n\r\n\t// HTTP-network-or-cache fetch step 2.15\r\n\tif (request.compress && !headers.has('Accept-Encoding')) {\r\n\t\theaders.set('Accept-Encoding', 'gzip,deflate');\r\n\t}\r\n\r\n\tlet agent = request.agent;\r\n\tif (typeof agent === 'function') {\r\n\t\tagent = agent(parsedURL);\r\n\t}\r\n\r\n\tif (!headers.has('Connection') && !agent) {\r\n\t\theaders.set('Connection', 'close');\r\n\t}\r\n\r\n\t// HTTP-network fetch step 4.2\r\n\t// chunked encoding is handled by Node.js\r\n\r\n\treturn Object.assign({}, parsedURL, {\r\n\t\tmethod: request.method,\r\n\t\theaders: exportNodeCompatibleHeaders(headers),\r\n\t\tagent\r\n\t});\r\n}\r\n\r\n/**\r\n * abort-error.js\r\n *\r\n * AbortError interface for cancelled requests\r\n */\r\n\r\n/**\r\n * Create AbortError instance\r\n *\r\n * @param   String      message      Error message for human\r\n * @return  AbortError\r\n */\r\nfunction AbortError(message) {\r\n  Error.call(this, message);\r\n\r\n  this.type = 'aborted';\r\n  this.message = message;\r\n\r\n  // hide custom error implementation details from end-users\r\n  Error.captureStackTrace(this, this.constructor);\r\n}\r\n\r\nAbortError.prototype = Object.create(Error.prototype);\r\nAbortError.prototype.constructor = AbortError;\r\nAbortError.prototype.name = 'AbortError';\r\n\r\nconst URL$1 = Url.URL || whatwgUrl.URL;\r\n\r\n// fix an issue where \"PassThrough\", \"resolve\" aren't a named export for node <10\r\nconst PassThrough$1 = Stream.PassThrough;\r\n\r\nconst isDomainOrSubdomain = function isDomainOrSubdomain(destination, original) {\r\n\tconst orig = new URL$1(original).hostname;\r\n\tconst dest = new URL$1(destination).hostname;\r\n\r\n\treturn orig === dest || orig[orig.length - dest.length - 1] === '.' && orig.endsWith(dest);\r\n};\r\n\r\n/**\r\n * isSameProtocol reports whether the two provided URLs use the same protocol.\r\n *\r\n * Both domains must already be in canonical form.\r\n * @param {string|URL} original\r\n * @param {string|URL} destination\r\n */\r\nconst isSameProtocol = function isSameProtocol(destination, original) {\r\n\tconst orig = new URL$1(original).protocol;\r\n\tconst dest = new URL$1(destination).protocol;\r\n\r\n\treturn orig === dest;\r\n};\r\n\r\n/**\r\n * Fetch function\r\n *\r\n * @param   Mixed    url   Absolute url or Request instance\r\n * @param   Object   opts  Fetch options\r\n * @return  Promise\r\n */\r\nfunction fetch(url, opts) {\r\n\r\n\t// allow custom promise\r\n\tif (!fetch.Promise) {\r\n\t\tthrow new Error('native promise missing, set fetch.Promise to your favorite alternative');\r\n\t}\r\n\r\n\tBody.Promise = fetch.Promise;\r\n\r\n\t// wrap http.request into fetch\r\n\treturn new fetch.Promise(function (resolve, reject) {\r\n\t\t// build request object\r\n\t\tconst request = new Request(url, opts);\r\n\t\tconst options = getNodeRequestOptions(request);\r\n\r\n\t\tconst send = (options.protocol === 'https:' ? https : http).request;\r\n\t\tconst signal = request.signal;\r\n\r\n\t\tlet response = null;\r\n\r\n\t\tconst abort = function abort() {\r\n\t\t\tlet error = new AbortError('The user aborted a request.');\r\n\t\t\treject(error);\r\n\t\t\tif (request.body && request.body instanceof Stream.Readable) {\r\n\t\t\t\tdestroyStream(request.body, error);\r\n\t\t\t}\r\n\t\t\tif (!response || !response.body) return;\r\n\t\t\tresponse.body.emit('error', error);\r\n\t\t};\r\n\r\n\t\tif (signal && signal.aborted) {\r\n\t\t\tabort();\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tconst abortAndFinalize = function abortAndFinalize() {\r\n\t\t\tabort();\r\n\t\t\tfinalize();\r\n\t\t};\r\n\r\n\t\t// send request\r\n\t\tconst req = send(options);\r\n\t\tlet reqTimeout;\r\n\r\n\t\tif (signal) {\r\n\t\t\tsignal.addEventListener('abort', abortAndFinalize);\r\n\t\t}\r\n\r\n\t\tfunction finalize() {\r\n\t\t\treq.abort();\r\n\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\r\n\t\t\tclearTimeout(reqTimeout);\r\n\t\t}\r\n\r\n\t\tif (request.timeout) {\r\n\t\t\treq.once('socket', function (socket) {\r\n\t\t\t\treqTimeout = setTimeout(function () {\r\n\t\t\t\t\treject(new FetchError(`network timeout at: ${request.url}`, 'request-timeout'));\r\n\t\t\t\t\tfinalize();\r\n\t\t\t\t}, request.timeout);\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treq.on('error', function (err) {\r\n\t\t\treject(new FetchError(`request to ${request.url} failed, reason: ${err.message}`, 'system', err));\r\n\r\n\t\t\tif (response && response.body) {\r\n\t\t\t\tdestroyStream(response.body, err);\r\n\t\t\t}\r\n\r\n\t\t\tfinalize();\r\n\t\t});\r\n\r\n\t\tfixResponseChunkedTransferBadEnding(req, function (err) {\r\n\t\t\tif (signal && signal.aborted) {\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\tif (response && response.body) {\r\n\t\t\t\tdestroyStream(response.body, err);\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t/* c8 ignore next 18 */\r\n\t\tif (parseInt(process.version.substring(1)) < 14) {\r\n\t\t\t// Before Node.js 14, pipeline() does not fully support async iterators and does not always\r\n\t\t\t// properly handle when the socket close/end events are out of order.\r\n\t\t\treq.on('socket', function (s) {\r\n\t\t\t\ts.addListener('close', function (hadError) {\r\n\t\t\t\t\t// if a data listener is still present we didn't end cleanly\r\n\t\t\t\t\tconst hasDataListener = s.listenerCount('data') > 0;\r\n\r\n\t\t\t\t\t// if end happened before close but the socket didn't emit an error, do it now\r\n\t\t\t\t\tif (response && hasDataListener && !hadError && !(signal && signal.aborted)) {\r\n\t\t\t\t\t\tconst err = new Error('Premature close');\r\n\t\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\r\n\t\t\t\t\t\tresponse.body.emit('error', err);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\treq.on('response', function (res) {\r\n\t\t\tclearTimeout(reqTimeout);\r\n\r\n\t\t\tconst headers = createHeadersLenient(res.headers);\r\n\r\n\t\t\t// HTTP fetch step 5\r\n\t\t\tif (fetch.isRedirect(res.statusCode)) {\r\n\t\t\t\t// HTTP fetch step 5.2\r\n\t\t\t\tconst location = headers.get('Location');\r\n\r\n\t\t\t\t// HTTP fetch step 5.3\r\n\t\t\t\tlet locationURL = null;\r\n\t\t\t\ttry {\r\n\t\t\t\t\tlocationURL = location === null ? null : new URL$1(location, request.url).toString();\r\n\t\t\t\t} catch (err) {\r\n\t\t\t\t\t// error here can only be invalid URL in Location: header\r\n\t\t\t\t\t// do not throw when options.redirect == manual\r\n\t\t\t\t\t// let the user extract the errorneous redirect URL\r\n\t\t\t\t\tif (request.redirect !== 'manual') {\r\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, 'invalid-redirect'));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t// HTTP fetch step 5.5\r\n\t\t\t\tswitch (request.redirect) {\r\n\t\t\t\t\tcase 'error':\r\n\t\t\t\t\t\treject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, 'no-redirect'));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t\tcase 'manual':\r\n\t\t\t\t\t\t// node-fetch-specific step: make manual redirect a bit easier to use by setting the Location header value to the resolved URL.\r\n\t\t\t\t\t\tif (locationURL !== null) {\r\n\t\t\t\t\t\t\t// handle corrupted header\r\n\t\t\t\t\t\t\ttry {\r\n\t\t\t\t\t\t\t\theaders.set('Location', locationURL);\r\n\t\t\t\t\t\t\t} catch (err) {\r\n\t\t\t\t\t\t\t\t// istanbul ignore next: nodejs server prevent invalid response headers, we can't test this through normal request\r\n\t\t\t\t\t\t\t\treject(err);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'follow':\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 2\r\n\t\t\t\t\t\tif (locationURL === null) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 5\r\n\t\t\t\t\t\tif (request.counter >= request.follow) {\r\n\t\t\t\t\t\t\treject(new FetchError(`maximum redirect reached at: ${request.url}`, 'max-redirect'));\r\n\t\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 6 (counter increment)\r\n\t\t\t\t\t\t// Create a new Request object.\r\n\t\t\t\t\t\tconst requestOpts = {\r\n\t\t\t\t\t\t\theaders: new Headers(request.headers),\r\n\t\t\t\t\t\t\tfollow: request.follow,\r\n\t\t\t\t\t\t\tcounter: request.counter + 1,\r\n\t\t\t\t\t\t\tagent: request.agent,\r\n\t\t\t\t\t\t\tcompress: request.compress,\r\n\t\t\t\t\t\t\tmethod: request.method,\r\n\t\t\t\t\t\t\tbody: request.body,\r\n\t\t\t\t\t\t\tsignal: request.signal,\r\n\t\t\t\t\t\t\ttimeout: request.timeout,\r\n\t\t\t\t\t\t\tsize: request.size\r\n\t\t\t\t\t\t};\r\n\r\n\t\t\t\t\t\tif (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {\r\n\t\t\t\t\t\t\tfor (const name of ['authorization', 'www-authenticate', 'cookie', 'cookie2']) {\r\n\t\t\t\t\t\t\t\trequestOpts.headers.delete(name);\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 9\r\n\t\t\t\t\t\tif (res.statusCode !== 303 && request.body && getTotalBytes(request) === null) {\r\n\t\t\t\t\t\t\treject(new FetchError('Cannot follow redirect with body being a readable stream', 'unsupported-redirect'));\r\n\t\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\t\treturn;\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 11\r\n\t\t\t\t\t\tif (res.statusCode === 303 || (res.statusCode === 301 || res.statusCode === 302) && request.method === 'POST') {\r\n\t\t\t\t\t\t\trequestOpts.method = 'GET';\r\n\t\t\t\t\t\t\trequestOpts.body = undefined;\r\n\t\t\t\t\t\t\trequestOpts.headers.delete('content-length');\r\n\t\t\t\t\t\t}\r\n\r\n\t\t\t\t\t\t// HTTP-redirect fetch step 15\r\n\t\t\t\t\t\tresolve(fetch(new Request(locationURL, requestOpts)));\r\n\t\t\t\t\t\tfinalize();\r\n\t\t\t\t\t\treturn;\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t// prepare response\r\n\t\t\tres.once('end', function () {\r\n\t\t\t\tif (signal) signal.removeEventListener('abort', abortAndFinalize);\r\n\t\t\t});\r\n\t\t\tlet body = res.pipe(new PassThrough$1());\r\n\r\n\t\t\tconst response_options = {\r\n\t\t\t\turl: request.url,\r\n\t\t\t\tstatus: res.statusCode,\r\n\t\t\t\tstatusText: res.statusMessage,\r\n\t\t\t\theaders: headers,\r\n\t\t\t\tsize: request.size,\r\n\t\t\t\ttimeout: request.timeout,\r\n\t\t\t\tcounter: request.counter\r\n\t\t\t};\r\n\r\n\t\t\t// HTTP-network fetch step 12.1.1.3\r\n\t\t\tconst codings = headers.get('Content-Encoding');\r\n\r\n\t\t\t// HTTP-network fetch step 12.1.1.4: handle content codings\r\n\r\n\t\t\t// in following scenarios we ignore compression support\r\n\t\t\t// 1. compression support is disabled\r\n\t\t\t// 2. HEAD request\r\n\t\t\t// 3. no Content-Encoding header\r\n\t\t\t// 4. no content response (204)\r\n\t\t\t// 5. content not modified response (304)\r\n\t\t\tif (!request.compress || request.method === 'HEAD' || codings === null || res.statusCode === 204 || res.statusCode === 304) {\r\n\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// For Node v6+\r\n\t\t\t// Be less strict when decoding compressed responses, since sometimes\r\n\t\t\t// servers send slightly invalid responses that are still accepted\r\n\t\t\t// by common browsers.\r\n\t\t\t// Always using Z_SYNC_FLUSH is what cURL does.\r\n\t\t\tconst zlibOptions = {\r\n\t\t\t\tflush: zlib.Z_SYNC_FLUSH,\r\n\t\t\t\tfinishFlush: zlib.Z_SYNC_FLUSH\r\n\t\t\t};\r\n\r\n\t\t\t// for gzip\r\n\t\t\tif (codings == 'gzip' || codings == 'x-gzip') {\r\n\t\t\t\tbody = body.pipe(zlib.createGunzip(zlibOptions));\r\n\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// for deflate\r\n\t\t\tif (codings == 'deflate' || codings == 'x-deflate') {\r\n\t\t\t\t// handle the infamous raw deflate response from old servers\r\n\t\t\t\t// a hack for old IIS and Apache servers\r\n\t\t\t\tconst raw = res.pipe(new PassThrough$1());\r\n\t\t\t\traw.once('data', function (chunk) {\r\n\t\t\t\t\t// see http://stackoverflow.com/questions/37519828\r\n\t\t\t\t\tif ((chunk[0] & 0x0F) === 0x08) {\r\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflate());\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tbody = body.pipe(zlib.createInflateRaw());\r\n\t\t\t\t\t}\r\n\t\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\t\tresolve(response);\r\n\t\t\t\t});\r\n\t\t\t\traw.on('end', function () {\r\n\t\t\t\t\t// some old IIS servers return zero-length OK deflate responses, so 'data' is never emitted.\r\n\t\t\t\t\tif (!response) {\r\n\t\t\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\t\t\tresolve(response);\r\n\t\t\t\t\t}\r\n\t\t\t\t});\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// for br\r\n\t\t\tif (codings == 'br' && typeof zlib.createBrotliDecompress === 'function') {\r\n\t\t\t\tbody = body.pipe(zlib.createBrotliDecompress());\r\n\t\t\t\tresponse = new Response(body, response_options);\r\n\t\t\t\tresolve(response);\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\r\n\t\t\t// otherwise, use response as-is\r\n\t\t\tresponse = new Response(body, response_options);\r\n\t\t\tresolve(response);\r\n\t\t});\r\n\r\n\t\twriteToStream(req, request);\r\n\t});\r\n}\r\nfunction fixResponseChunkedTransferBadEnding(request, errorCallback) {\r\n\tlet socket;\r\n\r\n\trequest.on('socket', function (s) {\r\n\t\tsocket = s;\r\n\t});\r\n\r\n\trequest.on('response', function (response) {\r\n\t\tconst headers = response.headers;\r\n\r\n\t\tif (headers['transfer-encoding'] === 'chunked' && !headers['content-length']) {\r\n\t\t\tresponse.once('close', function (hadError) {\r\n\t\t\t\t// tests for socket presence, as in some situations the\r\n\t\t\t\t// the 'socket' event is not triggered for the request\r\n\t\t\t\t// (happens in deno), avoids `TypeError`\r\n\t\t\t\t// if a data listener is still present we didn't end cleanly\r\n\t\t\t\tconst hasDataListener = socket && socket.listenerCount('data') > 0;\r\n\r\n\t\t\t\tif (hasDataListener && !hadError) {\r\n\t\t\t\t\tconst err = new Error('Premature close');\r\n\t\t\t\t\terr.code = 'ERR_STREAM_PREMATURE_CLOSE';\r\n\t\t\t\t\terrorCallback(err);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t});\r\n}\r\n\r\nfunction destroyStream(stream, err) {\r\n\tif (stream.destroy) {\r\n\t\tstream.destroy(err);\r\n\t} else {\r\n\t\t// node < 8\r\n\t\tstream.emit('error', err);\r\n\t\tstream.end();\r\n\t}\r\n}\r\n\r\n/**\r\n * Redirect code matching\r\n *\r\n * @param   Number   code  Status code\r\n * @return  Boolean\r\n */\r\nfetch.isRedirect = function (code) {\r\n\treturn code === 301 || code === 302 || code === 303 || code === 307 || code === 308;\r\n};\r\n\r\n// expose Promise\r\nfetch.Promise = global.Promise;\r\n\r\nmodule.exports = exports = fetch;\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports[\"default\"] = exports;\r\nexports.Headers = Headers;\r\nexports.Request = Request;\r\nexports.Response = Response;\r\nexports.FetchError = FetchError;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n// @ts-ignore\r\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! @supabase/node-fetch */ \"(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\"));\r\nconst PostgrestError_1 = __importDefault(__webpack_require__(/*! ./PostgrestError */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js\"));\r\nclass PostgrestBuilder {\r\n    constructor(builder) {\r\n        var _a, _b;\r\n        this.shouldThrowOnError = false;\r\n        this.method = builder.method;\r\n        this.url = builder.url;\r\n        this.headers = new Headers(builder.headers);\r\n        this.schema = builder.schema;\r\n        this.body = builder.body;\r\n        this.shouldThrowOnError = (_a = builder.shouldThrowOnError) !== null && _a !== void 0 ? _a : false;\r\n        this.signal = builder.signal;\r\n        this.isMaybeSingle = (_b = builder.isMaybeSingle) !== null && _b !== void 0 ? _b : false;\r\n        if (builder.fetch) {\r\n            this.fetch = builder.fetch;\r\n        }\r\n        else if (typeof fetch === 'undefined') {\r\n            this.fetch = node_fetch_1.default;\r\n        }\r\n        else {\r\n            this.fetch = fetch;\r\n        }\r\n    }\r\n    /**\r\n     * If there's an error with the query, throwOnError will reject the promise by\r\n     * throwing the error instead of returning it as part of a successful response.\r\n     *\r\n     * {@link https://github.com/supabase/supabase-js/issues/92}\r\n     */\r\n    throwOnError() {\r\n        this.shouldThrowOnError = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Set an HTTP header for the request.\r\n     */\r\n    setHeader(name, value) {\r\n        this.headers = new Headers(this.headers);\r\n        this.headers.set(name, value);\r\n        return this;\r\n    }\r\n    then(onfulfilled, onrejected) {\r\n        // https://postgrest.org/en/stable/api.html#switching-schemas\r\n        if (this.schema === undefined) {\r\n            // skip\r\n        }\r\n        else if (['GET', 'HEAD'].includes(this.method)) {\r\n            this.headers.set('Accept-Profile', this.schema);\r\n        }\r\n        else {\r\n            this.headers.set('Content-Profile', this.schema);\r\n        }\r\n        if (this.method !== 'GET' && this.method !== 'HEAD') {\r\n            this.headers.set('Content-Type', 'application/json');\r\n        }\r\n        // NOTE: Invoke w/o `this` to avoid illegal invocation error.\r\n        // https://github.com/supabase/postgrest-js/pull/247\r\n        const _fetch = this.fetch;\r\n        let res = _fetch(this.url.toString(), {\r\n            method: this.method,\r\n            headers: this.headers,\r\n            body: JSON.stringify(this.body),\r\n            signal: this.signal,\r\n        }).then(async (res) => {\r\n            var _a, _b, _c, _d;\r\n            let error = null;\r\n            let data = null;\r\n            let count = null;\r\n            let status = res.status;\r\n            let statusText = res.statusText;\r\n            if (res.ok) {\r\n                if (this.method !== 'HEAD') {\r\n                    const body = await res.text();\r\n                    if (body === '') {\r\n                        // Prefer: return=minimal\r\n                    }\r\n                    else if (this.headers.get('Accept') === 'text/csv') {\r\n                        data = body;\r\n                    }\r\n                    else if (this.headers.get('Accept') &&\r\n                        ((_a = this.headers.get('Accept')) === null || _a === void 0 ? void 0 : _a.includes('application/vnd.pgrst.plan+text'))) {\r\n                        data = body;\r\n                    }\r\n                    else {\r\n                        data = JSON.parse(body);\r\n                    }\r\n                }\r\n                const countHeader = (_b = this.headers.get('Prefer')) === null || _b === void 0 ? void 0 : _b.match(/count=(exact|planned|estimated)/);\r\n                const contentRange = (_c = res.headers.get('content-range')) === null || _c === void 0 ? void 0 : _c.split('/');\r\n                if (countHeader && contentRange && contentRange.length > 1) {\r\n                    count = parseInt(contentRange[1]);\r\n                }\r\n                // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\r\n                // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\r\n                if (this.isMaybeSingle && this.method === 'GET' && Array.isArray(data)) {\r\n                    if (data.length > 1) {\r\n                        error = {\r\n                            // https://github.com/PostgREST/postgrest/blob/a867d79c42419af16c18c3fb019eba8df992626f/src/PostgREST/Error.hs#L553\r\n                            code: 'PGRST116',\r\n                            details: `Results contain ${data.length} rows, application/vnd.pgrst.object+json requires 1 row`,\r\n                            hint: null,\r\n                            message: 'JSON object requested, multiple (or no) rows returned',\r\n                        };\r\n                        data = null;\r\n                        count = null;\r\n                        status = 406;\r\n                        statusText = 'Not Acceptable';\r\n                    }\r\n                    else if (data.length === 1) {\r\n                        data = data[0];\r\n                    }\r\n                    else {\r\n                        data = null;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                const body = await res.text();\r\n                try {\r\n                    error = JSON.parse(body);\r\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\r\n                    if (Array.isArray(error) && res.status === 404) {\r\n                        data = [];\r\n                        error = null;\r\n                        status = 200;\r\n                        statusText = 'OK';\r\n                    }\r\n                }\r\n                catch (_e) {\r\n                    // Workaround for https://github.com/supabase/postgrest-js/issues/295\r\n                    if (res.status === 404 && body === '') {\r\n                        status = 204;\r\n                        statusText = 'No Content';\r\n                    }\r\n                    else {\r\n                        error = {\r\n                            message: body,\r\n                        };\r\n                    }\r\n                }\r\n                if (error && this.isMaybeSingle && ((_d = error === null || error === void 0 ? void 0 : error.details) === null || _d === void 0 ? void 0 : _d.includes('0 rows'))) {\r\n                    error = null;\r\n                    status = 200;\r\n                    statusText = 'OK';\r\n                }\r\n                if (error && this.shouldThrowOnError) {\r\n                    throw new PostgrestError_1.default(error);\r\n                }\r\n            }\r\n            const postgrestResponse = {\r\n                error,\r\n                data,\r\n                count,\r\n                status,\r\n                statusText,\r\n            };\r\n            return postgrestResponse;\r\n        });\r\n        if (!this.shouldThrowOnError) {\r\n            res = res.catch((fetchError) => {\r\n                var _a, _b, _c;\r\n                return ({\r\n                    error: {\r\n                        message: `${(_a = fetchError === null || fetchError === void 0 ? void 0 : fetchError.name) !== null && _a !== void 0 ? _a : 'FetchError'}: ${fetchError === null || fetchError === void 0 ? void 0 : fetchError.message}`,\r\n                        details: `${(_b = fetchError === null || fetchError === void 0 ? void 0 : fetchError.stack) !== null && _b !== void 0 ? _b : ''}`,\r\n                        hint: '',\r\n                        code: `${(_c = fetchError === null || fetchError === void 0 ? void 0 : fetchError.code) !== null && _c !== void 0 ? _c : ''}`,\r\n                    },\r\n                    data: null,\r\n                    count: null,\r\n                    status: 0,\r\n                    statusText: '',\r\n                });\r\n            });\r\n        }\r\n        return res.then(onfulfilled, onrejected);\r\n    }\r\n    /**\r\n     * Override the type of the returned `data`.\r\n     *\r\n     * @typeParam NewResult - The new result type to override with\r\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\r\n     */\r\n    returns() {\r\n        /* istanbul ignore next */\r\n        return this;\r\n    }\r\n    /**\r\n     * Override the type of the returned `data` field in the response.\r\n     *\r\n     * @typeParam NewResult - The new type to cast the response data to\r\n     * @typeParam Options - Optional type configuration (defaults to { merge: true })\r\n     * @typeParam Options.merge - When true, merges the new type with existing return type. When false, replaces the existing types entirely (defaults to true)\r\n     * @example\r\n     * ```typescript\r\n     * // Merge with existing types (default behavior)\r\n     * const query = supabase\r\n     *   .from('users')\r\n     *   .select()\r\n     *   .overrideTypes<{ custom_field: string }>()\r\n     *\r\n     * // Replace existing types completely\r\n     * const replaceQuery = supabase\r\n     *   .from('users')\r\n     *   .select()\r\n     *   .overrideTypes<{ id: number; name: string }, { merge: false }>()\r\n     * ```\r\n     * @returns A PostgrestBuilder instance with the new type\r\n     */\r\n    overrideTypes() {\r\n        return this;\r\n    }\r\n}\r\nexports[\"default\"] = PostgrestBuilder;\r\n//# sourceMappingURL=PostgrestBuilder.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst PostgrestQueryBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestQueryBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js\"));\r\nconst PostgrestFilterBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestFilterBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js\"));\r\n/**\r\n * PostgREST client.\r\n *\r\n * @typeParam Database - Types for the schema from the [type\r\n * generator](https://supabase.com/docs/reference/javascript/next/typescript-support)\r\n *\r\n * @typeParam SchemaName - Postgres schema to switch to. Must be a string\r\n * literal, the same one passed to the constructor. If the schema is not\r\n * `\"public\"`, this must be supplied manually.\r\n */\r\nclass PostgrestClient {\r\n    // TODO: Add back shouldThrowOnError once we figure out the typings\r\n    /**\r\n     * Creates a PostgREST client.\r\n     *\r\n     * @param url - URL of the PostgREST endpoint\r\n     * @param options - Named parameters\r\n     * @param options.headers - Custom headers\r\n     * @param options.schema - Postgres schema to switch to\r\n     * @param options.fetch - Custom fetch\r\n     */\r\n    constructor(url, { headers = {}, schema, fetch, } = {}) {\r\n        this.url = url;\r\n        this.headers = new Headers(headers);\r\n        this.schemaName = schema;\r\n        this.fetch = fetch;\r\n    }\r\n    /**\r\n     * Perform a query on a table or a view.\r\n     *\r\n     * @param relation - The table or view name to query\r\n     */\r\n    from(relation) {\r\n        const url = new URL(`${this.url}/${relation}`);\r\n        return new PostgrestQueryBuilder_1.default(url, {\r\n            headers: new Headers(this.headers),\r\n            schema: this.schemaName,\r\n            fetch: this.fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Select a schema to query or perform an function (rpc) call.\r\n     *\r\n     * The schema needs to be on the list of exposed schemas inside Supabase.\r\n     *\r\n     * @param schema - The schema to query\r\n     */\r\n    schema(schema) {\r\n        return new PostgrestClient(this.url, {\r\n            headers: this.headers,\r\n            schema,\r\n            fetch: this.fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Perform a function call.\r\n     *\r\n     * @param fn - The function name to call\r\n     * @param args - The arguments to pass to the function call\r\n     * @param options - Named parameters\r\n     * @param options.head - When set to `true`, `data` will not be returned.\r\n     * Useful if you only need the count.\r\n     * @param options.get - When set to `true`, the function will be called with\r\n     * read-only access mode.\r\n     * @param options.count - Count algorithm to use to count rows returned by the\r\n     * function. Only applicable for [set-returning\r\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     */\r\n    rpc(fn, args = {}, { head = false, get = false, count, } = {}) {\r\n        var _a;\r\n        let method;\r\n        const url = new URL(`${this.url}/rpc/${fn}`);\r\n        let body;\r\n        if (head || get) {\r\n            method = head ? 'HEAD' : 'GET';\r\n            Object.entries(args)\r\n                // params with undefined value needs to be filtered out, otherwise it'll\r\n                // show up as `?param=undefined`\r\n                .filter(([_, value]) => value !== undefined)\r\n                // array values need special syntax\r\n                .map(([name, value]) => [name, Array.isArray(value) ? `{${value.join(',')}}` : `${value}`])\r\n                .forEach(([name, value]) => {\r\n                url.searchParams.append(name, value);\r\n            });\r\n        }\r\n        else {\r\n            method = 'POST';\r\n            body = args;\r\n        }\r\n        const headers = new Headers(this.headers);\r\n        if (count) {\r\n            headers.set('Prefer', `count=${count}`);\r\n        }\r\n        return new PostgrestFilterBuilder_1.default({\r\n            method,\r\n            url,\r\n            headers,\r\n            schema: this.schemaName,\r\n            body,\r\n            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch,\r\n        });\r\n    }\r\n}\r\nexports[\"default\"] = PostgrestClient;\r\n//# sourceMappingURL=PostgrestClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2Nqcy9Qb3N0Z3Jlc3RDbGllbnQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnREFBZ0QsbUJBQU8sQ0FBQyw4R0FBeUI7QUFDakYsaURBQWlELG1CQUFPLENBQUMsZ0hBQTBCO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixZQUFZLG1CQUFtQixJQUFJO0FBQzFEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsU0FBUyxHQUFHLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLElBQUksb0NBQW9DLElBQUk7QUFDakU7QUFDQTtBQUNBLCtCQUErQixTQUFTLE9BQU8sR0FBRztBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLEVBQUUsaUJBQWlCLE9BQU8sTUFBTTtBQUN4RztBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLE1BQU07QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0Esa0JBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL1Bvc3RncmVzdENsaWVudC5qcz9hYWY2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcclxuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xyXG59O1xyXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XHJcbmNvbnN0IFBvc3RncmVzdFF1ZXJ5QnVpbGRlcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdFF1ZXJ5QnVpbGRlclwiKSk7XHJcbmNvbnN0IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9Qb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXCIpKTtcclxuLyoqXHJcbiAqIFBvc3RnUkVTVCBjbGllbnQuXHJcbiAqXHJcbiAqIEB0eXBlUGFyYW0gRGF0YWJhc2UgLSBUeXBlcyBmb3IgdGhlIHNjaGVtYSBmcm9tIHRoZSBbdHlwZVxyXG4gKiBnZW5lcmF0b3JdKGh0dHBzOi8vc3VwYWJhc2UuY29tL2RvY3MvcmVmZXJlbmNlL2phdmFzY3JpcHQvbmV4dC90eXBlc2NyaXB0LXN1cHBvcnQpXHJcbiAqXHJcbiAqIEB0eXBlUGFyYW0gU2NoZW1hTmFtZSAtIFBvc3RncmVzIHNjaGVtYSB0byBzd2l0Y2ggdG8uIE11c3QgYmUgYSBzdHJpbmdcclxuICogbGl0ZXJhbCwgdGhlIHNhbWUgb25lIHBhc3NlZCB0byB0aGUgY29uc3RydWN0b3IuIElmIHRoZSBzY2hlbWEgaXMgbm90XHJcbiAqIGBcInB1YmxpY1wiYCwgdGhpcyBtdXN0IGJlIHN1cHBsaWVkIG1hbnVhbGx5LlxyXG4gKi9cclxuY2xhc3MgUG9zdGdyZXN0Q2xpZW50IHtcclxuICAgIC8vIFRPRE86IEFkZCBiYWNrIHNob3VsZFRocm93T25FcnJvciBvbmNlIHdlIGZpZ3VyZSBvdXQgdGhlIHR5cGluZ3NcclxuICAgIC8qKlxyXG4gICAgICogQ3JlYXRlcyBhIFBvc3RnUkVTVCBjbGllbnQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIHVybCAtIFVSTCBvZiB0aGUgUG9zdGdSRVNUIGVuZHBvaW50XHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYWRlcnMgLSBDdXN0b20gaGVhZGVyc1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMuc2NoZW1hIC0gUG9zdGdyZXMgc2NoZW1hIHRvIHN3aXRjaCB0b1xyXG4gICAgICogQHBhcmFtIG9wdGlvbnMuZmV0Y2ggLSBDdXN0b20gZmV0Y2hcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IodXJsLCB7IGhlYWRlcnMgPSB7fSwgc2NoZW1hLCBmZXRjaCwgfSA9IHt9KSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSB1cmw7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMoaGVhZGVycyk7XHJcbiAgICAgICAgdGhpcy5zY2hlbWFOYW1lID0gc2NoZW1hO1xyXG4gICAgICAgIHRoaXMuZmV0Y2ggPSBmZXRjaDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUGVyZm9ybSBhIHF1ZXJ5IG9uIGEgdGFibGUgb3IgYSB2aWV3LlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSByZWxhdGlvbiAtIFRoZSB0YWJsZSBvciB2aWV3IG5hbWUgdG8gcXVlcnlcclxuICAgICAqL1xyXG4gICAgZnJvbShyZWxhdGlvbikge1xyXG4gICAgICAgIGNvbnN0IHVybCA9IG5ldyBVUkwoYCR7dGhpcy51cmx9LyR7cmVsYXRpb259YCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXJfMS5kZWZhdWx0KHVybCwge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh0aGlzLmhlYWRlcnMpLFxyXG4gICAgICAgICAgICBzY2hlbWE6IHRoaXMuc2NoZW1hTmFtZSxcclxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNlbGVjdCBhIHNjaGVtYSB0byBxdWVyeSBvciBwZXJmb3JtIGFuIGZ1bmN0aW9uIChycGMpIGNhbGwuXHJcbiAgICAgKlxyXG4gICAgICogVGhlIHNjaGVtYSBuZWVkcyB0byBiZSBvbiB0aGUgbGlzdCBvZiBleHBvc2VkIHNjaGVtYXMgaW5zaWRlIFN1cGFiYXNlLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBzY2hlbWEgLSBUaGUgc2NoZW1hIHRvIHF1ZXJ5XHJcbiAgICAgKi9cclxuICAgIHNjaGVtYShzY2hlbWEpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFBvc3RncmVzdENsaWVudCh0aGlzLnVybCwge1xyXG4gICAgICAgICAgICBoZWFkZXJzOiB0aGlzLmhlYWRlcnMsXHJcbiAgICAgICAgICAgIHNjaGVtYSxcclxuICAgICAgICAgICAgZmV0Y2g6IHRoaXMuZmV0Y2gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gYSBmdW5jdGlvbiBjYWxsLlxyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSBmbiAtIFRoZSBmdW5jdGlvbiBuYW1lIHRvIGNhbGxcclxuICAgICAqIEBwYXJhbSBhcmdzIC0gVGhlIGFyZ3VtZW50cyB0byBwYXNzIHRvIHRoZSBmdW5jdGlvbiBjYWxsXHJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyAtIE5hbWVkIHBhcmFtZXRlcnNcclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmhlYWQgLSBXaGVuIHNldCB0byBgdHJ1ZWAsIGBkYXRhYCB3aWxsIG5vdCBiZSByZXR1cm5lZC5cclxuICAgICAqIFVzZWZ1bCBpZiB5b3Ugb25seSBuZWVkIHRoZSBjb3VudC5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmdldCAtIFdoZW4gc2V0IHRvIGB0cnVlYCwgdGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdpdGhcclxuICAgICAqIHJlYWQtb25seSBhY2Nlc3MgbW9kZS5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zLmNvdW50IC0gQ291bnQgYWxnb3JpdGhtIHRvIHVzZSB0byBjb3VudCByb3dzIHJldHVybmVkIGJ5IHRoZVxyXG4gICAgICogZnVuY3Rpb24uIE9ubHkgYXBwbGljYWJsZSBmb3IgW3NldC1yZXR1cm5pbmdcclxuICAgICAqIGZ1bmN0aW9uc10oaHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy9jdXJyZW50L2Z1bmN0aW9ucy1zcmYuaHRtbCkuXHJcbiAgICAgKlxyXG4gICAgICogYFwiZXhhY3RcImA6IEV4YWN0IGJ1dCBzbG93IGNvdW50IGFsZ29yaXRobS4gUGVyZm9ybXMgYSBgQ09VTlQoKilgIHVuZGVyIHRoZVxyXG4gICAgICogaG9vZC5cclxuICAgICAqXHJcbiAgICAgKiBgXCJwbGFubmVkXCJgOiBBcHByb3hpbWF0ZWQgYnV0IGZhc3QgY291bnQgYWxnb3JpdGhtLiBVc2VzIHRoZSBQb3N0Z3Jlc1xyXG4gICAgICogc3RhdGlzdGljcyB1bmRlciB0aGUgaG9vZC5cclxuICAgICAqXHJcbiAgICAgKiBgXCJlc3RpbWF0ZWRcImA6IFVzZXMgZXhhY3QgY291bnQgZm9yIGxvdyBudW1iZXJzIGFuZCBwbGFubmVkIGNvdW50IGZvciBoaWdoXHJcbiAgICAgKiBudW1iZXJzLlxyXG4gICAgICovXHJcbiAgICBycGMoZm4sIGFyZ3MgPSB7fSwgeyBoZWFkID0gZmFsc2UsIGdldCA9IGZhbHNlLCBjb3VudCwgfSA9IHt9KSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGxldCBtZXRob2Q7XHJcbiAgICAgICAgY29uc3QgdXJsID0gbmV3IFVSTChgJHt0aGlzLnVybH0vcnBjLyR7Zm59YCk7XHJcbiAgICAgICAgbGV0IGJvZHk7XHJcbiAgICAgICAgaWYgKGhlYWQgfHwgZ2V0KSB7XHJcbiAgICAgICAgICAgIG1ldGhvZCA9IGhlYWQgPyAnSEVBRCcgOiAnR0VUJztcclxuICAgICAgICAgICAgT2JqZWN0LmVudHJpZXMoYXJncylcclxuICAgICAgICAgICAgICAgIC8vIHBhcmFtcyB3aXRoIHVuZGVmaW5lZCB2YWx1ZSBuZWVkcyB0byBiZSBmaWx0ZXJlZCBvdXQsIG90aGVyd2lzZSBpdCdsbFxyXG4gICAgICAgICAgICAgICAgLy8gc2hvdyB1cCBhcyBgP3BhcmFtPXVuZGVmaW5lZGBcclxuICAgICAgICAgICAgICAgIC5maWx0ZXIoKFtfLCB2YWx1ZV0pID0+IHZhbHVlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAvLyBhcnJheSB2YWx1ZXMgbmVlZCBzcGVjaWFsIHN5bnRheFxyXG4gICAgICAgICAgICAgICAgLm1hcCgoW25hbWUsIHZhbHVlXSkgPT4gW25hbWUsIEFycmF5LmlzQXJyYXkodmFsdWUpID8gYHske3ZhbHVlLmpvaW4oJywnKX19YCA6IGAke3ZhbHVlfWBdKVxyXG4gICAgICAgICAgICAgICAgLmZvckVhY2goKFtuYW1lLCB2YWx1ZV0pID0+IHtcclxuICAgICAgICAgICAgICAgIHVybC5zZWFyY2hQYXJhbXMuYXBwZW5kKG5hbWUsIHZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBtZXRob2QgPSAnUE9TVCc7XHJcbiAgICAgICAgICAgIGJvZHkgPSBhcmdzO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBoZWFkZXJzID0gbmV3IEhlYWRlcnModGhpcy5oZWFkZXJzKTtcclxuICAgICAgICBpZiAoY291bnQpIHtcclxuICAgICAgICAgICAgaGVhZGVycy5zZXQoJ1ByZWZlcicsIGBjb3VudD0ke2NvdW50fWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gbmV3IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMS5kZWZhdWx0KHtcclxuICAgICAgICAgICAgbWV0aG9kLFxyXG4gICAgICAgICAgICB1cmwsXHJcbiAgICAgICAgICAgIGhlYWRlcnMsXHJcbiAgICAgICAgICAgIHNjaGVtYTogdGhpcy5zY2hlbWFOYW1lLFxyXG4gICAgICAgICAgICBib2R5LFxyXG4gICAgICAgICAgICBmZXRjaDogKF9hID0gdGhpcy5mZXRjaCkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZmV0Y2gsXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gUG9zdGdyZXN0Q2xpZW50O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1Qb3N0Z3Jlc3RDbGllbnQuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js":
/*!************************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\n/**\r\n * Error format\r\n *\r\n * {@link https://postgrest.org/en/stable/api.html?highlight=options#errors-and-http-status-codes}\r\n */\r\nclass PostgrestError extends Error {\r\n    constructor(context) {\r\n        super(context.message);\r\n        this.name = 'PostgrestError';\r\n        this.details = context.details;\r\n        this.hint = context.hint;\r\n        this.code = context.code;\r\n    }\r\n}\r\nexports[\"default\"] = PostgrestError;\r\n//# sourceMappingURL=PostgrestError.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2Nqcy9Qb3N0Z3Jlc3RFcnJvci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RDtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBZTtBQUNmIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9wb3N0Z3Jlc3QtanMvZGlzdC9janMvUG9zdGdyZXN0RXJyb3IuanM/ODJkMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcclxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4vKipcclxuICogRXJyb3IgZm9ybWF0XHJcbiAqXHJcbiAqIHtAbGluayBodHRwczovL3Bvc3RncmVzdC5vcmcvZW4vc3RhYmxlL2FwaS5odG1sP2hpZ2hsaWdodD1vcHRpb25zI2Vycm9ycy1hbmQtaHR0cC1zdGF0dXMtY29kZXN9XHJcbiAqL1xyXG5jbGFzcyBQb3N0Z3Jlc3RFcnJvciBleHRlbmRzIEVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQpIHtcclxuICAgICAgICBzdXBlcihjb250ZXh0Lm1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdQb3N0Z3Jlc3RFcnJvcic7XHJcbiAgICAgICAgdGhpcy5kZXRhaWxzID0gY29udGV4dC5kZXRhaWxzO1xyXG4gICAgICAgIHRoaXMuaGludCA9IGNvbnRleHQuaGludDtcclxuICAgICAgICB0aGlzLmNvZGUgPSBjb250ZXh0LmNvZGU7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0cy5kZWZhdWx0ID0gUG9zdGdyZXN0RXJyb3I7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBvc3RncmVzdEVycm9yLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst PostgrestTransformBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestTransformBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js\"));\r\nclass PostgrestFilterBuilder extends PostgrestTransformBuilder_1.default {\r\n    /**\r\n     * Match only rows where `column` is equal to `value`.\r\n     *\r\n     * To check if the value of `column` is NULL, you should use `.is()` instead.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param value - The value to filter with\r\n     */\r\n    eq(column, value) {\r\n        this.url.searchParams.append(column, `eq.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` is not equal to `value`.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param value - The value to filter with\r\n     */\r\n    neq(column, value) {\r\n        this.url.searchParams.append(column, `neq.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` is greater than `value`.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param value - The value to filter with\r\n     */\r\n    gt(column, value) {\r\n        this.url.searchParams.append(column, `gt.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` is greater than or equal to `value`.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param value - The value to filter with\r\n     */\r\n    gte(column, value) {\r\n        this.url.searchParams.append(column, `gte.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` is less than `value`.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param value - The value to filter with\r\n     */\r\n    lt(column, value) {\r\n        this.url.searchParams.append(column, `lt.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` is less than or equal to `value`.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param value - The value to filter with\r\n     */\r\n    lte(column, value) {\r\n        this.url.searchParams.append(column, `lte.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` matches `pattern` case-sensitively.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param pattern - The pattern to match with\r\n     */\r\n    like(column, pattern) {\r\n        this.url.searchParams.append(column, `like.${pattern}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` matches all of `patterns` case-sensitively.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param patterns - The patterns to match with\r\n     */\r\n    likeAllOf(column, patterns) {\r\n        this.url.searchParams.append(column, `like(all).{${patterns.join(',')}}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` matches any of `patterns` case-sensitively.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param patterns - The patterns to match with\r\n     */\r\n    likeAnyOf(column, patterns) {\r\n        this.url.searchParams.append(column, `like(any).{${patterns.join(',')}}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` matches `pattern` case-insensitively.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param pattern - The pattern to match with\r\n     */\r\n    ilike(column, pattern) {\r\n        this.url.searchParams.append(column, `ilike.${pattern}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` matches all of `patterns` case-insensitively.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param patterns - The patterns to match with\r\n     */\r\n    ilikeAllOf(column, patterns) {\r\n        this.url.searchParams.append(column, `ilike(all).{${patterns.join(',')}}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` matches any of `patterns` case-insensitively.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param patterns - The patterns to match with\r\n     */\r\n    ilikeAnyOf(column, patterns) {\r\n        this.url.searchParams.append(column, `ilike(any).{${patterns.join(',')}}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` IS `value`.\r\n     *\r\n     * For non-boolean columns, this is only relevant for checking if the value of\r\n     * `column` is NULL by setting `value` to `null`.\r\n     *\r\n     * For boolean columns, you can also set `value` to `true` or `false` and it\r\n     * will behave the same way as `.eq()`.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param value - The value to filter with\r\n     */\r\n    is(column, value) {\r\n        this.url.searchParams.append(column, `is.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where `column` is included in the `values` array.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param values - The values array to filter with\r\n     */\r\n    in(column, values) {\r\n        const cleanedValues = Array.from(new Set(values))\r\n            .map((s) => {\r\n            // handle postgrest reserved characters\r\n            // https://postgrest.org/en/v7.0.0/api.html#reserved-characters\r\n            if (typeof s === 'string' && new RegExp('[,()]').test(s))\r\n                return `\"${s}\"`;\r\n            else\r\n                return `${s}`;\r\n        })\r\n            .join(',');\r\n        this.url.searchParams.append(column, `in.(${cleanedValues})`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for jsonb, array, and range columns. Match only rows where\r\n     * `column` contains every element appearing in `value`.\r\n     *\r\n     * @param column - The jsonb, array, or range column to filter on\r\n     * @param value - The jsonb, array, or range value to filter with\r\n     */\r\n    contains(column, value) {\r\n        if (typeof value === 'string') {\r\n            // range types can be inclusive '[', ']' or exclusive '(', ')' so just\r\n            // keep it simple and accept a string\r\n            this.url.searchParams.append(column, `cs.${value}`);\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            // array\r\n            this.url.searchParams.append(column, `cs.{${value.join(',')}}`);\r\n        }\r\n        else {\r\n            // json\r\n            this.url.searchParams.append(column, `cs.${JSON.stringify(value)}`);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for jsonb, array, and range columns. Match only rows where\r\n     * every element appearing in `column` is contained by `value`.\r\n     *\r\n     * @param column - The jsonb, array, or range column to filter on\r\n     * @param value - The jsonb, array, or range value to filter with\r\n     */\r\n    containedBy(column, value) {\r\n        if (typeof value === 'string') {\r\n            // range\r\n            this.url.searchParams.append(column, `cd.${value}`);\r\n        }\r\n        else if (Array.isArray(value)) {\r\n            // array\r\n            this.url.searchParams.append(column, `cd.{${value.join(',')}}`);\r\n        }\r\n        else {\r\n            // json\r\n            this.url.searchParams.append(column, `cd.${JSON.stringify(value)}`);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for range columns. Match only rows where every element in\r\n     * `column` is greater than any element in `range`.\r\n     *\r\n     * @param column - The range column to filter on\r\n     * @param range - The range to filter with\r\n     */\r\n    rangeGt(column, range) {\r\n        this.url.searchParams.append(column, `sr.${range}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for range columns. Match only rows where every element in\r\n     * `column` is either contained in `range` or greater than any element in\r\n     * `range`.\r\n     *\r\n     * @param column - The range column to filter on\r\n     * @param range - The range to filter with\r\n     */\r\n    rangeGte(column, range) {\r\n        this.url.searchParams.append(column, `nxl.${range}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for range columns. Match only rows where every element in\r\n     * `column` is less than any element in `range`.\r\n     *\r\n     * @param column - The range column to filter on\r\n     * @param range - The range to filter with\r\n     */\r\n    rangeLt(column, range) {\r\n        this.url.searchParams.append(column, `sl.${range}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for range columns. Match only rows where every element in\r\n     * `column` is either contained in `range` or less than any element in\r\n     * `range`.\r\n     *\r\n     * @param column - The range column to filter on\r\n     * @param range - The range to filter with\r\n     */\r\n    rangeLte(column, range) {\r\n        this.url.searchParams.append(column, `nxr.${range}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for range columns. Match only rows where `column` is\r\n     * mutually exclusive to `range` and there can be no element between the two\r\n     * ranges.\r\n     *\r\n     * @param column - The range column to filter on\r\n     * @param range - The range to filter with\r\n     */\r\n    rangeAdjacent(column, range) {\r\n        this.url.searchParams.append(column, `adj.${range}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for array and range columns. Match only rows where\r\n     * `column` and `value` have an element in common.\r\n     *\r\n     * @param column - The array or range column to filter on\r\n     * @param value - The array or range value to filter with\r\n     */\r\n    overlaps(column, value) {\r\n        if (typeof value === 'string') {\r\n            // range\r\n            this.url.searchParams.append(column, `ov.${value}`);\r\n        }\r\n        else {\r\n            // array\r\n            this.url.searchParams.append(column, `ov.{${value.join(',')}}`);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Only relevant for text and tsvector columns. Match only rows where\r\n     * `column` matches the query string in `query`.\r\n     *\r\n     * @param column - The text or tsvector column to filter on\r\n     * @param query - The query text to match with\r\n     * @param options - Named parameters\r\n     * @param options.config - The text search configuration to use\r\n     * @param options.type - Change how the `query` text is interpreted\r\n     */\r\n    textSearch(column, query, { config, type } = {}) {\r\n        let typePart = '';\r\n        if (type === 'plain') {\r\n            typePart = 'pl';\r\n        }\r\n        else if (type === 'phrase') {\r\n            typePart = 'ph';\r\n        }\r\n        else if (type === 'websearch') {\r\n            typePart = 'w';\r\n        }\r\n        const configPart = config === undefined ? '' : `(${config})`;\r\n        this.url.searchParams.append(column, `${typePart}fts${configPart}.${query}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows where each column in `query` keys is equal to its\r\n     * associated value. Shorthand for multiple `.eq()`s.\r\n     *\r\n     * @param query - The object to filter with, with column names as keys mapped\r\n     * to their filter values\r\n     */\r\n    match(query) {\r\n        Object.entries(query).forEach(([column, value]) => {\r\n            this.url.searchParams.append(column, `eq.${value}`);\r\n        });\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows which doesn't satisfy the filter.\r\n     *\r\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n     * follow [PostgREST\r\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n     * to make sure they are properly sanitized.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param operator - The operator to be negated to filter with, following\r\n     * PostgREST syntax\r\n     * @param value - The value to filter with, following PostgREST syntax\r\n     */\r\n    not(column, operator, value) {\r\n        this.url.searchParams.append(column, `not.${operator}.${value}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows which satisfy at least one of the filters.\r\n     *\r\n     * Unlike most filters, `filters` is used as-is and needs to follow [PostgREST\r\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n     * to make sure it's properly sanitized.\r\n     *\r\n     * It's currently not possible to do an `.or()` filter across multiple tables.\r\n     *\r\n     * @param filters - The filters to use, following PostgREST syntax\r\n     * @param options - Named parameters\r\n     * @param options.referencedTable - Set this to filter on referenced tables\r\n     * instead of the parent table\r\n     * @param options.foreignTable - Deprecated, use `referencedTable` instead\r\n     */\r\n    or(filters, { foreignTable, referencedTable = foreignTable, } = {}) {\r\n        const key = referencedTable ? `${referencedTable}.or` : 'or';\r\n        this.url.searchParams.append(key, `(${filters})`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Match only rows which satisfy the filter. This is an escape hatch - you\r\n     * should use the specific filter methods wherever possible.\r\n     *\r\n     * Unlike most filters, `opearator` and `value` are used as-is and need to\r\n     * follow [PostgREST\r\n     * syntax](https://postgrest.org/en/stable/api.html#operators). You also need\r\n     * to make sure they are properly sanitized.\r\n     *\r\n     * @param column - The column to filter on\r\n     * @param operator - The operator to filter with, following PostgREST syntax\r\n     * @param value - The value to filter with, following PostgREST syntax\r\n     */\r\n    filter(column, operator, value) {\r\n        this.url.searchParams.append(column, `${operator}.${value}`);\r\n        return this;\r\n    }\r\n}\r\nexports[\"default\"] = PostgrestFilterBuilder;\r\n//# sourceMappingURL=PostgrestFilterBuilder.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js ***!
  \*******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst PostgrestFilterBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestFilterBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js\"));\r\nclass PostgrestQueryBuilder {\r\n    constructor(url, { headers = {}, schema, fetch, }) {\r\n        this.url = url;\r\n        this.headers = new Headers(headers);\r\n        this.schema = schema;\r\n        this.fetch = fetch;\r\n    }\r\n    /**\r\n     * Perform a SELECT query on the table or view.\r\n     *\r\n     * @param columns - The columns to retrieve, separated by commas. Columns can be renamed when returned with `customName:columnName`\r\n     *\r\n     * @param options - Named parameters\r\n     *\r\n     * @param options.head - When set to `true`, `data` will not be returned.\r\n     * Useful if you only need the count.\r\n     *\r\n     * @param options.count - Count algorithm to use to count rows in the table or view.\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     */\r\n    select(columns, options) {\r\n        const { head = false, count } = options !== null && options !== void 0 ? options : {};\r\n        const method = head ? 'HEAD' : 'GET';\r\n        // Remove whitespaces except when quoted\r\n        let quoted = false;\r\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\r\n            .split('')\r\n            .map((c) => {\r\n            if (/\\s/.test(c) && !quoted) {\r\n                return '';\r\n            }\r\n            if (c === '\"') {\r\n                quoted = !quoted;\r\n            }\r\n            return c;\r\n        })\r\n            .join('');\r\n        this.url.searchParams.set('select', cleanedColumns);\r\n        if (count) {\r\n            this.headers.append('Prefer', `count=${count}`);\r\n        }\r\n        return new PostgrestFilterBuilder_1.default({\r\n            method,\r\n            url: this.url,\r\n            headers: this.headers,\r\n            schema: this.schema,\r\n            fetch: this.fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Perform an INSERT into the table or view.\r\n     *\r\n     * By default, inserted rows are not returned. To return it, chain the call\r\n     * with `.select()`.\r\n     *\r\n     * @param values - The values to insert. Pass an object to insert a single row\r\n     * or an array to insert multiple rows.\r\n     *\r\n     * @param options - Named parameters\r\n     *\r\n     * @param options.count - Count algorithm to use to count inserted rows.\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     *\r\n     * @param options.defaultToNull - Make missing fields default to `null`.\r\n     * Otherwise, use the default value for the column. Only applies for bulk\r\n     * inserts.\r\n     */\r\n    insert(values, { count, defaultToNull = true, } = {}) {\r\n        var _a;\r\n        const method = 'POST';\r\n        if (count) {\r\n            this.headers.append('Prefer', `count=${count}`);\r\n        }\r\n        if (!defaultToNull) {\r\n            this.headers.append('Prefer', `missing=default`);\r\n        }\r\n        if (Array.isArray(values)) {\r\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\r\n            if (columns.length > 0) {\r\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\r\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\r\n            }\r\n        }\r\n        return new PostgrestFilterBuilder_1.default({\r\n            method,\r\n            url: this.url,\r\n            headers: this.headers,\r\n            schema: this.schema,\r\n            body: values,\r\n            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Perform an UPSERT on the table or view. Depending on the column(s) passed\r\n     * to `onConflict`, `.upsert()` allows you to perform the equivalent of\r\n     * `.insert()` if a row with the corresponding `onConflict` columns doesn't\r\n     * exist, or if it does exist, perform an alternative action depending on\r\n     * `ignoreDuplicates`.\r\n     *\r\n     * By default, upserted rows are not returned. To return it, chain the call\r\n     * with `.select()`.\r\n     *\r\n     * @param values - The values to upsert with. Pass an object to upsert a\r\n     * single row or an array to upsert multiple rows.\r\n     *\r\n     * @param options - Named parameters\r\n     *\r\n     * @param options.onConflict - Comma-separated UNIQUE column(s) to specify how\r\n     * duplicate rows are determined. Two rows are duplicates if all the\r\n     * `onConflict` columns are equal.\r\n     *\r\n     * @param options.ignoreDuplicates - If `true`, duplicate rows are ignored. If\r\n     * `false`, duplicate rows are merged with existing rows.\r\n     *\r\n     * @param options.count - Count algorithm to use to count upserted rows.\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     *\r\n     * @param options.defaultToNull - Make missing fields default to `null`.\r\n     * Otherwise, use the default value for the column. This only applies when\r\n     * inserting new rows, not when merging with existing rows under\r\n     * `ignoreDuplicates: false`. This also only applies when doing bulk upserts.\r\n     */\r\n    upsert(values, { onConflict, ignoreDuplicates = false, count, defaultToNull = true, } = {}) {\r\n        var _a;\r\n        const method = 'POST';\r\n        this.headers.append('Prefer', `resolution=${ignoreDuplicates ? 'ignore' : 'merge'}-duplicates`);\r\n        if (onConflict !== undefined)\r\n            this.url.searchParams.set('on_conflict', onConflict);\r\n        if (count) {\r\n            this.headers.append('Prefer', `count=${count}`);\r\n        }\r\n        if (!defaultToNull) {\r\n            this.headers.append('Prefer', 'missing=default');\r\n        }\r\n        if (Array.isArray(values)) {\r\n            const columns = values.reduce((acc, x) => acc.concat(Object.keys(x)), []);\r\n            if (columns.length > 0) {\r\n                const uniqueColumns = [...new Set(columns)].map((column) => `\"${column}\"`);\r\n                this.url.searchParams.set('columns', uniqueColumns.join(','));\r\n            }\r\n        }\r\n        return new PostgrestFilterBuilder_1.default({\r\n            method,\r\n            url: this.url,\r\n            headers: this.headers,\r\n            schema: this.schema,\r\n            body: values,\r\n            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Perform an UPDATE on the table or view.\r\n     *\r\n     * By default, updated rows are not returned. To return it, chain the call\r\n     * with `.select()` after filters.\r\n     *\r\n     * @param values - The values to update with\r\n     *\r\n     * @param options - Named parameters\r\n     *\r\n     * @param options.count - Count algorithm to use to count updated rows.\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     */\r\n    update(values, { count, } = {}) {\r\n        var _a;\r\n        const method = 'PATCH';\r\n        if (count) {\r\n            this.headers.append('Prefer', `count=${count}`);\r\n        }\r\n        return new PostgrestFilterBuilder_1.default({\r\n            method,\r\n            url: this.url,\r\n            headers: this.headers,\r\n            schema: this.schema,\r\n            body: values,\r\n            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Perform a DELETE on the table or view.\r\n     *\r\n     * By default, deleted rows are not returned. To return it, chain the call\r\n     * with `.select()` after filters.\r\n     *\r\n     * @param options - Named parameters\r\n     *\r\n     * @param options.count - Count algorithm to use to count deleted rows.\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     */\r\n    delete({ count, } = {}) {\r\n        var _a;\r\n        const method = 'DELETE';\r\n        if (count) {\r\n            this.headers.append('Prefer', `count=${count}`);\r\n        }\r\n        return new PostgrestFilterBuilder_1.default({\r\n            method,\r\n            url: this.url,\r\n            headers: this.headers,\r\n            schema: this.schema,\r\n            fetch: (_a = this.fetch) !== null && _a !== void 0 ? _a : fetch,\r\n        });\r\n    }\r\n}\r\nexports[\"default\"] = PostgrestQueryBuilder;\r\n//# sourceMappingURL=PostgrestQueryBuilder.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js ***!
  \***********************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nconst PostgrestBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js\"));\r\nclass PostgrestTransformBuilder extends PostgrestBuilder_1.default {\r\n    /**\r\n     * Perform a SELECT on the query result.\r\n     *\r\n     * By default, `.insert()`, `.update()`, `.upsert()`, and `.delete()` do not\r\n     * return modified rows. By calling this method, modified rows are returned in\r\n     * `data`.\r\n     *\r\n     * @param columns - The columns to retrieve, separated by commas\r\n     */\r\n    select(columns) {\r\n        // Remove whitespaces except when quoted\r\n        let quoted = false;\r\n        const cleanedColumns = (columns !== null && columns !== void 0 ? columns : '*')\r\n            .split('')\r\n            .map((c) => {\r\n            if (/\\s/.test(c) && !quoted) {\r\n                return '';\r\n            }\r\n            if (c === '\"') {\r\n                quoted = !quoted;\r\n            }\r\n            return c;\r\n        })\r\n            .join('');\r\n        this.url.searchParams.set('select', cleanedColumns);\r\n        this.headers.append('Prefer', 'return=representation');\r\n        return this;\r\n    }\r\n    /**\r\n     * Order the query result by `column`.\r\n     *\r\n     * You can call this method multiple times to order by multiple columns.\r\n     *\r\n     * You can order referenced tables, but it only affects the ordering of the\r\n     * parent table if you use `!inner` in the query.\r\n     *\r\n     * @param column - The column to order by\r\n     * @param options - Named parameters\r\n     * @param options.ascending - If `true`, the result will be in ascending order\r\n     * @param options.nullsFirst - If `true`, `null`s appear first. If `false`,\r\n     * `null`s appear last.\r\n     * @param options.referencedTable - Set this to order a referenced table by\r\n     * its columns\r\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n     * instead\r\n     */\r\n    order(column, { ascending = true, nullsFirst, foreignTable, referencedTable = foreignTable, } = {}) {\r\n        const key = referencedTable ? `${referencedTable}.order` : 'order';\r\n        const existingOrder = this.url.searchParams.get(key);\r\n        this.url.searchParams.set(key, `${existingOrder ? `${existingOrder},` : ''}${column}.${ascending ? 'asc' : 'desc'}${nullsFirst === undefined ? '' : nullsFirst ? '.nullsfirst' : '.nullslast'}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Limit the query result by `count`.\r\n     *\r\n     * @param count - The maximum number of rows to return\r\n     * @param options - Named parameters\r\n     * @param options.referencedTable - Set this to limit rows of referenced\r\n     * tables instead of the parent table\r\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n     * instead\r\n     */\r\n    limit(count, { foreignTable, referencedTable = foreignTable, } = {}) {\r\n        const key = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\r\n        this.url.searchParams.set(key, `${count}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Limit the query result by starting at an offset `from` and ending at the offset `to`.\r\n     * Only records within this range are returned.\r\n     * This respects the query order and if there is no order clause the range could behave unexpectedly.\r\n     * The `from` and `to` values are 0-based and inclusive: `range(1, 3)` will include the second, third\r\n     * and fourth rows of the query.\r\n     *\r\n     * @param from - The starting index from which to limit the result\r\n     * @param to - The last index to which to limit the result\r\n     * @param options - Named parameters\r\n     * @param options.referencedTable - Set this to limit rows of referenced\r\n     * tables instead of the parent table\r\n     * @param options.foreignTable - Deprecated, use `options.referencedTable`\r\n     * instead\r\n     */\r\n    range(from, to, { foreignTable, referencedTable = foreignTable, } = {}) {\r\n        const keyOffset = typeof referencedTable === 'undefined' ? 'offset' : `${referencedTable}.offset`;\r\n        const keyLimit = typeof referencedTable === 'undefined' ? 'limit' : `${referencedTable}.limit`;\r\n        this.url.searchParams.set(keyOffset, `${from}`);\r\n        // Range is inclusive, so add 1\r\n        this.url.searchParams.set(keyLimit, `${to - from + 1}`);\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the AbortSignal for the fetch request.\r\n     *\r\n     * @param signal - The AbortSignal to use for the fetch request\r\n     */\r\n    abortSignal(signal) {\r\n        this.signal = signal;\r\n        return this;\r\n    }\r\n    /**\r\n     * Return `data` as a single object instead of an array of objects.\r\n     *\r\n     * Query result must be one row (e.g. using `.limit(1)`), otherwise this\r\n     * returns an error.\r\n     */\r\n    single() {\r\n        this.headers.set('Accept', 'application/vnd.pgrst.object+json');\r\n        return this;\r\n    }\r\n    /**\r\n     * Return `data` as a single object instead of an array of objects.\r\n     *\r\n     * Query result must be zero or one row (e.g. using `.limit(1)`), otherwise\r\n     * this returns an error.\r\n     */\r\n    maybeSingle() {\r\n        // Temporary partial fix for https://github.com/supabase/postgrest-js/issues/361\r\n        // Issue persists e.g. for `.insert([...]).select().maybeSingle()`\r\n        if (this.method === 'GET') {\r\n            this.headers.set('Accept', 'application/json');\r\n        }\r\n        else {\r\n            this.headers.set('Accept', 'application/vnd.pgrst.object+json');\r\n        }\r\n        this.isMaybeSingle = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Return `data` as a string in CSV format.\r\n     */\r\n    csv() {\r\n        this.headers.set('Accept', 'text/csv');\r\n        return this;\r\n    }\r\n    /**\r\n     * Return `data` as an object in [GeoJSON](https://geojson.org) format.\r\n     */\r\n    geojson() {\r\n        this.headers.set('Accept', 'application/geo+json');\r\n        return this;\r\n    }\r\n    /**\r\n     * Return `data` as the EXPLAIN plan for the query.\r\n     *\r\n     * You need to enable the\r\n     * [db_plan_enabled](https://supabase.com/docs/guides/database/debugging-performance#enabling-explain)\r\n     * setting before using this method.\r\n     *\r\n     * @param options - Named parameters\r\n     *\r\n     * @param options.analyze - If `true`, the query will be executed and the\r\n     * actual run time will be returned\r\n     *\r\n     * @param options.verbose - If `true`, the query identifier will be returned\r\n     * and `data` will include the output columns of the query\r\n     *\r\n     * @param options.settings - If `true`, include information on configuration\r\n     * parameters that affect query planning\r\n     *\r\n     * @param options.buffers - If `true`, include information on buffer usage\r\n     *\r\n     * @param options.wal - If `true`, include information on WAL record generation\r\n     *\r\n     * @param options.format - The format of the output, can be `\"text\"` (default)\r\n     * or `\"json\"`\r\n     */\r\n    explain({ analyze = false, verbose = false, settings = false, buffers = false, wal = false, format = 'text', } = {}) {\r\n        var _a;\r\n        const options = [\r\n            analyze ? 'analyze' : null,\r\n            verbose ? 'verbose' : null,\r\n            settings ? 'settings' : null,\r\n            buffers ? 'buffers' : null,\r\n            wal ? 'wal' : null,\r\n        ]\r\n            .filter(Boolean)\r\n            .join('|');\r\n        // An Accept header can carry multiple media types but postgrest-js always sends one\r\n        const forMediatype = (_a = this.headers.get('Accept')) !== null && _a !== void 0 ? _a : 'application/json';\r\n        this.headers.set('Accept', `application/vnd.pgrst.plan+${format}; for=\"${forMediatype}\"; options=${options};`);\r\n        if (format === 'json') {\r\n            return this;\r\n        }\r\n        else {\r\n            return this;\r\n        }\r\n    }\r\n    /**\r\n     * Rollback the query.\r\n     *\r\n     * `data` will still be returned, but the query is not committed.\r\n     */\r\n    rollback() {\r\n        this.headers.append('Prefer', 'tx=rollback');\r\n        return this;\r\n    }\r\n    /**\r\n     * Override the type of the returned `data`.\r\n     *\r\n     * @typeParam NewResult - The new result type to override with\r\n     * @deprecated Use overrideTypes<yourType, { merge: false }>() method at the end of your call chain instead\r\n     */\r\n    returns() {\r\n        return this;\r\n    }\r\n    /**\r\n     * Set the maximum number of rows that can be affected by the query.\r\n     * Only available in PostgREST v13+ and only works with PATCH and DELETE methods.\r\n     *\r\n     * @param value - The maximum number of rows that can be affected\r\n     */\r\n    maxAffected(value) {\r\n        this.headers.append('Prefer', 'handling=strict');\r\n        this.headers.append('Prefer', `max-affected=${value}`);\r\n        return this;\r\n    }\r\n}\r\nexports[\"default\"] = PostgrestTransformBuilder;\r\n//# sourceMappingURL=PostgrestTransformBuilder.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/cjs/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\r\nvar __importDefault = (this && this.__importDefault) || function (mod) {\r\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.PostgrestError = exports.PostgrestBuilder = exports.PostgrestTransformBuilder = exports.PostgrestFilterBuilder = exports.PostgrestQueryBuilder = exports.PostgrestClient = void 0;\r\n// Always update wrapper.mjs when updating this file.\r\nconst PostgrestClient_1 = __importDefault(__webpack_require__(/*! ./PostgrestClient */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestClient.js\"));\r\nexports.PostgrestClient = PostgrestClient_1.default;\r\nconst PostgrestQueryBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestQueryBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestQueryBuilder.js\"));\r\nexports.PostgrestQueryBuilder = PostgrestQueryBuilder_1.default;\r\nconst PostgrestFilterBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestFilterBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestFilterBuilder.js\"));\r\nexports.PostgrestFilterBuilder = PostgrestFilterBuilder_1.default;\r\nconst PostgrestTransformBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestTransformBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestTransformBuilder.js\"));\r\nexports.PostgrestTransformBuilder = PostgrestTransformBuilder_1.default;\r\nconst PostgrestBuilder_1 = __importDefault(__webpack_require__(/*! ./PostgrestBuilder */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestBuilder.js\"));\r\nexports.PostgrestBuilder = PostgrestBuilder_1.default;\r\nconst PostgrestError_1 = __importDefault(__webpack_require__(/*! ./PostgrestError */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/PostgrestError.js\"));\r\nexports.PostgrestError = PostgrestError_1.default;\r\nexports[\"default\"] = {\r\n    PostgrestClient: PostgrestClient_1.default,\r\n    PostgrestQueryBuilder: PostgrestQueryBuilder_1.default,\r\n    PostgrestFilterBuilder: PostgrestFilterBuilder_1.default,\r\n    PostgrestTransformBuilder: PostgrestTransformBuilder_1.default,\r\n    PostgrestBuilder: PostgrestBuilder_1.default,\r\n    PostgrestError: PostgrestError_1.default,\r\n};\r\n//# sourceMappingURL=index.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQixHQUFHLHdCQUF3QixHQUFHLGlDQUFpQyxHQUFHLDhCQUE4QixHQUFHLDZCQUE2QixHQUFHLHVCQUF1QjtBQUNoTDtBQUNBLDBDQUEwQyxtQkFBTyxDQUFDLGtHQUFtQjtBQUNyRSx1QkFBdUI7QUFDdkIsZ0RBQWdELG1CQUFPLENBQUMsOEdBQXlCO0FBQ2pGLDZCQUE2QjtBQUM3QixpREFBaUQsbUJBQU8sQ0FBQyxnSEFBMEI7QUFDbkYsOEJBQThCO0FBQzlCLG9EQUFvRCxtQkFBTyxDQUFDLHNIQUE2QjtBQUN6RixpQ0FBaUM7QUFDakMsMkNBQTJDLG1CQUFPLENBQUMsb0dBQW9CO0FBQ3ZFLHdCQUF3QjtBQUN4Qix5Q0FBeUMsbUJBQU8sQ0FBQyxnR0FBa0I7QUFDbkUsc0JBQXNCO0FBQ3RCLGtCQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvY2pzL2luZGV4LmpzP2VkOGIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XHJcbn07XHJcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuZXhwb3J0cy5Qb3N0Z3Jlc3RFcnJvciA9IGV4cG9ydHMuUG9zdGdyZXN0QnVpbGRlciA9IGV4cG9ydHMuUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlciA9IGV4cG9ydHMuUG9zdGdyZXN0RmlsdGVyQnVpbGRlciA9IGV4cG9ydHMuUG9zdGdyZXN0UXVlcnlCdWlsZGVyID0gZXhwb3J0cy5Qb3N0Z3Jlc3RDbGllbnQgPSB2b2lkIDA7XHJcbi8vIEFsd2F5cyB1cGRhdGUgd3JhcHBlci5tanMgd2hlbiB1cGRhdGluZyB0aGlzIGZpbGUuXHJcbmNvbnN0IFBvc3RncmVzdENsaWVudF8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdENsaWVudFwiKSk7XHJcbmV4cG9ydHMuUG9zdGdyZXN0Q2xpZW50ID0gUG9zdGdyZXN0Q2xpZW50XzEuZGVmYXVsdDtcclxuY29uc3QgUG9zdGdyZXN0UXVlcnlCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0UXVlcnlCdWlsZGVyXCIpKTtcclxuZXhwb3J0cy5Qb3N0Z3Jlc3RRdWVyeUJ1aWxkZXIgPSBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXJfMS5kZWZhdWx0O1xyXG5jb25zdCBQb3N0Z3Jlc3RGaWx0ZXJCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0RmlsdGVyQnVpbGRlclwiKSk7XHJcbmV4cG9ydHMuUG9zdGdyZXN0RmlsdGVyQnVpbGRlciA9IFBvc3RncmVzdEZpbHRlckJ1aWxkZXJfMS5kZWZhdWx0O1xyXG5jb25zdCBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlclwiKSk7XHJcbmV4cG9ydHMuUG9zdGdyZXN0VHJhbnNmb3JtQnVpbGRlciA9IFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXJfMS5kZWZhdWx0O1xyXG5jb25zdCBQb3N0Z3Jlc3RCdWlsZGVyXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vUG9zdGdyZXN0QnVpbGRlclwiKSk7XHJcbmV4cG9ydHMuUG9zdGdyZXN0QnVpbGRlciA9IFBvc3RncmVzdEJ1aWxkZXJfMS5kZWZhdWx0O1xyXG5jb25zdCBQb3N0Z3Jlc3RFcnJvcl8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuL1Bvc3RncmVzdEVycm9yXCIpKTtcclxuZXhwb3J0cy5Qb3N0Z3Jlc3RFcnJvciA9IFBvc3RncmVzdEVycm9yXzEuZGVmYXVsdDtcclxuZXhwb3J0cy5kZWZhdWx0ID0ge1xyXG4gICAgUG9zdGdyZXN0Q2xpZW50OiBQb3N0Z3Jlc3RDbGllbnRfMS5kZWZhdWx0LFxyXG4gICAgUG9zdGdyZXN0UXVlcnlCdWlsZGVyOiBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXJfMS5kZWZhdWx0LFxyXG4gICAgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcjogUG9zdGdyZXN0RmlsdGVyQnVpbGRlcl8xLmRlZmF1bHQsXHJcbiAgICBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyOiBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyXzEuZGVmYXVsdCxcclxuICAgIFBvc3RncmVzdEJ1aWxkZXI6IFBvc3RncmVzdEJ1aWxkZXJfMS5kZWZhdWx0LFxyXG4gICAgUG9zdGdyZXN0RXJyb3I6IFBvc3RncmVzdEVycm9yXzEuZGVmYXVsdCxcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REALTIME_CHANNEL_STATES: () => (/* binding */ REALTIME_CHANNEL_STATES),\n/* harmony export */   REALTIME_LISTEN_TYPES: () => (/* binding */ REALTIME_LISTEN_TYPES),\n/* harmony export */   REALTIME_POSTGRES_CHANGES_LISTEN_EVENT: () => (/* binding */ REALTIME_POSTGRES_CHANGES_LISTEN_EVENT),\n/* harmony export */   REALTIME_SUBSCRIBE_STATES: () => (/* binding */ REALTIME_SUBSCRIBE_STATES),\n/* harmony export */   \"default\": () => (/* binding */ RealtimeChannel)\n/* harmony export */ });\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/constants */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js\");\n/* harmony import */ var _lib_push__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/push */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/push.js\");\n/* harmony import */ var _lib_timer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/timer */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/timer.js\");\n/* harmony import */ var _RealtimePresence__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./RealtimePresence */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js\");\n/* harmony import */ var _lib_transformers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/transformers */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nvar REALTIME_POSTGRES_CHANGES_LISTEN_EVENT;\r\n(function (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT) {\r\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"ALL\"] = \"*\";\r\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"INSERT\"] = \"INSERT\";\r\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"UPDATE\"] = \"UPDATE\";\r\n    REALTIME_POSTGRES_CHANGES_LISTEN_EVENT[\"DELETE\"] = \"DELETE\";\r\n})(REALTIME_POSTGRES_CHANGES_LISTEN_EVENT || (REALTIME_POSTGRES_CHANGES_LISTEN_EVENT = {}));\r\nvar REALTIME_LISTEN_TYPES;\r\n(function (REALTIME_LISTEN_TYPES) {\r\n    REALTIME_LISTEN_TYPES[\"BROADCAST\"] = \"broadcast\";\r\n    REALTIME_LISTEN_TYPES[\"PRESENCE\"] = \"presence\";\r\n    REALTIME_LISTEN_TYPES[\"POSTGRES_CHANGES\"] = \"postgres_changes\";\r\n    REALTIME_LISTEN_TYPES[\"SYSTEM\"] = \"system\";\r\n})(REALTIME_LISTEN_TYPES || (REALTIME_LISTEN_TYPES = {}));\r\nvar REALTIME_SUBSCRIBE_STATES;\r\n(function (REALTIME_SUBSCRIBE_STATES) {\r\n    REALTIME_SUBSCRIBE_STATES[\"SUBSCRIBED\"] = \"SUBSCRIBED\";\r\n    REALTIME_SUBSCRIBE_STATES[\"TIMED_OUT\"] = \"TIMED_OUT\";\r\n    REALTIME_SUBSCRIBE_STATES[\"CLOSED\"] = \"CLOSED\";\r\n    REALTIME_SUBSCRIBE_STATES[\"CHANNEL_ERROR\"] = \"CHANNEL_ERROR\";\r\n})(REALTIME_SUBSCRIBE_STATES || (REALTIME_SUBSCRIBE_STATES = {}));\r\nconst REALTIME_CHANNEL_STATES = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES;\r\n/** A channel is the basic building block of Realtime\r\n * and narrows the scope of data flow to subscribed clients.\r\n * You can think of a channel as a chatroom where participants are able to see who's online\r\n * and send and receive messages.\r\n */\r\nclass RealtimeChannel {\r\n    constructor(\r\n    /** Topic name can be any string. */\r\n    topic, params = { config: {} }, socket) {\r\n        var _a, _b;\r\n        this.topic = topic;\r\n        this.params = params;\r\n        this.socket = socket;\r\n        this.bindings = {};\r\n        this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.closed;\r\n        this.joinedOnce = false;\r\n        this.pushBuffer = [];\r\n        this.subTopic = topic.replace(/^realtime:/i, '');\r\n        this.params.config = Object.assign({\r\n            broadcast: { ack: false, self: false },\r\n            presence: { key: '', enabled: false },\r\n            private: false,\r\n        }, params.config);\r\n        this.timeout = this.socket.timeout;\r\n        this.joinPush = new _lib_push__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_EVENTS.join, this.params, this.timeout);\r\n        this.rejoinTimer = new _lib_timer__WEBPACK_IMPORTED_MODULE_2__[\"default\"](() => this._rejoinUntilConnected(), this.socket.reconnectAfterMs);\r\n        this.joinPush.receive('ok', () => {\r\n            this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.joined;\r\n            this.rejoinTimer.reset();\r\n            this.pushBuffer.forEach((pushEvent) => pushEvent.send());\r\n            this.pushBuffer = [];\r\n        });\r\n        this._onClose(() => {\r\n            this.rejoinTimer.reset();\r\n            this.socket.log('channel', `close ${this.topic} ${this._joinRef()}`);\r\n            this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.closed;\r\n            this.socket._remove(this);\r\n        });\r\n        this._onError((reason) => {\r\n            if (this._isLeaving() || this._isClosed()) {\r\n                return;\r\n            }\r\n            this.socket.log('channel', `error ${this.topic}`, reason);\r\n            this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.errored;\r\n            this.rejoinTimer.scheduleTimeout();\r\n        });\r\n        this.joinPush.receive('timeout', () => {\r\n            if (!this._isJoining()) {\r\n                return;\r\n            }\r\n            this.socket.log('channel', `timeout ${this.topic}`, this.joinPush.timeout);\r\n            this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.errored;\r\n            this.rejoinTimer.scheduleTimeout();\r\n        });\r\n        this.joinPush.receive('error', (reason) => {\r\n            if (this._isLeaving() || this._isClosed()) {\r\n                return;\r\n            }\r\n            this.socket.log('channel', `error ${this.topic}`, reason);\r\n            this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.errored;\r\n            this.rejoinTimer.scheduleTimeout();\r\n        });\r\n        this._on(_lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_EVENTS.reply, {}, (payload, ref) => {\r\n            this._trigger(this._replyEventName(ref), payload);\r\n        });\r\n        this.presence = new _RealtimePresence__WEBPACK_IMPORTED_MODULE_3__[\"default\"](this);\r\n        this.broadcastEndpointURL = (0,_lib_transformers__WEBPACK_IMPORTED_MODULE_4__.httpEndpointURL)(this.socket.endPoint);\r\n        this.private = this.params.config.private || false;\r\n        if (!this.private && ((_b = (_a = this.params.config) === null || _a === void 0 ? void 0 : _a.broadcast) === null || _b === void 0 ? void 0 : _b.replay)) {\r\n            throw `tried to use replay on public channel '${this.topic}'. It must be a private channel.`;\r\n        }\r\n    }\r\n    /** Subscribe registers your client with the server */\r\n    subscribe(callback, timeout = this.timeout) {\r\n        var _a, _b, _c;\r\n        if (!this.socket.isConnected()) {\r\n            this.socket.connect();\r\n        }\r\n        if (this.state == _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.closed) {\r\n            const { config: { broadcast, presence, private: isPrivate }, } = this.params;\r\n            const postgres_changes = (_b = (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.map((r) => r.filter)) !== null && _b !== void 0 ? _b : [];\r\n            const presence_enabled = (!!this.bindings[REALTIME_LISTEN_TYPES.PRESENCE] &&\r\n                this.bindings[REALTIME_LISTEN_TYPES.PRESENCE].length > 0) ||\r\n                ((_c = this.params.config.presence) === null || _c === void 0 ? void 0 : _c.enabled) === true;\r\n            const accessTokenPayload = {};\r\n            const config = {\r\n                broadcast,\r\n                presence: Object.assign(Object.assign({}, presence), { enabled: presence_enabled }),\r\n                postgres_changes,\r\n                private: isPrivate,\r\n            };\r\n            if (this.socket.accessTokenValue) {\r\n                accessTokenPayload.access_token = this.socket.accessTokenValue;\r\n            }\r\n            this._onError((e) => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, e));\r\n            this._onClose(() => callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CLOSED));\r\n            this.updateJoinPayload(Object.assign({ config }, accessTokenPayload));\r\n            this.joinedOnce = true;\r\n            this._rejoin(timeout);\r\n            this.joinPush\r\n                .receive('ok', async ({ postgres_changes }) => {\r\n                var _a;\r\n                this.socket.setAuth();\r\n                if (postgres_changes === undefined) {\r\n                    callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\r\n                    return;\r\n                }\r\n                else {\r\n                    const clientPostgresBindings = this.bindings.postgres_changes;\r\n                    const bindingsLen = (_a = clientPostgresBindings === null || clientPostgresBindings === void 0 ? void 0 : clientPostgresBindings.length) !== null && _a !== void 0 ? _a : 0;\r\n                    const newPostgresBindings = [];\r\n                    for (let i = 0; i < bindingsLen; i++) {\r\n                        const clientPostgresBinding = clientPostgresBindings[i];\r\n                        const { filter: { event, schema, table, filter }, } = clientPostgresBinding;\r\n                        const serverPostgresFilter = postgres_changes && postgres_changes[i];\r\n                        if (serverPostgresFilter &&\r\n                            serverPostgresFilter.event === event &&\r\n                            serverPostgresFilter.schema === schema &&\r\n                            serverPostgresFilter.table === table &&\r\n                            serverPostgresFilter.filter === filter) {\r\n                            newPostgresBindings.push(Object.assign(Object.assign({}, clientPostgresBinding), { id: serverPostgresFilter.id }));\r\n                        }\r\n                        else {\r\n                            this.unsubscribe();\r\n                            this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.errored;\r\n                            callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error('mismatch between server and client bindings for postgres changes'));\r\n                            return;\r\n                        }\r\n                    }\r\n                    this.bindings.postgres_changes = newPostgresBindings;\r\n                    callback && callback(REALTIME_SUBSCRIBE_STATES.SUBSCRIBED);\r\n                    return;\r\n                }\r\n            })\r\n                .receive('error', (error) => {\r\n                this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.errored;\r\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.CHANNEL_ERROR, new Error(JSON.stringify(Object.values(error).join(', ') || 'error')));\r\n                return;\r\n            })\r\n                .receive('timeout', () => {\r\n                callback === null || callback === void 0 ? void 0 : callback(REALTIME_SUBSCRIBE_STATES.TIMED_OUT);\r\n                return;\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    presenceState() {\r\n        return this.presence.state;\r\n    }\r\n    async track(payload, opts = {}) {\r\n        return await this.send({\r\n            type: 'presence',\r\n            event: 'track',\r\n            payload,\r\n        }, opts.timeout || this.timeout);\r\n    }\r\n    async untrack(opts = {}) {\r\n        return await this.send({\r\n            type: 'presence',\r\n            event: 'untrack',\r\n        }, opts);\r\n    }\r\n    on(type, filter, callback) {\r\n        if (this.state === _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.joined && type === REALTIME_LISTEN_TYPES.PRESENCE) {\r\n            this.socket.log('channel', `resubscribe to ${this.topic} due to change in presence callbacks on joined channel`);\r\n            this.unsubscribe().then(() => this.subscribe());\r\n        }\r\n        return this._on(type, filter, callback);\r\n    }\r\n    /**\r\n     * Sends a message into the channel.\r\n     *\r\n     * @param args Arguments to send to channel\r\n     * @param args.type The type of event to send\r\n     * @param args.event The name of the event being sent\r\n     * @param args.payload Payload to be sent\r\n     * @param opts Options to be used during the send process\r\n     */\r\n    async send(args, opts = {}) {\r\n        var _a, _b;\r\n        if (!this._canPush() && args.type === 'broadcast') {\r\n            const { event, payload: endpoint_payload } = args;\r\n            const authorization = this.socket.accessTokenValue\r\n                ? `Bearer ${this.socket.accessTokenValue}`\r\n                : '';\r\n            const options = {\r\n                method: 'POST',\r\n                headers: {\r\n                    Authorization: authorization,\r\n                    apikey: this.socket.apiKey ? this.socket.apiKey : '',\r\n                    'Content-Type': 'application/json',\r\n                },\r\n                body: JSON.stringify({\r\n                    messages: [\r\n                        {\r\n                            topic: this.subTopic,\r\n                            event,\r\n                            payload: endpoint_payload,\r\n                            private: this.private,\r\n                        },\r\n                    ],\r\n                }),\r\n            };\r\n            try {\r\n                const response = await this._fetchWithTimeout(this.broadcastEndpointURL, options, (_a = opts.timeout) !== null && _a !== void 0 ? _a : this.timeout);\r\n                await ((_b = response.body) === null || _b === void 0 ? void 0 : _b.cancel());\r\n                return response.ok ? 'ok' : 'error';\r\n            }\r\n            catch (error) {\r\n                if (error.name === 'AbortError') {\r\n                    return 'timed out';\r\n                }\r\n                else {\r\n                    return 'error';\r\n                }\r\n            }\r\n        }\r\n        else {\r\n            return new Promise((resolve) => {\r\n                var _a, _b, _c;\r\n                const push = this._push(args.type, args, opts.timeout || this.timeout);\r\n                if (args.type === 'broadcast' && !((_c = (_b = (_a = this.params) === null || _a === void 0 ? void 0 : _a.config) === null || _b === void 0 ? void 0 : _b.broadcast) === null || _c === void 0 ? void 0 : _c.ack)) {\r\n                    resolve('ok');\r\n                }\r\n                push.receive('ok', () => resolve('ok'));\r\n                push.receive('error', () => resolve('error'));\r\n                push.receive('timeout', () => resolve('timed out'));\r\n            });\r\n        }\r\n    }\r\n    updateJoinPayload(payload) {\r\n        this.joinPush.updatePayload(payload);\r\n    }\r\n    /**\r\n     * Leaves the channel.\r\n     *\r\n     * Unsubscribes from server events, and instructs channel to terminate on server.\r\n     * Triggers onClose() hooks.\r\n     *\r\n     * To receive leave acknowledgements, use the a `receive` hook to bind to the server ack, ie:\r\n     * channel.unsubscribe().receive(\"ok\", () => alert(\"left!\") )\r\n     */\r\n    unsubscribe(timeout = this.timeout) {\r\n        this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.leaving;\r\n        const onClose = () => {\r\n            this.socket.log('channel', `leave ${this.topic}`);\r\n            this._trigger(_lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_EVENTS.close, 'leave', this._joinRef());\r\n        };\r\n        this.joinPush.destroy();\r\n        let leavePush = null;\r\n        return new Promise((resolve) => {\r\n            leavePush = new _lib_push__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_EVENTS.leave, {}, timeout);\r\n            leavePush\r\n                .receive('ok', () => {\r\n                onClose();\r\n                resolve('ok');\r\n            })\r\n                .receive('timeout', () => {\r\n                onClose();\r\n                resolve('timed out');\r\n            })\r\n                .receive('error', () => {\r\n                resolve('error');\r\n            });\r\n            leavePush.send();\r\n            if (!this._canPush()) {\r\n                leavePush.trigger('ok', {});\r\n            }\r\n        }).finally(() => {\r\n            leavePush === null || leavePush === void 0 ? void 0 : leavePush.destroy();\r\n        });\r\n    }\r\n    /**\r\n     * Teardown the channel.\r\n     *\r\n     * Destroys and stops related timers.\r\n     */\r\n    teardown() {\r\n        this.pushBuffer.forEach((push) => push.destroy());\r\n        this.pushBuffer = [];\r\n        this.rejoinTimer.reset();\r\n        this.joinPush.destroy();\r\n        this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.closed;\r\n        this.bindings = {};\r\n    }\r\n    /** @internal */\r\n    async _fetchWithTimeout(url, options, timeout) {\r\n        const controller = new AbortController();\r\n        const id = setTimeout(() => controller.abort(), timeout);\r\n        const response = await this.socket.fetch(url, Object.assign(Object.assign({}, options), { signal: controller.signal }));\r\n        clearTimeout(id);\r\n        return response;\r\n    }\r\n    /** @internal */\r\n    _push(event, payload, timeout = this.timeout) {\r\n        if (!this.joinedOnce) {\r\n            throw `tried to push '${event}' to '${this.topic}' before joining. Use channel.subscribe() before pushing events`;\r\n        }\r\n        let pushEvent = new _lib_push__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this, event, payload, timeout);\r\n        if (this._canPush()) {\r\n            pushEvent.send();\r\n        }\r\n        else {\r\n            this._addToPushBuffer(pushEvent);\r\n        }\r\n        return pushEvent;\r\n    }\r\n    /** @internal */\r\n    _addToPushBuffer(pushEvent) {\r\n        pushEvent.startTimeout();\r\n        this.pushBuffer.push(pushEvent);\r\n        // Enforce buffer size limit\r\n        if (this.pushBuffer.length > _lib_constants__WEBPACK_IMPORTED_MODULE_0__.MAX_PUSH_BUFFER_SIZE) {\r\n            const removedPush = this.pushBuffer.shift();\r\n            if (removedPush) {\r\n                removedPush.destroy();\r\n                this.socket.log('channel', `discarded push due to buffer overflow: ${removedPush.event}`, removedPush.payload);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Overridable message hook\r\n     *\r\n     * Receives all events for specialized message handling before dispatching to the channel callbacks.\r\n     * Must return the payload, modified or unmodified.\r\n     *\r\n     * @internal\r\n     */\r\n    _onMessage(_event, payload, _ref) {\r\n        return payload;\r\n    }\r\n    /** @internal */\r\n    _isMember(topic) {\r\n        return this.topic === topic;\r\n    }\r\n    /** @internal */\r\n    _joinRef() {\r\n        return this.joinPush.ref;\r\n    }\r\n    /** @internal */\r\n    _trigger(type, payload, ref) {\r\n        var _a, _b;\r\n        const typeLower = type.toLocaleLowerCase();\r\n        const { close, error, leave, join } = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_EVENTS;\r\n        const events = [close, error, leave, join];\r\n        if (ref && events.indexOf(typeLower) >= 0 && ref !== this._joinRef()) {\r\n            return;\r\n        }\r\n        let handledPayload = this._onMessage(typeLower, payload, ref);\r\n        if (payload && !handledPayload) {\r\n            throw 'channel onMessage callbacks must return the payload, modified or unmodified';\r\n        }\r\n        if (['insert', 'update', 'delete'].includes(typeLower)) {\r\n            (_a = this.bindings.postgres_changes) === null || _a === void 0 ? void 0 : _a.filter((bind) => {\r\n                var _a, _b, _c;\r\n                return ((_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event) === '*' || ((_c = (_b = bind.filter) === null || _b === void 0 ? void 0 : _b.event) === null || _c === void 0 ? void 0 : _c.toLocaleLowerCase()) === typeLower;\r\n            }).map((bind) => bind.callback(handledPayload, ref));\r\n        }\r\n        else {\r\n            (_b = this.bindings[typeLower]) === null || _b === void 0 ? void 0 : _b.filter((bind) => {\r\n                var _a, _b, _c, _d, _e, _f;\r\n                if (['broadcast', 'presence', 'postgres_changes'].includes(typeLower)) {\r\n                    if ('id' in bind) {\r\n                        const bindId = bind.id;\r\n                        const bindEvent = (_a = bind.filter) === null || _a === void 0 ? void 0 : _a.event;\r\n                        return (bindId &&\r\n                            ((_b = payload.ids) === null || _b === void 0 ? void 0 : _b.includes(bindId)) &&\r\n                            (bindEvent === '*' ||\r\n                                (bindEvent === null || bindEvent === void 0 ? void 0 : bindEvent.toLocaleLowerCase()) === ((_c = payload.data) === null || _c === void 0 ? void 0 : _c.type.toLocaleLowerCase())));\r\n                    }\r\n                    else {\r\n                        const bindEvent = (_e = (_d = bind === null || bind === void 0 ? void 0 : bind.filter) === null || _d === void 0 ? void 0 : _d.event) === null || _e === void 0 ? void 0 : _e.toLocaleLowerCase();\r\n                        return bindEvent === '*' || bindEvent === ((_f = payload === null || payload === void 0 ? void 0 : payload.event) === null || _f === void 0 ? void 0 : _f.toLocaleLowerCase());\r\n                    }\r\n                }\r\n                else {\r\n                    return bind.type.toLocaleLowerCase() === typeLower;\r\n                }\r\n            }).map((bind) => {\r\n                if (typeof handledPayload === 'object' && 'ids' in handledPayload) {\r\n                    const postgresChanges = handledPayload.data;\r\n                    const { schema, table, commit_timestamp, type, errors } = postgresChanges;\r\n                    const enrichedPayload = {\r\n                        schema: schema,\r\n                        table: table,\r\n                        commit_timestamp: commit_timestamp,\r\n                        eventType: type,\r\n                        new: {},\r\n                        old: {},\r\n                        errors: errors,\r\n                    };\r\n                    handledPayload = Object.assign(Object.assign({}, enrichedPayload), this._getPayloadRecords(postgresChanges));\r\n                }\r\n                bind.callback(handledPayload, ref);\r\n            });\r\n        }\r\n    }\r\n    /** @internal */\r\n    _isClosed() {\r\n        return this.state === _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.closed;\r\n    }\r\n    /** @internal */\r\n    _isJoined() {\r\n        return this.state === _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.joined;\r\n    }\r\n    /** @internal */\r\n    _isJoining() {\r\n        return this.state === _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.joining;\r\n    }\r\n    /** @internal */\r\n    _isLeaving() {\r\n        return this.state === _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.leaving;\r\n    }\r\n    /** @internal */\r\n    _replyEventName(ref) {\r\n        return `chan_reply_${ref}`;\r\n    }\r\n    /** @internal */\r\n    _on(type, filter, callback) {\r\n        const typeLower = type.toLocaleLowerCase();\r\n        const binding = {\r\n            type: typeLower,\r\n            filter: filter,\r\n            callback: callback,\r\n        };\r\n        if (this.bindings[typeLower]) {\r\n            this.bindings[typeLower].push(binding);\r\n        }\r\n        else {\r\n            this.bindings[typeLower] = [binding];\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    _off(type, filter) {\r\n        const typeLower = type.toLocaleLowerCase();\r\n        if (this.bindings[typeLower]) {\r\n            this.bindings[typeLower] = this.bindings[typeLower].filter((bind) => {\r\n                var _a;\r\n                return !(((_a = bind.type) === null || _a === void 0 ? void 0 : _a.toLocaleLowerCase()) === typeLower &&\r\n                    RealtimeChannel.isEqual(bind.filter, filter));\r\n            });\r\n        }\r\n        return this;\r\n    }\r\n    /** @internal */\r\n    static isEqual(obj1, obj2) {\r\n        if (Object.keys(obj1).length !== Object.keys(obj2).length) {\r\n            return false;\r\n        }\r\n        for (const k in obj1) {\r\n            if (obj1[k] !== obj2[k]) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /** @internal */\r\n    _rejoinUntilConnected() {\r\n        this.rejoinTimer.scheduleTimeout();\r\n        if (this.socket.isConnected()) {\r\n            this._rejoin();\r\n        }\r\n    }\r\n    /**\r\n     * Registers a callback that will be executed when the channel closes.\r\n     *\r\n     * @internal\r\n     */\r\n    _onClose(callback) {\r\n        this._on(_lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_EVENTS.close, {}, callback);\r\n    }\r\n    /**\r\n     * Registers a callback that will be executed when the channel encounteres an error.\r\n     *\r\n     * @internal\r\n     */\r\n    _onError(callback) {\r\n        this._on(_lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_EVENTS.error, {}, (reason) => callback(reason));\r\n    }\r\n    /**\r\n     * Returns `true` if the socket is connected and the channel has been joined.\r\n     *\r\n     * @internal\r\n     */\r\n    _canPush() {\r\n        return this.socket.isConnected() && this._isJoined();\r\n    }\r\n    /** @internal */\r\n    _rejoin(timeout = this.timeout) {\r\n        if (this._isLeaving()) {\r\n            return;\r\n        }\r\n        this.socket._leaveOpenTopic(this.topic);\r\n        this.state = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.CHANNEL_STATES.joining;\r\n        this.joinPush.resend(timeout);\r\n    }\r\n    /** @internal */\r\n    _getPayloadRecords(payload) {\r\n        const records = {\r\n            new: {},\r\n            old: {},\r\n        };\r\n        if (payload.type === 'INSERT' || payload.type === 'UPDATE') {\r\n            records.new = _lib_transformers__WEBPACK_IMPORTED_MODULE_4__.convertChangeData(payload.columns, payload.record);\r\n        }\r\n        if (payload.type === 'UPDATE' || payload.type === 'DELETE') {\r\n            records.old = _lib_transformers__WEBPACK_IMPORTED_MODULE_4__.convertChangeData(payload.columns, payload.old_record);\r\n        }\r\n        return records;\r\n    }\r\n}\r\n//# sourceMappingURL=RealtimeChannel.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ RealtimeClient)\n/* harmony export */ });\n/* harmony import */ var _lib_websocket_factory__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/websocket-factory */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/constants */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js\");\n/* harmony import */ var _lib_serializer__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/serializer */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/serializer.js\");\n/* harmony import */ var _lib_timer__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/timer */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/timer.js\");\n/* harmony import */ var _lib_transformers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/transformers */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js\");\n/* harmony import */ var _RealtimeChannel__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./RealtimeChannel */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js\");\n\r\n\r\n\r\n\r\n\r\n\r\nconst noop = () => { };\r\n// Connection-related constants\r\nconst CONNECTION_TIMEOUTS = {\r\n    HEARTBEAT_INTERVAL: 25000,\r\n    RECONNECT_DELAY: 10,\r\n    HEARTBEAT_TIMEOUT_FALLBACK: 100,\r\n};\r\nconst RECONNECT_INTERVALS = [1000, 2000, 5000, 10000];\r\nconst DEFAULT_RECONNECT_FALLBACK = 10000;\r\nconst WORKER_SCRIPT = `\r\n  addEventListener(\"message\", (e) => {\r\n    if (e.data.event === \"start\") {\r\n      setInterval(() => postMessage({ event: \"keepAlive\" }), e.data.interval);\r\n    }\r\n  });`;\r\nclass RealtimeClient {\r\n    /**\r\n     * Initializes the Socket.\r\n     *\r\n     * @param endPoint The string WebSocket endpoint, ie, \"ws://example.com/socket\", \"wss://example.com\", \"/socket\" (inherited host & protocol)\r\n     * @param httpEndpoint The string HTTP endpoint, ie, \"https://example.com\", \"/\" (inherited host & protocol)\r\n     * @param options.transport The Websocket Transport, for example WebSocket. This can be a custom implementation\r\n     * @param options.timeout The default timeout in milliseconds to trigger push timeouts.\r\n     * @param options.params The optional params to pass when connecting.\r\n     * @param options.headers Deprecated: headers cannot be set on websocket connections and this option will be removed in the future.\r\n     * @param options.heartbeatIntervalMs The millisec interval to send a heartbeat message.\r\n     * @param options.heartbeatCallback The optional function to handle heartbeat status.\r\n     * @param options.logger The optional function for specialized logging, ie: logger: (kind, msg, data) => { console.log(`${kind}: ${msg}`, data) }\r\n     * @param options.logLevel Sets the log level for Realtime\r\n     * @param options.encode The function to encode outgoing messages. Defaults to JSON: (payload, callback) => callback(JSON.stringify(payload))\r\n     * @param options.decode The function to decode incoming messages. Defaults to Serializer's decode.\r\n     * @param options.reconnectAfterMs he optional function that returns the millsec reconnect interval. Defaults to stepped backoff off.\r\n     * @param options.worker Use Web Worker to set a side flow. Defaults to false.\r\n     * @param options.workerUrl The URL of the worker script. Defaults to https://realtime.supabase.com/worker.js that includes a heartbeat event call to keep the connection alive.\r\n     */\r\n    constructor(endPoint, options) {\r\n        var _a;\r\n        this.accessTokenValue = null;\r\n        this.apiKey = null;\r\n        this.channels = new Array();\r\n        this.endPoint = '';\r\n        this.httpEndpoint = '';\r\n        /** @deprecated headers cannot be set on websocket connections */\r\n        this.headers = {};\r\n        this.params = {};\r\n        this.timeout = _lib_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_TIMEOUT;\r\n        this.transport = null;\r\n        this.heartbeatIntervalMs = CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\r\n        this.heartbeatTimer = undefined;\r\n        this.pendingHeartbeatRef = null;\r\n        this.heartbeatCallback = noop;\r\n        this.ref = 0;\r\n        this.reconnectTimer = null;\r\n        this.logger = noop;\r\n        this.conn = null;\r\n        this.sendBuffer = [];\r\n        this.serializer = new _lib_serializer__WEBPACK_IMPORTED_MODULE_2__[\"default\"]();\r\n        this.stateChangeCallbacks = {\r\n            open: [],\r\n            close: [],\r\n            error: [],\r\n            message: [],\r\n        };\r\n        this.accessToken = null;\r\n        this._connectionState = 'disconnected';\r\n        this._wasManualDisconnect = false;\r\n        this._authPromise = null;\r\n        /**\r\n         * Use either custom fetch, if provided, or default fetch to make HTTP requests\r\n         *\r\n         * @internal\r\n         */\r\n        this._resolveFetch = (customFetch) => {\r\n            let _fetch;\r\n            if (customFetch) {\r\n                _fetch = customFetch;\r\n            }\r\n            else if (typeof fetch === 'undefined') {\r\n                // Node.js environment without native fetch\r\n                _fetch = (...args) => Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @supabase/node-fetch */ \"(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\", 23))\r\n                    .then(({ default: fetch }) => fetch(...args))\r\n                    .catch((error) => {\r\n                    throw new Error(`Failed to load @supabase/node-fetch: ${error.message}. ` +\r\n                        `This is required for HTTP requests in Node.js environments without native fetch.`);\r\n                });\r\n            }\r\n            else {\r\n                _fetch = fetch;\r\n            }\r\n            return (...args) => _fetch(...args);\r\n        };\r\n        // Validate required parameters\r\n        if (!((_a = options === null || options === void 0 ? void 0 : options.params) === null || _a === void 0 ? void 0 : _a.apikey)) {\r\n            throw new Error('API key is required to connect to Realtime');\r\n        }\r\n        this.apiKey = options.params.apikey;\r\n        // Initialize endpoint URLs\r\n        this.endPoint = `${endPoint}/${_lib_constants__WEBPACK_IMPORTED_MODULE_1__.TRANSPORTS.websocket}`;\r\n        this.httpEndpoint = (0,_lib_transformers__WEBPACK_IMPORTED_MODULE_4__.httpEndpointURL)(endPoint);\r\n        this._initializeOptions(options);\r\n        this._setupReconnectionTimer();\r\n        this.fetch = this._resolveFetch(options === null || options === void 0 ? void 0 : options.fetch);\r\n    }\r\n    /**\r\n     * Connects the socket, unless already connected.\r\n     */\r\n    connect() {\r\n        // Skip if already connecting, disconnecting, or connected\r\n        if (this.isConnecting() ||\r\n            this.isDisconnecting() ||\r\n            (this.conn !== null && this.isConnected())) {\r\n            return;\r\n        }\r\n        this._setConnectionState('connecting');\r\n        this._setAuthSafely('connect');\r\n        // Establish WebSocket connection\r\n        if (this.transport) {\r\n            // Use custom transport if provided\r\n            this.conn = new this.transport(this.endpointURL());\r\n        }\r\n        else {\r\n            // Try to use native WebSocket\r\n            try {\r\n                this.conn = _lib_websocket_factory__WEBPACK_IMPORTED_MODULE_0__[\"default\"].createWebSocket(this.endpointURL());\r\n            }\r\n            catch (error) {\r\n                this._setConnectionState('disconnected');\r\n                const errorMessage = error.message;\r\n                // Provide helpful error message based on environment\r\n                if (errorMessage.includes('Node.js')) {\r\n                    throw new Error(`${errorMessage}\\n\\n` +\r\n                        'To use Realtime in Node.js, you need to provide a WebSocket implementation:\\n\\n' +\r\n                        'Option 1: Use Node.js 22+ which has native WebSocket support\\n' +\r\n                        'Option 2: Install and provide the \"ws\" package:\\n\\n' +\r\n                        '  npm install ws\\n\\n' +\r\n                        '  import ws from \"ws\"\\n' +\r\n                        '  const client = new RealtimeClient(url, {\\n' +\r\n                        '    ...options,\\n' +\r\n                        '    transport: ws\\n' +\r\n                        '  })');\r\n                }\r\n                throw new Error(`WebSocket not available: ${errorMessage}`);\r\n            }\r\n        }\r\n        this._setupConnectionHandlers();\r\n    }\r\n    /**\r\n     * Returns the URL of the websocket.\r\n     * @returns string The URL of the websocket.\r\n     */\r\n    endpointURL() {\r\n        return this._appendParams(this.endPoint, Object.assign({}, this.params, { vsn: _lib_constants__WEBPACK_IMPORTED_MODULE_1__.VSN }));\r\n    }\r\n    /**\r\n     * Disconnects the socket.\r\n     *\r\n     * @param code A numeric status code to send on disconnect.\r\n     * @param reason A custom reason for the disconnect.\r\n     */\r\n    disconnect(code, reason) {\r\n        if (this.isDisconnecting()) {\r\n            return;\r\n        }\r\n        this._setConnectionState('disconnecting', true);\r\n        if (this.conn) {\r\n            // Setup fallback timer to prevent hanging in disconnecting state\r\n            const fallbackTimer = setTimeout(() => {\r\n                this._setConnectionState('disconnected');\r\n            }, 100);\r\n            this.conn.onclose = () => {\r\n                clearTimeout(fallbackTimer);\r\n                this._setConnectionState('disconnected');\r\n            };\r\n            // Close the WebSocket connection\r\n            if (code) {\r\n                this.conn.close(code, reason !== null && reason !== void 0 ? reason : '');\r\n            }\r\n            else {\r\n                this.conn.close();\r\n            }\r\n            this._teardownConnection();\r\n        }\r\n        else {\r\n            this._setConnectionState('disconnected');\r\n        }\r\n    }\r\n    /**\r\n     * Returns all created channels\r\n     */\r\n    getChannels() {\r\n        return this.channels;\r\n    }\r\n    /**\r\n     * Unsubscribes and removes a single channel\r\n     * @param channel A RealtimeChannel instance\r\n     */\r\n    async removeChannel(channel) {\r\n        const status = await channel.unsubscribe();\r\n        if (this.channels.length === 0) {\r\n            this.disconnect();\r\n        }\r\n        return status;\r\n    }\r\n    /**\r\n     * Unsubscribes and removes all channels\r\n     */\r\n    async removeAllChannels() {\r\n        const values_1 = await Promise.all(this.channels.map((channel) => channel.unsubscribe()));\r\n        this.channels = [];\r\n        this.disconnect();\r\n        return values_1;\r\n    }\r\n    /**\r\n     * Logs the message.\r\n     *\r\n     * For customized logging, `this.logger` can be overridden.\r\n     */\r\n    log(kind, msg, data) {\r\n        this.logger(kind, msg, data);\r\n    }\r\n    /**\r\n     * Returns the current state of the socket.\r\n     */\r\n    connectionState() {\r\n        switch (this.conn && this.conn.readyState) {\r\n            case _lib_constants__WEBPACK_IMPORTED_MODULE_1__.SOCKET_STATES.connecting:\r\n                return _lib_constants__WEBPACK_IMPORTED_MODULE_1__.CONNECTION_STATE.Connecting;\r\n            case _lib_constants__WEBPACK_IMPORTED_MODULE_1__.SOCKET_STATES.open:\r\n                return _lib_constants__WEBPACK_IMPORTED_MODULE_1__.CONNECTION_STATE.Open;\r\n            case _lib_constants__WEBPACK_IMPORTED_MODULE_1__.SOCKET_STATES.closing:\r\n                return _lib_constants__WEBPACK_IMPORTED_MODULE_1__.CONNECTION_STATE.Closing;\r\n            default:\r\n                return _lib_constants__WEBPACK_IMPORTED_MODULE_1__.CONNECTION_STATE.Closed;\r\n        }\r\n    }\r\n    /**\r\n     * Returns `true` is the connection is open.\r\n     */\r\n    isConnected() {\r\n        return this.connectionState() === _lib_constants__WEBPACK_IMPORTED_MODULE_1__.CONNECTION_STATE.Open;\r\n    }\r\n    /**\r\n     * Returns `true` if the connection is currently connecting.\r\n     */\r\n    isConnecting() {\r\n        return this._connectionState === 'connecting';\r\n    }\r\n    /**\r\n     * Returns `true` if the connection is currently disconnecting.\r\n     */\r\n    isDisconnecting() {\r\n        return this._connectionState === 'disconnecting';\r\n    }\r\n    channel(topic, params = { config: {} }) {\r\n        const realtimeTopic = `realtime:${topic}`;\r\n        const exists = this.getChannels().find((c) => c.topic === realtimeTopic);\r\n        if (!exists) {\r\n            const chan = new _RealtimeChannel__WEBPACK_IMPORTED_MODULE_5__[\"default\"](`realtime:${topic}`, params, this);\r\n            this.channels.push(chan);\r\n            return chan;\r\n        }\r\n        else {\r\n            return exists;\r\n        }\r\n    }\r\n    /**\r\n     * Push out a message if the socket is connected.\r\n     *\r\n     * If the socket is not connected, the message gets enqueued within a local buffer, and sent out when a connection is next established.\r\n     */\r\n    push(data) {\r\n        const { topic, event, payload, ref } = data;\r\n        const callback = () => {\r\n            this.encode(data, (result) => {\r\n                var _a;\r\n                (_a = this.conn) === null || _a === void 0 ? void 0 : _a.send(result);\r\n            });\r\n        };\r\n        this.log('push', `${topic} ${event} (${ref})`, payload);\r\n        if (this.isConnected()) {\r\n            callback();\r\n        }\r\n        else {\r\n            this.sendBuffer.push(callback);\r\n        }\r\n    }\r\n    /**\r\n     * Sets the JWT access token used for channel subscription authorization and Realtime RLS.\r\n     *\r\n     * If param is null it will use the `accessToken` callback function or the token set on the client.\r\n     *\r\n     * On callback used, it will set the value of the token internal to the client.\r\n     *\r\n     * @param token A JWT string to override the token set on the client.\r\n     */\r\n    async setAuth(token = null) {\r\n        this._authPromise = this._performAuth(token);\r\n        try {\r\n            await this._authPromise;\r\n        }\r\n        finally {\r\n            this._authPromise = null;\r\n        }\r\n    }\r\n    /**\r\n     * Sends a heartbeat message if the socket is connected.\r\n     */\r\n    async sendHeartbeat() {\r\n        var _a;\r\n        if (!this.isConnected()) {\r\n            try {\r\n                this.heartbeatCallback('disconnected');\r\n            }\r\n            catch (e) {\r\n                this.log('error', 'error in heartbeat callback', e);\r\n            }\r\n            return;\r\n        }\r\n        // Handle heartbeat timeout and force reconnection if needed\r\n        if (this.pendingHeartbeatRef) {\r\n            this.pendingHeartbeatRef = null;\r\n            this.log('transport', 'heartbeat timeout. Attempting to re-establish connection');\r\n            try {\r\n                this.heartbeatCallback('timeout');\r\n            }\r\n            catch (e) {\r\n                this.log('error', 'error in heartbeat callback', e);\r\n            }\r\n            // Force reconnection after heartbeat timeout\r\n            this._wasManualDisconnect = false;\r\n            (_a = this.conn) === null || _a === void 0 ? void 0 : _a.close(_lib_constants__WEBPACK_IMPORTED_MODULE_1__.WS_CLOSE_NORMAL, 'heartbeat timeout');\r\n            setTimeout(() => {\r\n                var _a;\r\n                if (!this.isConnected()) {\r\n                    (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\r\n                }\r\n            }, CONNECTION_TIMEOUTS.HEARTBEAT_TIMEOUT_FALLBACK);\r\n            return;\r\n        }\r\n        // Send heartbeat message to server\r\n        this.pendingHeartbeatRef = this._makeRef();\r\n        this.push({\r\n            topic: 'phoenix',\r\n            event: 'heartbeat',\r\n            payload: {},\r\n            ref: this.pendingHeartbeatRef,\r\n        });\r\n        try {\r\n            this.heartbeatCallback('sent');\r\n        }\r\n        catch (e) {\r\n            this.log('error', 'error in heartbeat callback', e);\r\n        }\r\n        this._setAuthSafely('heartbeat');\r\n    }\r\n    onHeartbeat(callback) {\r\n        this.heartbeatCallback = callback;\r\n    }\r\n    /**\r\n     * Flushes send buffer\r\n     */\r\n    flushSendBuffer() {\r\n        if (this.isConnected() && this.sendBuffer.length > 0) {\r\n            this.sendBuffer.forEach((callback) => callback());\r\n            this.sendBuffer = [];\r\n        }\r\n    }\r\n    /**\r\n     * Return the next message ref, accounting for overflows\r\n     *\r\n     * @internal\r\n     */\r\n    _makeRef() {\r\n        let newRef = this.ref + 1;\r\n        if (newRef === this.ref) {\r\n            this.ref = 0;\r\n        }\r\n        else {\r\n            this.ref = newRef;\r\n        }\r\n        return this.ref.toString();\r\n    }\r\n    /**\r\n     * Unsubscribe from channels with the specified topic.\r\n     *\r\n     * @internal\r\n     */\r\n    _leaveOpenTopic(topic) {\r\n        let dupChannel = this.channels.find((c) => c.topic === topic && (c._isJoined() || c._isJoining()));\r\n        if (dupChannel) {\r\n            this.log('transport', `leaving duplicate topic \"${topic}\"`);\r\n            dupChannel.unsubscribe();\r\n        }\r\n    }\r\n    /**\r\n     * Removes a subscription from the socket.\r\n     *\r\n     * @param channel An open subscription.\r\n     *\r\n     * @internal\r\n     */\r\n    _remove(channel) {\r\n        this.channels = this.channels.filter((c) => c.topic !== channel.topic);\r\n    }\r\n    /** @internal */\r\n    _onConnMessage(rawMessage) {\r\n        this.decode(rawMessage.data, (msg) => {\r\n            // Handle heartbeat responses\r\n            if (msg.topic === 'phoenix' && msg.event === 'phx_reply') {\r\n                try {\r\n                    this.heartbeatCallback(msg.payload.status === 'ok' ? 'ok' : 'error');\r\n                }\r\n                catch (e) {\r\n                    this.log('error', 'error in heartbeat callback', e);\r\n                }\r\n            }\r\n            // Handle pending heartbeat reference cleanup\r\n            if (msg.ref && msg.ref === this.pendingHeartbeatRef) {\r\n                this.pendingHeartbeatRef = null;\r\n            }\r\n            // Log incoming message\r\n            const { topic, event, payload, ref } = msg;\r\n            const refString = ref ? `(${ref})` : '';\r\n            const status = payload.status || '';\r\n            this.log('receive', `${status} ${topic} ${event} ${refString}`.trim(), payload);\r\n            // Route message to appropriate channels\r\n            this.channels\r\n                .filter((channel) => channel._isMember(topic))\r\n                .forEach((channel) => channel._trigger(event, payload, ref));\r\n            this._triggerStateCallbacks('message', msg);\r\n        });\r\n    }\r\n    /**\r\n     * Clear specific timer\r\n     * @internal\r\n     */\r\n    _clearTimer(timer) {\r\n        var _a;\r\n        if (timer === 'heartbeat' && this.heartbeatTimer) {\r\n            clearInterval(this.heartbeatTimer);\r\n            this.heartbeatTimer = undefined;\r\n        }\r\n        else if (timer === 'reconnect') {\r\n            (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.reset();\r\n        }\r\n    }\r\n    /**\r\n     * Clear all timers\r\n     * @internal\r\n     */\r\n    _clearAllTimers() {\r\n        this._clearTimer('heartbeat');\r\n        this._clearTimer('reconnect');\r\n    }\r\n    /**\r\n     * Setup connection handlers for WebSocket events\r\n     * @internal\r\n     */\r\n    _setupConnectionHandlers() {\r\n        if (!this.conn)\r\n            return;\r\n        // Set binary type if supported (browsers and most WebSocket implementations)\r\n        if ('binaryType' in this.conn) {\r\n            ;\r\n            this.conn.binaryType = 'arraybuffer';\r\n        }\r\n        this.conn.onopen = () => this._onConnOpen();\r\n        this.conn.onerror = (error) => this._onConnError(error);\r\n        this.conn.onmessage = (event) => this._onConnMessage(event);\r\n        this.conn.onclose = (event) => this._onConnClose(event);\r\n    }\r\n    /**\r\n     * Teardown connection and cleanup resources\r\n     * @internal\r\n     */\r\n    _teardownConnection() {\r\n        if (this.conn) {\r\n            this.conn.onopen = null;\r\n            this.conn.onerror = null;\r\n            this.conn.onmessage = null;\r\n            this.conn.onclose = null;\r\n            this.conn = null;\r\n        }\r\n        this._clearAllTimers();\r\n        this.channels.forEach((channel) => channel.teardown());\r\n    }\r\n    /** @internal */\r\n    _onConnOpen() {\r\n        this._setConnectionState('connected');\r\n        this.log('transport', `connected to ${this.endpointURL()}`);\r\n        this.flushSendBuffer();\r\n        this._clearTimer('reconnect');\r\n        if (!this.worker) {\r\n            this._startHeartbeat();\r\n        }\r\n        else {\r\n            if (!this.workerRef) {\r\n                this._startWorkerHeartbeat();\r\n            }\r\n        }\r\n        this._triggerStateCallbacks('open');\r\n    }\r\n    /** @internal */\r\n    _startHeartbeat() {\r\n        this.heartbeatTimer && clearInterval(this.heartbeatTimer);\r\n        this.heartbeatTimer = setInterval(() => this.sendHeartbeat(), this.heartbeatIntervalMs);\r\n    }\r\n    /** @internal */\r\n    _startWorkerHeartbeat() {\r\n        if (this.workerUrl) {\r\n            this.log('worker', `starting worker for from ${this.workerUrl}`);\r\n        }\r\n        else {\r\n            this.log('worker', `starting default worker`);\r\n        }\r\n        const objectUrl = this._workerObjectUrl(this.workerUrl);\r\n        this.workerRef = new Worker(objectUrl);\r\n        this.workerRef.onerror = (error) => {\r\n            this.log('worker', 'worker error', error.message);\r\n            this.workerRef.terminate();\r\n        };\r\n        this.workerRef.onmessage = (event) => {\r\n            if (event.data.event === 'keepAlive') {\r\n                this.sendHeartbeat();\r\n            }\r\n        };\r\n        this.workerRef.postMessage({\r\n            event: 'start',\r\n            interval: this.heartbeatIntervalMs,\r\n        });\r\n    }\r\n    /** @internal */\r\n    _onConnClose(event) {\r\n        var _a;\r\n        this._setConnectionState('disconnected');\r\n        this.log('transport', 'close', event);\r\n        this._triggerChanError();\r\n        this._clearTimer('heartbeat');\r\n        // Only schedule reconnection if it wasn't a manual disconnect\r\n        if (!this._wasManualDisconnect) {\r\n            (_a = this.reconnectTimer) === null || _a === void 0 ? void 0 : _a.scheduleTimeout();\r\n        }\r\n        this._triggerStateCallbacks('close', event);\r\n    }\r\n    /** @internal */\r\n    _onConnError(error) {\r\n        this._setConnectionState('disconnected');\r\n        this.log('transport', `${error}`);\r\n        this._triggerChanError();\r\n        this._triggerStateCallbacks('error', error);\r\n    }\r\n    /** @internal */\r\n    _triggerChanError() {\r\n        this.channels.forEach((channel) => channel._trigger(_lib_constants__WEBPACK_IMPORTED_MODULE_1__.CHANNEL_EVENTS.error));\r\n    }\r\n    /** @internal */\r\n    _appendParams(url, params) {\r\n        if (Object.keys(params).length === 0) {\r\n            return url;\r\n        }\r\n        const prefix = url.match(/\\?/) ? '&' : '?';\r\n        const query = new URLSearchParams(params);\r\n        return `${url}${prefix}${query}`;\r\n    }\r\n    _workerObjectUrl(url) {\r\n        let result_url;\r\n        if (url) {\r\n            result_url = url;\r\n        }\r\n        else {\r\n            const blob = new Blob([WORKER_SCRIPT], { type: 'application/javascript' });\r\n            result_url = URL.createObjectURL(blob);\r\n        }\r\n        return result_url;\r\n    }\r\n    /**\r\n     * Set connection state with proper state management\r\n     * @internal\r\n     */\r\n    _setConnectionState(state, manual = false) {\r\n        this._connectionState = state;\r\n        if (state === 'connecting') {\r\n            this._wasManualDisconnect = false;\r\n        }\r\n        else if (state === 'disconnecting') {\r\n            this._wasManualDisconnect = manual;\r\n        }\r\n    }\r\n    /**\r\n     * Perform the actual auth operation\r\n     * @internal\r\n     */\r\n    async _performAuth(token = null) {\r\n        let tokenToSend;\r\n        if (token) {\r\n            tokenToSend = token;\r\n        }\r\n        else if (this.accessToken) {\r\n            // Always call the accessToken callback to get fresh token\r\n            tokenToSend = await this.accessToken();\r\n        }\r\n        else {\r\n            tokenToSend = this.accessTokenValue;\r\n        }\r\n        if (this.accessTokenValue != tokenToSend) {\r\n            this.accessTokenValue = tokenToSend;\r\n            this.channels.forEach((channel) => {\r\n                const payload = {\r\n                    access_token: tokenToSend,\r\n                    version: _lib_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_VERSION,\r\n                };\r\n                tokenToSend && channel.updateJoinPayload(payload);\r\n                if (channel.joinedOnce && channel._isJoined()) {\r\n                    channel._push(_lib_constants__WEBPACK_IMPORTED_MODULE_1__.CHANNEL_EVENTS.access_token, {\r\n                        access_token: tokenToSend,\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Wait for any in-flight auth operations to complete\r\n     * @internal\r\n     */\r\n    async _waitForAuthIfNeeded() {\r\n        if (this._authPromise) {\r\n            await this._authPromise;\r\n        }\r\n    }\r\n    /**\r\n     * Safely call setAuth with standardized error handling\r\n     * @internal\r\n     */\r\n    _setAuthSafely(context = 'general') {\r\n        this.setAuth().catch((e) => {\r\n            this.log('error', `error setting auth in ${context}`, e);\r\n        });\r\n    }\r\n    /**\r\n     * Trigger state change callbacks with proper error handling\r\n     * @internal\r\n     */\r\n    _triggerStateCallbacks(event, data) {\r\n        try {\r\n            this.stateChangeCallbacks[event].forEach((callback) => {\r\n                try {\r\n                    callback(data);\r\n                }\r\n                catch (e) {\r\n                    this.log('error', `error in ${event} callback`, e);\r\n                }\r\n            });\r\n        }\r\n        catch (e) {\r\n            this.log('error', `error triggering ${event} callbacks`, e);\r\n        }\r\n    }\r\n    /**\r\n     * Setup reconnection timer with proper configuration\r\n     * @internal\r\n     */\r\n    _setupReconnectionTimer() {\r\n        this.reconnectTimer = new _lib_timer__WEBPACK_IMPORTED_MODULE_3__[\"default\"](async () => {\r\n            setTimeout(async () => {\r\n                await this._waitForAuthIfNeeded();\r\n                if (!this.isConnected()) {\r\n                    this.connect();\r\n                }\r\n            }, CONNECTION_TIMEOUTS.RECONNECT_DELAY);\r\n        }, this.reconnectAfterMs);\r\n    }\r\n    /**\r\n     * Initialize client options with defaults\r\n     * @internal\r\n     */\r\n    _initializeOptions(options) {\r\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\r\n        // Set defaults\r\n        this.transport = (_a = options === null || options === void 0 ? void 0 : options.transport) !== null && _a !== void 0 ? _a : null;\r\n        this.timeout = (_b = options === null || options === void 0 ? void 0 : options.timeout) !== null && _b !== void 0 ? _b : _lib_constants__WEBPACK_IMPORTED_MODULE_1__.DEFAULT_TIMEOUT;\r\n        this.heartbeatIntervalMs =\r\n            (_c = options === null || options === void 0 ? void 0 : options.heartbeatIntervalMs) !== null && _c !== void 0 ? _c : CONNECTION_TIMEOUTS.HEARTBEAT_INTERVAL;\r\n        this.worker = (_d = options === null || options === void 0 ? void 0 : options.worker) !== null && _d !== void 0 ? _d : false;\r\n        this.accessToken = (_e = options === null || options === void 0 ? void 0 : options.accessToken) !== null && _e !== void 0 ? _e : null;\r\n        this.heartbeatCallback = (_f = options === null || options === void 0 ? void 0 : options.heartbeatCallback) !== null && _f !== void 0 ? _f : noop;\r\n        // Handle special cases\r\n        if (options === null || options === void 0 ? void 0 : options.params)\r\n            this.params = options.params;\r\n        if (options === null || options === void 0 ? void 0 : options.logger)\r\n            this.logger = options.logger;\r\n        if ((options === null || options === void 0 ? void 0 : options.logLevel) || (options === null || options === void 0 ? void 0 : options.log_level)) {\r\n            this.logLevel = options.logLevel || options.log_level;\r\n            this.params = Object.assign(Object.assign({}, this.params), { log_level: this.logLevel });\r\n        }\r\n        // Set up functions with defaults\r\n        this.reconnectAfterMs =\r\n            (_g = options === null || options === void 0 ? void 0 : options.reconnectAfterMs) !== null && _g !== void 0 ? _g : ((tries) => {\r\n                return RECONNECT_INTERVALS[tries - 1] || DEFAULT_RECONNECT_FALLBACK;\r\n            });\r\n        this.encode =\r\n            (_h = options === null || options === void 0 ? void 0 : options.encode) !== null && _h !== void 0 ? _h : ((payload, callback) => {\r\n                return callback(JSON.stringify(payload));\r\n            });\r\n        this.decode = (_j = options === null || options === void 0 ? void 0 : options.decode) !== null && _j !== void 0 ? _j : this.serializer.decode.bind(this.serializer);\r\n        // Handle worker setup\r\n        if (this.worker) {\r\n            if (typeof window !== 'undefined' && !window.Worker) {\r\n                throw new Error('Web Worker is not supported');\r\n            }\r\n            this.workerUrl = options === null || options === void 0 ? void 0 : options.workerUrl;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=RealtimeClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REALTIME_PRESENCE_LISTEN_EVENTS: () => (/* binding */ REALTIME_PRESENCE_LISTEN_EVENTS),\n/* harmony export */   \"default\": () => (/* binding */ RealtimePresence)\n/* harmony export */ });\n/*\r\n  This file draws heavily from https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/assets/js/phoenix/presence.js\r\n  License: https://github.com/phoenixframework/phoenix/blob/d344ec0a732ab4ee204215b31de69cf4be72e3bf/LICENSE.md\r\n*/\r\nvar REALTIME_PRESENCE_LISTEN_EVENTS;\r\n(function (REALTIME_PRESENCE_LISTEN_EVENTS) {\r\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"SYNC\"] = \"sync\";\r\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"JOIN\"] = \"join\";\r\n    REALTIME_PRESENCE_LISTEN_EVENTS[\"LEAVE\"] = \"leave\";\r\n})(REALTIME_PRESENCE_LISTEN_EVENTS || (REALTIME_PRESENCE_LISTEN_EVENTS = {}));\r\nclass RealtimePresence {\r\n    /**\r\n     * Initializes the Presence.\r\n     *\r\n     * @param channel - The RealtimeChannel\r\n     * @param opts - The options,\r\n     *        for example `{events: {state: 'state', diff: 'diff'}}`\r\n     */\r\n    constructor(channel, opts) {\r\n        this.channel = channel;\r\n        this.state = {};\r\n        this.pendingDiffs = [];\r\n        this.joinRef = null;\r\n        this.enabled = false;\r\n        this.caller = {\r\n            onJoin: () => { },\r\n            onLeave: () => { },\r\n            onSync: () => { },\r\n        };\r\n        const events = (opts === null || opts === void 0 ? void 0 : opts.events) || {\r\n            state: 'presence_state',\r\n            diff: 'presence_diff',\r\n        };\r\n        this.channel._on(events.state, {}, (newState) => {\r\n            const { onJoin, onLeave, onSync } = this.caller;\r\n            this.joinRef = this.channel._joinRef();\r\n            this.state = RealtimePresence.syncState(this.state, newState, onJoin, onLeave);\r\n            this.pendingDiffs.forEach((diff) => {\r\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\r\n            });\r\n            this.pendingDiffs = [];\r\n            onSync();\r\n        });\r\n        this.channel._on(events.diff, {}, (diff) => {\r\n            const { onJoin, onLeave, onSync } = this.caller;\r\n            if (this.inPendingSyncState()) {\r\n                this.pendingDiffs.push(diff);\r\n            }\r\n            else {\r\n                this.state = RealtimePresence.syncDiff(this.state, diff, onJoin, onLeave);\r\n                onSync();\r\n            }\r\n        });\r\n        this.onJoin((key, currentPresences, newPresences) => {\r\n            this.channel._trigger('presence', {\r\n                event: 'join',\r\n                key,\r\n                currentPresences,\r\n                newPresences,\r\n            });\r\n        });\r\n        this.onLeave((key, currentPresences, leftPresences) => {\r\n            this.channel._trigger('presence', {\r\n                event: 'leave',\r\n                key,\r\n                currentPresences,\r\n                leftPresences,\r\n            });\r\n        });\r\n        this.onSync(() => {\r\n            this.channel._trigger('presence', { event: 'sync' });\r\n        });\r\n    }\r\n    /**\r\n     * Used to sync the list of presences on the server with the\r\n     * client's state.\r\n     *\r\n     * An optional `onJoin` and `onLeave` callback can be provided to\r\n     * react to changes in the client's local presences across\r\n     * disconnects and reconnects with the server.\r\n     *\r\n     * @internal\r\n     */\r\n    static syncState(currentState, newState, onJoin, onLeave) {\r\n        const state = this.cloneDeep(currentState);\r\n        const transformedState = this.transformState(newState);\r\n        const joins = {};\r\n        const leaves = {};\r\n        this.map(state, (key, presences) => {\r\n            if (!transformedState[key]) {\r\n                leaves[key] = presences;\r\n            }\r\n        });\r\n        this.map(transformedState, (key, newPresences) => {\r\n            const currentPresences = state[key];\r\n            if (currentPresences) {\r\n                const newPresenceRefs = newPresences.map((m) => m.presence_ref);\r\n                const curPresenceRefs = currentPresences.map((m) => m.presence_ref);\r\n                const joinedPresences = newPresences.filter((m) => curPresenceRefs.indexOf(m.presence_ref) < 0);\r\n                const leftPresences = currentPresences.filter((m) => newPresenceRefs.indexOf(m.presence_ref) < 0);\r\n                if (joinedPresences.length > 0) {\r\n                    joins[key] = joinedPresences;\r\n                }\r\n                if (leftPresences.length > 0) {\r\n                    leaves[key] = leftPresences;\r\n                }\r\n            }\r\n            else {\r\n                joins[key] = newPresences;\r\n            }\r\n        });\r\n        return this.syncDiff(state, { joins, leaves }, onJoin, onLeave);\r\n    }\r\n    /**\r\n     * Used to sync a diff of presence join and leave events from the\r\n     * server, as they happen.\r\n     *\r\n     * Like `syncState`, `syncDiff` accepts optional `onJoin` and\r\n     * `onLeave` callbacks to react to a user joining or leaving from a\r\n     * device.\r\n     *\r\n     * @internal\r\n     */\r\n    static syncDiff(state, diff, onJoin, onLeave) {\r\n        const { joins, leaves } = {\r\n            joins: this.transformState(diff.joins),\r\n            leaves: this.transformState(diff.leaves),\r\n        };\r\n        if (!onJoin) {\r\n            onJoin = () => { };\r\n        }\r\n        if (!onLeave) {\r\n            onLeave = () => { };\r\n        }\r\n        this.map(joins, (key, newPresences) => {\r\n            var _a;\r\n            const currentPresences = (_a = state[key]) !== null && _a !== void 0 ? _a : [];\r\n            state[key] = this.cloneDeep(newPresences);\r\n            if (currentPresences.length > 0) {\r\n                const joinedPresenceRefs = state[key].map((m) => m.presence_ref);\r\n                const curPresences = currentPresences.filter((m) => joinedPresenceRefs.indexOf(m.presence_ref) < 0);\r\n                state[key].unshift(...curPresences);\r\n            }\r\n            onJoin(key, currentPresences, newPresences);\r\n        });\r\n        this.map(leaves, (key, leftPresences) => {\r\n            let currentPresences = state[key];\r\n            if (!currentPresences)\r\n                return;\r\n            const presenceRefsToRemove = leftPresences.map((m) => m.presence_ref);\r\n            currentPresences = currentPresences.filter((m) => presenceRefsToRemove.indexOf(m.presence_ref) < 0);\r\n            state[key] = currentPresences;\r\n            onLeave(key, currentPresences, leftPresences);\r\n            if (currentPresences.length === 0)\r\n                delete state[key];\r\n        });\r\n        return state;\r\n    }\r\n    /** @internal */\r\n    static map(obj, func) {\r\n        return Object.getOwnPropertyNames(obj).map((key) => func(key, obj[key]));\r\n    }\r\n    /**\r\n     * Remove 'metas' key\r\n     * Change 'phx_ref' to 'presence_ref'\r\n     * Remove 'phx_ref' and 'phx_ref_prev'\r\n     *\r\n     * @example\r\n     * // returns {\r\n     *  abc123: [\r\n     *    { presence_ref: '2', user_id: 1 },\r\n     *    { presence_ref: '3', user_id: 2 }\r\n     *  ]\r\n     * }\r\n     * RealtimePresence.transformState({\r\n     *  abc123: {\r\n     *    metas: [\r\n     *      { phx_ref: '2', phx_ref_prev: '1' user_id: 1 },\r\n     *      { phx_ref: '3', user_id: 2 }\r\n     *    ]\r\n     *  }\r\n     * })\r\n     *\r\n     * @internal\r\n     */\r\n    static transformState(state) {\r\n        state = this.cloneDeep(state);\r\n        return Object.getOwnPropertyNames(state).reduce((newState, key) => {\r\n            const presences = state[key];\r\n            if ('metas' in presences) {\r\n                newState[key] = presences.metas.map((presence) => {\r\n                    presence['presence_ref'] = presence['phx_ref'];\r\n                    delete presence['phx_ref'];\r\n                    delete presence['phx_ref_prev'];\r\n                    return presence;\r\n                });\r\n            }\r\n            else {\r\n                newState[key] = presences;\r\n            }\r\n            return newState;\r\n        }, {});\r\n    }\r\n    /** @internal */\r\n    static cloneDeep(obj) {\r\n        return JSON.parse(JSON.stringify(obj));\r\n    }\r\n    /** @internal */\r\n    onJoin(callback) {\r\n        this.caller.onJoin = callback;\r\n    }\r\n    /** @internal */\r\n    onLeave(callback) {\r\n        this.caller.onLeave = callback;\r\n    }\r\n    /** @internal */\r\n    onSync(callback) {\r\n        this.caller.onSync = callback;\r\n    }\r\n    /** @internal */\r\n    inPendingSyncState() {\r\n        return !this.joinRef || this.joinRef !== this.channel._joinRef();\r\n    }\r\n}\r\n//# sourceMappingURL=RealtimePresence.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL1JlYWx0aW1lUHJlc2VuY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLDBFQUEwRTtBQUM1RDtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsU0FBUyw4QkFBOEI7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3Qiw4QkFBOEI7QUFDOUIsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMsb0JBQW9CLDBCQUEwQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsU0FBUztBQUNULHdDQUF3QztBQUN4QyxvQkFBb0IsMEJBQTBCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYixTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBLGdEQUFnRCxlQUFlO0FBQy9ELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Qsc0NBQXNDLGVBQWU7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSwrQkFBK0I7QUFDM0MsWUFBWTtBQUNaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLDRDQUE0QztBQUMxRCxjQUFjO0FBQ2Q7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyxJQUFJO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcmVhbHRpbWUtanMvZGlzdC9tb2R1bGUvUmVhbHRpbWVQcmVzZW5jZS5qcz9jMjNmIl0sInNvdXJjZXNDb250ZW50IjpbIi8qXHJcbiAgVGhpcyBmaWxlIGRyYXdzIGhlYXZpbHkgZnJvbSBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4L2Jsb2IvZDM0NGVjMGE3MzJhYjRlZTIwNDIxNWIzMWRlNjljZjRiZTcyZTNiZi9hc3NldHMvanMvcGhvZW5peC9wcmVzZW5jZS5qc1xyXG4gIExpY2Vuc2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9waG9lbml4ZnJhbWV3b3JrL3Bob2VuaXgvYmxvYi9kMzQ0ZWMwYTczMmFiNGVlMjA0MjE1YjMxZGU2OWNmNGJlNzJlM2JmL0xJQ0VOU0UubWRcclxuKi9cclxuZXhwb3J0IHZhciBSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTO1xyXG4oZnVuY3Rpb24gKFJFQUxUSU1FX1BSRVNFTkNFX0xJU1RFTl9FVkVOVFMpIHtcclxuICAgIFJFQUxUSU1FX1BSRVNFTkNFX0xJU1RFTl9FVkVOVFNbXCJTWU5DXCJdID0gXCJzeW5jXCI7XHJcbiAgICBSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTW1wiSk9JTlwiXSA9IFwiam9pblwiO1xyXG4gICAgUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UU1tcIkxFQVZFXCJdID0gXCJsZWF2ZVwiO1xyXG59KShSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTIHx8IChSRUFMVElNRV9QUkVTRU5DRV9MSVNURU5fRVZFTlRTID0ge30pKTtcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVhbHRpbWVQcmVzZW5jZSB7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIHRoZSBQcmVzZW5jZS5cclxuICAgICAqXHJcbiAgICAgKiBAcGFyYW0gY2hhbm5lbCAtIFRoZSBSZWFsdGltZUNoYW5uZWxcclxuICAgICAqIEBwYXJhbSBvcHRzIC0gVGhlIG9wdGlvbnMsXHJcbiAgICAgKiAgICAgICAgZm9yIGV4YW1wbGUgYHtldmVudHM6IHtzdGF0ZTogJ3N0YXRlJywgZGlmZjogJ2RpZmYnfX1gXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGNoYW5uZWwsIG9wdHMpIHtcclxuICAgICAgICB0aGlzLmNoYW5uZWwgPSBjaGFubmVsO1xyXG4gICAgICAgIHRoaXMuc3RhdGUgPSB7fTtcclxuICAgICAgICB0aGlzLnBlbmRpbmdEaWZmcyA9IFtdO1xyXG4gICAgICAgIHRoaXMuam9pblJlZiA9IG51bGw7XHJcbiAgICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5jYWxsZXIgPSB7XHJcbiAgICAgICAgICAgIG9uSm9pbjogKCkgPT4geyB9LFxyXG4gICAgICAgICAgICBvbkxlYXZlOiAoKSA9PiB7IH0sXHJcbiAgICAgICAgICAgIG9uU3luYzogKCkgPT4geyB9LFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgY29uc3QgZXZlbnRzID0gKG9wdHMgPT09IG51bGwgfHwgb3B0cyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0cy5ldmVudHMpIHx8IHtcclxuICAgICAgICAgICAgc3RhdGU6ICdwcmVzZW5jZV9zdGF0ZScsXHJcbiAgICAgICAgICAgIGRpZmY6ICdwcmVzZW5jZV9kaWZmJyxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbC5fb24oZXZlbnRzLnN0YXRlLCB7fSwgKG5ld1N0YXRlKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgb25Kb2luLCBvbkxlYXZlLCBvblN5bmMgfSA9IHRoaXMuY2FsbGVyO1xyXG4gICAgICAgICAgICB0aGlzLmpvaW5SZWYgPSB0aGlzLmNoYW5uZWwuX2pvaW5SZWYoKTtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZSA9IFJlYWx0aW1lUHJlc2VuY2Uuc3luY1N0YXRlKHRoaXMuc3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpO1xyXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdEaWZmcy5mb3JFYWNoKChkaWZmKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gUmVhbHRpbWVQcmVzZW5jZS5zeW5jRGlmZih0aGlzLnN0YXRlLCBkaWZmLCBvbkpvaW4sIG9uTGVhdmUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMgPSBbXTtcclxuICAgICAgICAgICAgb25TeW5jKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLl9vbihldmVudHMuZGlmZiwge30sIChkaWZmKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgb25Kb2luLCBvbkxlYXZlLCBvblN5bmMgfSA9IHRoaXMuY2FsbGVyO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pblBlbmRpbmdTeW5jU3RhdGUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5wZW5kaW5nRGlmZnMucHVzaChkaWZmKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUgPSBSZWFsdGltZVByZXNlbmNlLnN5bmNEaWZmKHRoaXMuc3RhdGUsIGRpZmYsIG9uSm9pbiwgb25MZWF2ZSk7XHJcbiAgICAgICAgICAgICAgICBvblN5bmMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMub25Kb2luKChrZXksIGN1cnJlbnRQcmVzZW5jZXMsIG5ld1ByZXNlbmNlcykgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLmNoYW5uZWwuX3RyaWdnZXIoJ3ByZXNlbmNlJywge1xyXG4gICAgICAgICAgICAgICAgZXZlbnQ6ICdqb2luJyxcclxuICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQcmVzZW5jZXMsXHJcbiAgICAgICAgICAgICAgICBuZXdQcmVzZW5jZXMsXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMub25MZWF2ZSgoa2V5LCBjdXJyZW50UHJlc2VuY2VzLCBsZWZ0UHJlc2VuY2VzKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5fdHJpZ2dlcigncHJlc2VuY2UnLCB7XHJcbiAgICAgICAgICAgICAgICBldmVudDogJ2xlYXZlJyxcclxuICAgICAgICAgICAgICAgIGtleSxcclxuICAgICAgICAgICAgICAgIGN1cnJlbnRQcmVzZW5jZXMsXHJcbiAgICAgICAgICAgICAgICBsZWZ0UHJlc2VuY2VzLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm9uU3luYygoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5fdHJpZ2dlcigncHJlc2VuY2UnLCB7IGV2ZW50OiAnc3luYycgfSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFVzZWQgdG8gc3luYyB0aGUgbGlzdCBvZiBwcmVzZW5jZXMgb24gdGhlIHNlcnZlciB3aXRoIHRoZVxyXG4gICAgICogY2xpZW50J3Mgc3RhdGUuXHJcbiAgICAgKlxyXG4gICAgICogQW4gb3B0aW9uYWwgYG9uSm9pbmAgYW5kIGBvbkxlYXZlYCBjYWxsYmFjayBjYW4gYmUgcHJvdmlkZWQgdG9cclxuICAgICAqIHJlYWN0IHRvIGNoYW5nZXMgaW4gdGhlIGNsaWVudCdzIGxvY2FsIHByZXNlbmNlcyBhY3Jvc3NcclxuICAgICAqIGRpc2Nvbm5lY3RzIGFuZCByZWNvbm5lY3RzIHdpdGggdGhlIHNlcnZlci5cclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHN5bmNTdGF0ZShjdXJyZW50U3RhdGUsIG5ld1N0YXRlLCBvbkpvaW4sIG9uTGVhdmUpIHtcclxuICAgICAgICBjb25zdCBzdGF0ZSA9IHRoaXMuY2xvbmVEZWVwKGN1cnJlbnRTdGF0ZSk7XHJcbiAgICAgICAgY29uc3QgdHJhbnNmb3JtZWRTdGF0ZSA9IHRoaXMudHJhbnNmb3JtU3RhdGUobmV3U3RhdGUpO1xyXG4gICAgICAgIGNvbnN0IGpvaW5zID0ge307XHJcbiAgICAgICAgY29uc3QgbGVhdmVzID0ge307XHJcbiAgICAgICAgdGhpcy5tYXAoc3RhdGUsIChrZXksIHByZXNlbmNlcykgPT4ge1xyXG4gICAgICAgICAgICBpZiAoIXRyYW5zZm9ybWVkU3RhdGVba2V5XSkge1xyXG4gICAgICAgICAgICAgICAgbGVhdmVzW2tleV0gPSBwcmVzZW5jZXM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLm1hcCh0cmFuc2Zvcm1lZFN0YXRlLCAoa2V5LCBuZXdQcmVzZW5jZXMpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgY3VycmVudFByZXNlbmNlcyA9IHN0YXRlW2tleV07XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UHJlc2VuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdQcmVzZW5jZVJlZnMgPSBuZXdQcmVzZW5jZXMubWFwKChtKSA9PiBtLnByZXNlbmNlX3JlZik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJQcmVzZW5jZVJlZnMgPSBjdXJyZW50UHJlc2VuY2VzLm1hcCgobSkgPT4gbS5wcmVzZW5jZV9yZWYpO1xyXG4gICAgICAgICAgICAgICAgY29uc3Qgam9pbmVkUHJlc2VuY2VzID0gbmV3UHJlc2VuY2VzLmZpbHRlcigobSkgPT4gY3VyUHJlc2VuY2VSZWZzLmluZGV4T2YobS5wcmVzZW5jZV9yZWYpIDwgMCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0UHJlc2VuY2VzID0gY3VycmVudFByZXNlbmNlcy5maWx0ZXIoKG0pID0+IG5ld1ByZXNlbmNlUmVmcy5pbmRleE9mKG0ucHJlc2VuY2VfcmVmKSA8IDApO1xyXG4gICAgICAgICAgICAgICAgaWYgKGpvaW5lZFByZXNlbmNlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgam9pbnNba2V5XSA9IGpvaW5lZFByZXNlbmNlcztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChsZWZ0UHJlc2VuY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBsZWF2ZXNba2V5XSA9IGxlZnRQcmVzZW5jZXM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBqb2luc1trZXldID0gbmV3UHJlc2VuY2VzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3luY0RpZmYoc3RhdGUsIHsgam9pbnMsIGxlYXZlcyB9LCBvbkpvaW4sIG9uTGVhdmUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVc2VkIHRvIHN5bmMgYSBkaWZmIG9mIHByZXNlbmNlIGpvaW4gYW5kIGxlYXZlIGV2ZW50cyBmcm9tIHRoZVxyXG4gICAgICogc2VydmVyLCBhcyB0aGV5IGhhcHBlbi5cclxuICAgICAqXHJcbiAgICAgKiBMaWtlIGBzeW5jU3RhdGVgLCBgc3luY0RpZmZgIGFjY2VwdHMgb3B0aW9uYWwgYG9uSm9pbmAgYW5kXHJcbiAgICAgKiBgb25MZWF2ZWAgY2FsbGJhY2tzIHRvIHJlYWN0IHRvIGEgdXNlciBqb2luaW5nIG9yIGxlYXZpbmcgZnJvbSBhXHJcbiAgICAgKiBkZXZpY2UuXHJcbiAgICAgKlxyXG4gICAgICogQGludGVybmFsXHJcbiAgICAgKi9cclxuICAgIHN0YXRpYyBzeW5jRGlmZihzdGF0ZSwgZGlmZiwgb25Kb2luLCBvbkxlYXZlKSB7XHJcbiAgICAgICAgY29uc3QgeyBqb2lucywgbGVhdmVzIH0gPSB7XHJcbiAgICAgICAgICAgIGpvaW5zOiB0aGlzLnRyYW5zZm9ybVN0YXRlKGRpZmYuam9pbnMpLFxyXG4gICAgICAgICAgICBsZWF2ZXM6IHRoaXMudHJhbnNmb3JtU3RhdGUoZGlmZi5sZWF2ZXMpLFxyXG4gICAgICAgIH07XHJcbiAgICAgICAgaWYgKCFvbkpvaW4pIHtcclxuICAgICAgICAgICAgb25Kb2luID0gKCkgPT4geyB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoIW9uTGVhdmUpIHtcclxuICAgICAgICAgICAgb25MZWF2ZSA9ICgpID0+IHsgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5tYXAoam9pbnMsIChrZXksIG5ld1ByZXNlbmNlcykgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRQcmVzZW5jZXMgPSAoX2EgPSBzdGF0ZVtrZXldKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBbXTtcclxuICAgICAgICAgICAgc3RhdGVba2V5XSA9IHRoaXMuY2xvbmVEZWVwKG5ld1ByZXNlbmNlcyk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UHJlc2VuY2VzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGpvaW5lZFByZXNlbmNlUmVmcyA9IHN0YXRlW2tleV0ubWFwKChtKSA9PiBtLnByZXNlbmNlX3JlZik7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjdXJQcmVzZW5jZXMgPSBjdXJyZW50UHJlc2VuY2VzLmZpbHRlcigobSkgPT4gam9pbmVkUHJlc2VuY2VSZWZzLmluZGV4T2YobS5wcmVzZW5jZV9yZWYpIDwgMCk7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZVtrZXldLnVuc2hpZnQoLi4uY3VyUHJlc2VuY2VzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvbkpvaW4oa2V5LCBjdXJyZW50UHJlc2VuY2VzLCBuZXdQcmVzZW5jZXMpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubWFwKGxlYXZlcywgKGtleSwgbGVmdFByZXNlbmNlcykgPT4ge1xyXG4gICAgICAgICAgICBsZXQgY3VycmVudFByZXNlbmNlcyA9IHN0YXRlW2tleV07XHJcbiAgICAgICAgICAgIGlmICghY3VycmVudFByZXNlbmNlcylcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgY29uc3QgcHJlc2VuY2VSZWZzVG9SZW1vdmUgPSBsZWZ0UHJlc2VuY2VzLm1hcCgobSkgPT4gbS5wcmVzZW5jZV9yZWYpO1xyXG4gICAgICAgICAgICBjdXJyZW50UHJlc2VuY2VzID0gY3VycmVudFByZXNlbmNlcy5maWx0ZXIoKG0pID0+IHByZXNlbmNlUmVmc1RvUmVtb3ZlLmluZGV4T2YobS5wcmVzZW5jZV9yZWYpIDwgMCk7XHJcbiAgICAgICAgICAgIHN0YXRlW2tleV0gPSBjdXJyZW50UHJlc2VuY2VzO1xyXG4gICAgICAgICAgICBvbkxlYXZlKGtleSwgY3VycmVudFByZXNlbmNlcywgbGVmdFByZXNlbmNlcyk7XHJcbiAgICAgICAgICAgIGlmIChjdXJyZW50UHJlc2VuY2VzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSBzdGF0ZVtrZXldO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgIH1cclxuICAgIC8qKiBAaW50ZXJuYWwgKi9cclxuICAgIHN0YXRpYyBtYXAob2JqLCBmdW5jKSB7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKG9iaikubWFwKChrZXkpID0+IGZ1bmMoa2V5LCBvYmpba2V5XSkpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZW1vdmUgJ21ldGFzJyBrZXlcclxuICAgICAqIENoYW5nZSAncGh4X3JlZicgdG8gJ3ByZXNlbmNlX3JlZidcclxuICAgICAqIFJlbW92ZSAncGh4X3JlZicgYW5kICdwaHhfcmVmX3ByZXYnXHJcbiAgICAgKlxyXG4gICAgICogQGV4YW1wbGVcclxuICAgICAqIC8vIHJldHVybnMge1xyXG4gICAgICogIGFiYzEyMzogW1xyXG4gICAgICogICAgeyBwcmVzZW5jZV9yZWY6ICcyJywgdXNlcl9pZDogMSB9LFxyXG4gICAgICogICAgeyBwcmVzZW5jZV9yZWY6ICczJywgdXNlcl9pZDogMiB9XHJcbiAgICAgKiAgXVxyXG4gICAgICogfVxyXG4gICAgICogUmVhbHRpbWVQcmVzZW5jZS50cmFuc2Zvcm1TdGF0ZSh7XHJcbiAgICAgKiAgYWJjMTIzOiB7XHJcbiAgICAgKiAgICBtZXRhczogW1xyXG4gICAgICogICAgICB7IHBoeF9yZWY6ICcyJywgcGh4X3JlZl9wcmV2OiAnMScgdXNlcl9pZDogMSB9LFxyXG4gICAgICogICAgICB7IHBoeF9yZWY6ICczJywgdXNlcl9pZDogMiB9XHJcbiAgICAgKiAgICBdXHJcbiAgICAgKiAgfVxyXG4gICAgICogfSlcclxuICAgICAqXHJcbiAgICAgKiBAaW50ZXJuYWxcclxuICAgICAqL1xyXG4gICAgc3RhdGljIHRyYW5zZm9ybVN0YXRlKHN0YXRlKSB7XHJcbiAgICAgICAgc3RhdGUgPSB0aGlzLmNsb25lRGVlcChzdGF0ZSk7XHJcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHN0YXRlKS5yZWR1Y2UoKG5ld1N0YXRlLCBrZXkpID0+IHtcclxuICAgICAgICAgICAgY29uc3QgcHJlc2VuY2VzID0gc3RhdGVba2V5XTtcclxuICAgICAgICAgICAgaWYgKCdtZXRhcycgaW4gcHJlc2VuY2VzKSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZVtrZXldID0gcHJlc2VuY2VzLm1ldGFzLm1hcCgocHJlc2VuY2UpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBwcmVzZW5jZVsncHJlc2VuY2VfcmVmJ10gPSBwcmVzZW5jZVsncGh4X3JlZiddO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcmVzZW5jZVsncGh4X3JlZiddO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBwcmVzZW5jZVsncGh4X3JlZl9wcmV2J107XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByZXNlbmNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBuZXdTdGF0ZVtrZXldID0gcHJlc2VuY2VzO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBuZXdTdGF0ZTtcclxuICAgICAgICB9LCB7fSk7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBzdGF0aWMgY2xvbmVEZWVwKG9iaikge1xyXG4gICAgICAgIHJldHVybiBKU09OLnBhcnNlKEpTT04uc3RyaW5naWZ5KG9iaikpO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgb25Kb2luKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsZXIub25Kb2luID0gY2FsbGJhY2s7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBvbkxlYXZlKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsZXIub25MZWF2ZSA9IGNhbGxiYWNrO1xyXG4gICAgfVxyXG4gICAgLyoqIEBpbnRlcm5hbCAqL1xyXG4gICAgb25TeW5jKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5jYWxsZXIub25TeW5jID0gY2FsbGJhY2s7XHJcbiAgICB9XHJcbiAgICAvKiogQGludGVybmFsICovXHJcbiAgICBpblBlbmRpbmdTeW5jU3RhdGUoKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmpvaW5SZWYgfHwgdGhpcy5qb2luUmVmICE9PSB0aGlzLmNoYW5uZWwuX2pvaW5SZWYoKTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZWFsdGltZVByZXNlbmNlLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   REALTIME_CHANNEL_STATES: () => (/* reexport safe */ _RealtimeChannel__WEBPACK_IMPORTED_MODULE_1__.REALTIME_CHANNEL_STATES),\n/* harmony export */   REALTIME_LISTEN_TYPES: () => (/* reexport safe */ _RealtimeChannel__WEBPACK_IMPORTED_MODULE_1__.REALTIME_LISTEN_TYPES),\n/* harmony export */   REALTIME_POSTGRES_CHANGES_LISTEN_EVENT: () => (/* reexport safe */ _RealtimeChannel__WEBPACK_IMPORTED_MODULE_1__.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT),\n/* harmony export */   REALTIME_PRESENCE_LISTEN_EVENTS: () => (/* reexport safe */ _RealtimePresence__WEBPACK_IMPORTED_MODULE_2__.REALTIME_PRESENCE_LISTEN_EVENTS),\n/* harmony export */   REALTIME_SUBSCRIBE_STATES: () => (/* reexport safe */ _RealtimeChannel__WEBPACK_IMPORTED_MODULE_1__.REALTIME_SUBSCRIBE_STATES),\n/* harmony export */   RealtimeChannel: () => (/* reexport safe */ _RealtimeChannel__WEBPACK_IMPORTED_MODULE_1__[\"default\"]),\n/* harmony export */   RealtimeClient: () => (/* reexport safe */ _RealtimeClient__WEBPACK_IMPORTED_MODULE_0__[\"default\"]),\n/* harmony export */   RealtimePresence: () => (/* reexport safe */ _RealtimePresence__WEBPACK_IMPORTED_MODULE_2__[\"default\"]),\n/* harmony export */   WebSocketFactory: () => (/* reexport safe */ _lib_websocket_factory__WEBPACK_IMPORTED_MODULE_3__[\"default\"])\n/* harmony export */ });\n/* harmony import */ var _RealtimeClient__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./RealtimeClient */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimeClient.js\");\n/* harmony import */ var _RealtimeChannel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./RealtimeChannel */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimeChannel.js\");\n/* harmony import */ var _RealtimePresence__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./RealtimePresence */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/RealtimePresence.js\");\n/* harmony import */ var _lib_websocket_factory__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/websocket-factory */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js\");\n\r\n\r\n\r\n\r\n\r\n//# sourceMappingURL=index.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEM7QUFDMEg7QUFDaEY7QUFDakM7QUFDNks7QUFDcE8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2luZGV4LmpzPzQ0NGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWx0aW1lQ2xpZW50IGZyb20gJy4vUmVhbHRpbWVDbGllbnQnO1xyXG5pbXBvcnQgUmVhbHRpbWVDaGFubmVsLCB7IFJFQUxUSU1FX0xJU1RFTl9UWVBFUywgUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlQsIFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMsIFJFQUxUSU1FX0NIQU5ORUxfU1RBVEVTLCB9IGZyb20gJy4vUmVhbHRpbWVDaGFubmVsJztcclxuaW1wb3J0IFJlYWx0aW1lUHJlc2VuY2UsIHsgUkVBTFRJTUVfUFJFU0VOQ0VfTElTVEVOX0VWRU5UUywgfSBmcm9tICcuL1JlYWx0aW1lUHJlc2VuY2UnO1xyXG5pbXBvcnQgV2ViU29ja2V0RmFjdG9yeSBmcm9tICcuL2xpYi93ZWJzb2NrZXQtZmFjdG9yeSc7XHJcbmV4cG9ydCB7IFJlYWx0aW1lUHJlc2VuY2UsIFJlYWx0aW1lQ2hhbm5lbCwgUmVhbHRpbWVDbGllbnQsIFJFQUxUSU1FX0xJU1RFTl9UWVBFUywgUkVBTFRJTUVfUE9TVEdSRVNfQ0hBTkdFU19MSVNURU5fRVZFTlQsIFJFQUxUSU1FX1BSRVNFTkNFX0xJU1RFTl9FVkVOVFMsIFJFQUxUSU1FX1NVQlNDUklCRV9TVEFURVMsIFJFQUxUSU1FX0NIQU5ORUxfU1RBVEVTLCBXZWJTb2NrZXRGYWN0b3J5LCB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/lib/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CHANNEL_EVENTS: () => (/* binding */ CHANNEL_EVENTS),\n/* harmony export */   CHANNEL_STATES: () => (/* binding */ CHANNEL_STATES),\n/* harmony export */   CONNECTION_STATE: () => (/* binding */ CONNECTION_STATE),\n/* harmony export */   DEFAULT_TIMEOUT: () => (/* binding */ DEFAULT_TIMEOUT),\n/* harmony export */   DEFAULT_VERSION: () => (/* binding */ DEFAULT_VERSION),\n/* harmony export */   MAX_PUSH_BUFFER_SIZE: () => (/* binding */ MAX_PUSH_BUFFER_SIZE),\n/* harmony export */   SOCKET_STATES: () => (/* binding */ SOCKET_STATES),\n/* harmony export */   TRANSPORTS: () => (/* binding */ TRANSPORTS),\n/* harmony export */   VERSION: () => (/* binding */ VERSION),\n/* harmony export */   VSN: () => (/* binding */ VSN),\n/* harmony export */   WS_CLOSE_NORMAL: () => (/* binding */ WS_CLOSE_NORMAL)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/version.js\");\n\r\nconst DEFAULT_VERSION = `realtime-js/${_version__WEBPACK_IMPORTED_MODULE_0__.version}`;\r\nconst VSN = '1.0.0';\r\nconst VERSION = _version__WEBPACK_IMPORTED_MODULE_0__.version;\r\nconst DEFAULT_TIMEOUT = 10000;\r\nconst WS_CLOSE_NORMAL = 1000;\r\nconst MAX_PUSH_BUFFER_SIZE = 100;\r\nvar SOCKET_STATES;\r\n(function (SOCKET_STATES) {\r\n    SOCKET_STATES[SOCKET_STATES[\"connecting\"] = 0] = \"connecting\";\r\n    SOCKET_STATES[SOCKET_STATES[\"open\"] = 1] = \"open\";\r\n    SOCKET_STATES[SOCKET_STATES[\"closing\"] = 2] = \"closing\";\r\n    SOCKET_STATES[SOCKET_STATES[\"closed\"] = 3] = \"closed\";\r\n})(SOCKET_STATES || (SOCKET_STATES = {}));\r\nvar CHANNEL_STATES;\r\n(function (CHANNEL_STATES) {\r\n    CHANNEL_STATES[\"closed\"] = \"closed\";\r\n    CHANNEL_STATES[\"errored\"] = \"errored\";\r\n    CHANNEL_STATES[\"joined\"] = \"joined\";\r\n    CHANNEL_STATES[\"joining\"] = \"joining\";\r\n    CHANNEL_STATES[\"leaving\"] = \"leaving\";\r\n})(CHANNEL_STATES || (CHANNEL_STATES = {}));\r\nvar CHANNEL_EVENTS;\r\n(function (CHANNEL_EVENTS) {\r\n    CHANNEL_EVENTS[\"close\"] = \"phx_close\";\r\n    CHANNEL_EVENTS[\"error\"] = \"phx_error\";\r\n    CHANNEL_EVENTS[\"join\"] = \"phx_join\";\r\n    CHANNEL_EVENTS[\"reply\"] = \"phx_reply\";\r\n    CHANNEL_EVENTS[\"leave\"] = \"phx_leave\";\r\n    CHANNEL_EVENTS[\"access_token\"] = \"access_token\";\r\n})(CHANNEL_EVENTS || (CHANNEL_EVENTS = {}));\r\nvar TRANSPORTS;\r\n(function (TRANSPORTS) {\r\n    TRANSPORTS[\"websocket\"] = \"websocket\";\r\n})(TRANSPORTS || (TRANSPORTS = {}));\r\nvar CONNECTION_STATE;\r\n(function (CONNECTION_STATE) {\r\n    CONNECTION_STATE[\"Connecting\"] = \"connecting\";\r\n    CONNECTION_STATE[\"Open\"] = \"open\";\r\n    CONNECTION_STATE[\"Closing\"] = \"closing\";\r\n    CONNECTION_STATE[\"Closed\"] = \"closed\";\r\n})(CONNECTION_STATE || (CONNECTION_STATE = {}));\r\n//# sourceMappingURL=constants.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQW9DO0FBQzdCLHVDQUF1Qyw2Q0FBTyxDQUFDO0FBQy9DO0FBQ0EsZ0JBQWdCLDZDQUFPO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsc0NBQXNDO0FBQ2hDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyx3Q0FBd0M7QUFDbEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsd0NBQXdDO0FBQ2xDO0FBQ1A7QUFDQTtBQUNBLENBQUMsZ0NBQWdDO0FBQzFCO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNENBQTRDO0FBQzdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvY29uc3RhbnRzLmpzPzUyMDgiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgdmVyc2lvbiB9IGZyb20gJy4vdmVyc2lvbic7XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1ZFUlNJT04gPSBgcmVhbHRpbWUtanMvJHt2ZXJzaW9ufWA7XHJcbmV4cG9ydCBjb25zdCBWU04gPSAnMS4wLjAnO1xyXG5leHBvcnQgY29uc3QgVkVSU0lPTiA9IHZlcnNpb247XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1RJTUVPVVQgPSAxMDAwMDtcclxuZXhwb3J0IGNvbnN0IFdTX0NMT1NFX05PUk1BTCA9IDEwMDA7XHJcbmV4cG9ydCBjb25zdCBNQVhfUFVTSF9CVUZGRVJfU0laRSA9IDEwMDtcclxuZXhwb3J0IHZhciBTT0NLRVRfU1RBVEVTO1xyXG4oZnVuY3Rpb24gKFNPQ0tFVF9TVEFURVMpIHtcclxuICAgIFNPQ0tFVF9TVEFURVNbU09DS0VUX1NUQVRFU1tcImNvbm5lY3RpbmdcIl0gPSAwXSA9IFwiY29ubmVjdGluZ1wiO1xyXG4gICAgU09DS0VUX1NUQVRFU1tTT0NLRVRfU1RBVEVTW1wib3BlblwiXSA9IDFdID0gXCJvcGVuXCI7XHJcbiAgICBTT0NLRVRfU1RBVEVTW1NPQ0tFVF9TVEFURVNbXCJjbG9zaW5nXCJdID0gMl0gPSBcImNsb3NpbmdcIjtcclxuICAgIFNPQ0tFVF9TVEFURVNbU09DS0VUX1NUQVRFU1tcImNsb3NlZFwiXSA9IDNdID0gXCJjbG9zZWRcIjtcclxufSkoU09DS0VUX1NUQVRFUyB8fCAoU09DS0VUX1NUQVRFUyA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgQ0hBTk5FTF9TVEFURVM7XHJcbihmdW5jdGlvbiAoQ0hBTk5FTF9TVEFURVMpIHtcclxuICAgIENIQU5ORUxfU1RBVEVTW1wiY2xvc2VkXCJdID0gXCJjbG9zZWRcIjtcclxuICAgIENIQU5ORUxfU1RBVEVTW1wiZXJyb3JlZFwiXSA9IFwiZXJyb3JlZFwiO1xyXG4gICAgQ0hBTk5FTF9TVEFURVNbXCJqb2luZWRcIl0gPSBcImpvaW5lZFwiO1xyXG4gICAgQ0hBTk5FTF9TVEFURVNbXCJqb2luaW5nXCJdID0gXCJqb2luaW5nXCI7XHJcbiAgICBDSEFOTkVMX1NUQVRFU1tcImxlYXZpbmdcIl0gPSBcImxlYXZpbmdcIjtcclxufSkoQ0hBTk5FTF9TVEFURVMgfHwgKENIQU5ORUxfU1RBVEVTID0ge30pKTtcclxuZXhwb3J0IHZhciBDSEFOTkVMX0VWRU5UUztcclxuKGZ1bmN0aW9uIChDSEFOTkVMX0VWRU5UUykge1xyXG4gICAgQ0hBTk5FTF9FVkVOVFNbXCJjbG9zZVwiXSA9IFwicGh4X2Nsb3NlXCI7XHJcbiAgICBDSEFOTkVMX0VWRU5UU1tcImVycm9yXCJdID0gXCJwaHhfZXJyb3JcIjtcclxuICAgIENIQU5ORUxfRVZFTlRTW1wiam9pblwiXSA9IFwicGh4X2pvaW5cIjtcclxuICAgIENIQU5ORUxfRVZFTlRTW1wicmVwbHlcIl0gPSBcInBoeF9yZXBseVwiO1xyXG4gICAgQ0hBTk5FTF9FVkVOVFNbXCJsZWF2ZVwiXSA9IFwicGh4X2xlYXZlXCI7XHJcbiAgICBDSEFOTkVMX0VWRU5UU1tcImFjY2Vzc190b2tlblwiXSA9IFwiYWNjZXNzX3Rva2VuXCI7XHJcbn0pKENIQU5ORUxfRVZFTlRTIHx8IChDSEFOTkVMX0VWRU5UUyA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgVFJBTlNQT1JUUztcclxuKGZ1bmN0aW9uIChUUkFOU1BPUlRTKSB7XHJcbiAgICBUUkFOU1BPUlRTW1wid2Vic29ja2V0XCJdID0gXCJ3ZWJzb2NrZXRcIjtcclxufSkoVFJBTlNQT1JUUyB8fCAoVFJBTlNQT1JUUyA9IHt9KSk7XHJcbmV4cG9ydCB2YXIgQ09OTkVDVElPTl9TVEFURTtcclxuKGZ1bmN0aW9uIChDT05ORUNUSU9OX1NUQVRFKSB7XHJcbiAgICBDT05ORUNUSU9OX1NUQVRFW1wiQ29ubmVjdGluZ1wiXSA9IFwiY29ubmVjdGluZ1wiO1xyXG4gICAgQ09OTkVDVElPTl9TVEFURVtcIk9wZW5cIl0gPSBcIm9wZW5cIjtcclxuICAgIENPTk5FQ1RJT05fU1RBVEVbXCJDbG9zaW5nXCJdID0gXCJjbG9zaW5nXCI7XHJcbiAgICBDT05ORUNUSU9OX1NUQVRFW1wiQ2xvc2VkXCJdID0gXCJjbG9zZWRcIjtcclxufSkoQ09OTkVDVElPTl9TVEFURSB8fCAoQ09OTkVDVElPTl9TVEFURSA9IHt9KSk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/push.js":
/*!********************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/lib/push.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Push)\n/* harmony export */ });\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/constants */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/constants.js\");\n\r\nclass Push {\r\n    /**\r\n     * Initializes the Push\r\n     *\r\n     * @param channel The Channel\r\n     * @param event The event, for example `\"phx_join\"`\r\n     * @param payload The payload, for example `{user_id: 123}`\r\n     * @param timeout The push timeout in milliseconds\r\n     */\r\n    constructor(channel, event, payload = {}, timeout = _lib_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_TIMEOUT) {\r\n        this.channel = channel;\r\n        this.event = event;\r\n        this.payload = payload;\r\n        this.timeout = timeout;\r\n        this.sent = false;\r\n        this.timeoutTimer = undefined;\r\n        this.ref = '';\r\n        this.receivedResp = null;\r\n        this.recHooks = [];\r\n        this.refEvent = null;\r\n    }\r\n    resend(timeout) {\r\n        this.timeout = timeout;\r\n        this._cancelRefEvent();\r\n        this.ref = '';\r\n        this.refEvent = null;\r\n        this.receivedResp = null;\r\n        this.sent = false;\r\n        this.send();\r\n    }\r\n    send() {\r\n        if (this._hasReceived('timeout')) {\r\n            return;\r\n        }\r\n        this.startTimeout();\r\n        this.sent = true;\r\n        this.channel.socket.push({\r\n            topic: this.channel.topic,\r\n            event: this.event,\r\n            payload: this.payload,\r\n            ref: this.ref,\r\n            join_ref: this.channel._joinRef(),\r\n        });\r\n    }\r\n    updatePayload(payload) {\r\n        this.payload = Object.assign(Object.assign({}, this.payload), payload);\r\n    }\r\n    receive(status, callback) {\r\n        var _a;\r\n        if (this._hasReceived(status)) {\r\n            callback((_a = this.receivedResp) === null || _a === void 0 ? void 0 : _a.response);\r\n        }\r\n        this.recHooks.push({ status, callback });\r\n        return this;\r\n    }\r\n    startTimeout() {\r\n        if (this.timeoutTimer) {\r\n            return;\r\n        }\r\n        this.ref = this.channel.socket._makeRef();\r\n        this.refEvent = this.channel._replyEventName(this.ref);\r\n        const callback = (payload) => {\r\n            this._cancelRefEvent();\r\n            this._cancelTimeout();\r\n            this.receivedResp = payload;\r\n            this._matchReceive(payload);\r\n        };\r\n        this.channel._on(this.refEvent, {}, callback);\r\n        this.timeoutTimer = setTimeout(() => {\r\n            this.trigger('timeout', {});\r\n        }, this.timeout);\r\n    }\r\n    trigger(status, response) {\r\n        if (this.refEvent)\r\n            this.channel._trigger(this.refEvent, { status, response });\r\n    }\r\n    destroy() {\r\n        this._cancelRefEvent();\r\n        this._cancelTimeout();\r\n    }\r\n    _cancelRefEvent() {\r\n        if (!this.refEvent) {\r\n            return;\r\n        }\r\n        this.channel._off(this.refEvent, {});\r\n    }\r\n    _cancelTimeout() {\r\n        clearTimeout(this.timeoutTimer);\r\n        this.timeoutTimer = undefined;\r\n    }\r\n    _matchReceive({ status, response }) {\r\n        this.recHooks.filter((h) => h.status === status).forEach((h) => h.callback(response));\r\n    }\r\n    _hasReceived(status) {\r\n        return this.receivedResp && this.receivedResp.status === status;\r\n    }\r\n}\r\n//# sourceMappingURL=push.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi9wdXNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1EO0FBQ3BDO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlEQUFpRCxhQUFhO0FBQzlEO0FBQ0E7QUFDQSw0Q0FBNEMsWUFBWSwyREFBZTtBQUN2RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxxREFBcUQ7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGtCQUFrQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0Esc0NBQXNDO0FBQ3RDLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxtREFBbUQsa0JBQWtCO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQztBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLGtCQUFrQjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcmVhbHRpbWUtanMvZGlzdC9tb2R1bGUvbGliL3B1c2guanM/NTAzNSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBERUZBVUxUX1RJTUVPVVQgfSBmcm9tICcuLi9saWIvY29uc3RhbnRzJztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHVzaCB7XHJcbiAgICAvKipcclxuICAgICAqIEluaXRpYWxpemVzIHRoZSBQdXNoXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGNoYW5uZWwgVGhlIENoYW5uZWxcclxuICAgICAqIEBwYXJhbSBldmVudCBUaGUgZXZlbnQsIGZvciBleGFtcGxlIGBcInBoeF9qb2luXCJgXHJcbiAgICAgKiBAcGFyYW0gcGF5bG9hZCBUaGUgcGF5bG9hZCwgZm9yIGV4YW1wbGUgYHt1c2VyX2lkOiAxMjN9YFxyXG4gICAgICogQHBhcmFtIHRpbWVvdXQgVGhlIHB1c2ggdGltZW91dCBpbiBtaWxsaXNlY29uZHNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoY2hhbm5lbCwgZXZlbnQsIHBheWxvYWQgPSB7fSwgdGltZW91dCA9IERFRkFVTFRfVElNRU9VVCkge1xyXG4gICAgICAgIHRoaXMuY2hhbm5lbCA9IGNoYW5uZWw7XHJcbiAgICAgICAgdGhpcy5ldmVudCA9IGV2ZW50O1xyXG4gICAgICAgIHRoaXMucGF5bG9hZCA9IHBheWxvYWQ7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0ID0gdGltZW91dDtcclxuICAgICAgICB0aGlzLnNlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnRpbWVvdXRUaW1lciA9IHVuZGVmaW5lZDtcclxuICAgICAgICB0aGlzLnJlZiA9ICcnO1xyXG4gICAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gbnVsbDtcclxuICAgICAgICB0aGlzLnJlY0hvb2tzID0gW107XHJcbiAgICAgICAgdGhpcy5yZWZFdmVudCA9IG51bGw7XHJcbiAgICB9XHJcbiAgICByZXNlbmQodGltZW91dCkge1xyXG4gICAgICAgIHRoaXMudGltZW91dCA9IHRpbWVvdXQ7XHJcbiAgICAgICAgdGhpcy5fY2FuY2VsUmVmRXZlbnQoKTtcclxuICAgICAgICB0aGlzLnJlZiA9ICcnO1xyXG4gICAgICAgIHRoaXMucmVmRXZlbnQgPSBudWxsO1xyXG4gICAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gbnVsbDtcclxuICAgICAgICB0aGlzLnNlbnQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnNlbmQoKTtcclxuICAgIH1cclxuICAgIHNlbmQoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuX2hhc1JlY2VpdmVkKCd0aW1lb3V0JykpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnN0YXJ0VGltZW91dCgpO1xyXG4gICAgICAgIHRoaXMuc2VudCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLnNvY2tldC5wdXNoKHtcclxuICAgICAgICAgICAgdG9waWM6IHRoaXMuY2hhbm5lbC50b3BpYyxcclxuICAgICAgICAgICAgZXZlbnQ6IHRoaXMuZXZlbnQsXHJcbiAgICAgICAgICAgIHBheWxvYWQ6IHRoaXMucGF5bG9hZCxcclxuICAgICAgICAgICAgcmVmOiB0aGlzLnJlZixcclxuICAgICAgICAgICAgam9pbl9yZWY6IHRoaXMuY2hhbm5lbC5fam9pblJlZigpLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlUGF5bG9hZChwYXlsb2FkKSB7XHJcbiAgICAgICAgdGhpcy5wYXlsb2FkID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnBheWxvYWQpLCBwYXlsb2FkKTtcclxuICAgIH1cclxuICAgIHJlY2VpdmUoc3RhdHVzLCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBfYTtcclxuICAgICAgICBpZiAodGhpcy5faGFzUmVjZWl2ZWQoc3RhdHVzKSkge1xyXG4gICAgICAgICAgICBjYWxsYmFjaygoX2EgPSB0aGlzLnJlY2VpdmVkUmVzcCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlc3BvbnNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5yZWNIb29rcy5wdXNoKHsgc3RhdHVzLCBjYWxsYmFjayB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHN0YXJ0VGltZW91dCgpIHtcclxuICAgICAgICBpZiAodGhpcy50aW1lb3V0VGltZXIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnJlZiA9IHRoaXMuY2hhbm5lbC5zb2NrZXQuX21ha2VSZWYoKTtcclxuICAgICAgICB0aGlzLnJlZkV2ZW50ID0gdGhpcy5jaGFubmVsLl9yZXBseUV2ZW50TmFtZSh0aGlzLnJlZik7XHJcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAocGF5bG9hZCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLl9jYW5jZWxSZWZFdmVudCgpO1xyXG4gICAgICAgICAgICB0aGlzLl9jYW5jZWxUaW1lb3V0KCk7XHJcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRSZXNwID0gcGF5bG9hZDtcclxuICAgICAgICAgICAgdGhpcy5fbWF0Y2hSZWNlaXZlKHBheWxvYWQpO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdGhpcy5jaGFubmVsLl9vbih0aGlzLnJlZkV2ZW50LCB7fSwgY2FsbGJhY2spO1xyXG4gICAgICAgIHRoaXMudGltZW91dFRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMudHJpZ2dlcigndGltZW91dCcsIHt9KTtcclxuICAgICAgICB9LCB0aGlzLnRpbWVvdXQpO1xyXG4gICAgfVxyXG4gICAgdHJpZ2dlcihzdGF0dXMsIHJlc3BvbnNlKSB7XHJcbiAgICAgICAgaWYgKHRoaXMucmVmRXZlbnQpXHJcbiAgICAgICAgICAgIHRoaXMuY2hhbm5lbC5fdHJpZ2dlcih0aGlzLnJlZkV2ZW50LCB7IHN0YXR1cywgcmVzcG9uc2UgfSk7XHJcbiAgICB9XHJcbiAgICBkZXN0cm95KCkge1xyXG4gICAgICAgIHRoaXMuX2NhbmNlbFJlZkV2ZW50KCk7XHJcbiAgICAgICAgdGhpcy5fY2FuY2VsVGltZW91dCgpO1xyXG4gICAgfVxyXG4gICAgX2NhbmNlbFJlZkV2ZW50KCkge1xyXG4gICAgICAgIGlmICghdGhpcy5yZWZFdmVudCkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY2hhbm5lbC5fb2ZmKHRoaXMucmVmRXZlbnQsIHt9KTtcclxuICAgIH1cclxuICAgIF9jYW5jZWxUaW1lb3V0KCkge1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRUaW1lcik7XHJcbiAgICAgICAgdGhpcy50aW1lb3V0VGltZXIgPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBfbWF0Y2hSZWNlaXZlKHsgc3RhdHVzLCByZXNwb25zZSB9KSB7XHJcbiAgICAgICAgdGhpcy5yZWNIb29rcy5maWx0ZXIoKGgpID0+IGguc3RhdHVzID09PSBzdGF0dXMpLmZvckVhY2goKGgpID0+IGguY2FsbGJhY2socmVzcG9uc2UpKTtcclxuICAgIH1cclxuICAgIF9oYXNSZWNlaXZlZChzdGF0dXMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWNlaXZlZFJlc3AgJiYgdGhpcy5yZWNlaXZlZFJlc3Auc3RhdHVzID09PSBzdGF0dXM7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHVzaC5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/push.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/serializer.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/lib/serializer.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Serializer)\n/* harmony export */ });\n// This file draws heavily from https://github.com/phoenixframework/phoenix/commit/cf098e9cf7a44ee6479d31d911a97d3c7430c6fe\r\n// License: https://github.com/phoenixframework/phoenix/blob/master/LICENSE.md\r\nclass Serializer {\r\n    constructor() {\r\n        this.HEADER_LENGTH = 1;\r\n    }\r\n    decode(rawPayload, callback) {\r\n        if (rawPayload.constructor === ArrayBuffer) {\r\n            return callback(this._binaryDecode(rawPayload));\r\n        }\r\n        if (typeof rawPayload === 'string') {\r\n            return callback(JSON.parse(rawPayload));\r\n        }\r\n        return callback({});\r\n    }\r\n    _binaryDecode(buffer) {\r\n        const view = new DataView(buffer);\r\n        const decoder = new TextDecoder();\r\n        return this._decodeBroadcast(buffer, view, decoder);\r\n    }\r\n    _decodeBroadcast(buffer, view, decoder) {\r\n        const topicSize = view.getUint8(1);\r\n        const eventSize = view.getUint8(2);\r\n        let offset = this.HEADER_LENGTH + 2;\r\n        const topic = decoder.decode(buffer.slice(offset, offset + topicSize));\r\n        offset = offset + topicSize;\r\n        const event = decoder.decode(buffer.slice(offset, offset + eventSize));\r\n        offset = offset + eventSize;\r\n        const data = JSON.parse(decoder.decode(buffer.slice(offset, buffer.byteLength)));\r\n        return { ref: null, topic: topic, event: event, payload: data };\r\n    }\r\n}\r\n//# sourceMappingURL=serializer.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi9zZXJpYWxpemVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ2U7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvc2VyaWFsaXplci5qcz9mOTk2Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZmlsZSBkcmF3cyBoZWF2aWx5IGZyb20gaHR0cHM6Ly9naXRodWIuY29tL3Bob2VuaXhmcmFtZXdvcmsvcGhvZW5peC9jb21taXQvY2YwOThlOWNmN2E0NGVlNjQ3OWQzMWQ5MTFhOTdkM2M3NDMwYzZmZVxyXG4vLyBMaWNlbnNlOiBodHRwczovL2dpdGh1Yi5jb20vcGhvZW5peGZyYW1ld29yay9waG9lbml4L2Jsb2IvbWFzdGVyL0xJQ0VOU0UubWRcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2VyaWFsaXplciB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICB0aGlzLkhFQURFUl9MRU5HVEggPSAxO1xyXG4gICAgfVxyXG4gICAgZGVjb2RlKHJhd1BheWxvYWQsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgaWYgKHJhd1BheWxvYWQuY29uc3RydWN0b3IgPT09IEFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayh0aGlzLl9iaW5hcnlEZWNvZGUocmF3UGF5bG9hZCkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHJhd1BheWxvYWQgPT09ICdzdHJpbmcnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjYWxsYmFjayhKU09OLnBhcnNlKHJhd1BheWxvYWQpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGNhbGxiYWNrKHt9KTtcclxuICAgIH1cclxuICAgIF9iaW5hcnlEZWNvZGUoYnVmZmVyKSB7XHJcbiAgICAgICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhidWZmZXIpO1xyXG4gICAgICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoKTtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2Rlcik7XHJcbiAgICB9XHJcbiAgICBfZGVjb2RlQnJvYWRjYXN0KGJ1ZmZlciwgdmlldywgZGVjb2Rlcikge1xyXG4gICAgICAgIGNvbnN0IHRvcGljU2l6ZSA9IHZpZXcuZ2V0VWludDgoMSk7XHJcbiAgICAgICAgY29uc3QgZXZlbnRTaXplID0gdmlldy5nZXRVaW50OCgyKTtcclxuICAgICAgICBsZXQgb2Zmc2V0ID0gdGhpcy5IRUFERVJfTEVOR1RIICsgMjtcclxuICAgICAgICBjb25zdCB0b3BpYyA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIHRvcGljU2l6ZSkpO1xyXG4gICAgICAgIG9mZnNldCA9IG9mZnNldCArIHRvcGljU2l6ZTtcclxuICAgICAgICBjb25zdCBldmVudCA9IGRlY29kZXIuZGVjb2RlKGJ1ZmZlci5zbGljZShvZmZzZXQsIG9mZnNldCArIGV2ZW50U2l6ZSkpO1xyXG4gICAgICAgIG9mZnNldCA9IG9mZnNldCArIGV2ZW50U2l6ZTtcclxuICAgICAgICBjb25zdCBkYXRhID0gSlNPTi5wYXJzZShkZWNvZGVyLmRlY29kZShidWZmZXIuc2xpY2Uob2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aCkpKTtcclxuICAgICAgICByZXR1cm4geyByZWY6IG51bGwsIHRvcGljOiB0b3BpYywgZXZlbnQ6IGV2ZW50LCBwYXlsb2FkOiBkYXRhIH07XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9c2VyaWFsaXplci5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/serializer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/timer.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/lib/timer.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Timer)\n/* harmony export */ });\n/**\r\n * Creates a timer that accepts a `timerCalc` function to perform calculated timeout retries, such as exponential backoff.\r\n *\r\n * @example\r\n *    let reconnectTimer = new Timer(() => this.connect(), function(tries){\r\n *      return [1000, 5000, 10000][tries - 1] || 10000\r\n *    })\r\n *    reconnectTimer.scheduleTimeout() // fires after 1000\r\n *    reconnectTimer.scheduleTimeout() // fires after 5000\r\n *    reconnectTimer.reset()\r\n *    reconnectTimer.scheduleTimeout() // fires after 1000\r\n */\r\nclass Timer {\r\n    constructor(callback, timerCalc) {\r\n        this.callback = callback;\r\n        this.timerCalc = timerCalc;\r\n        this.timer = undefined;\r\n        this.tries = 0;\r\n        this.callback = callback;\r\n        this.timerCalc = timerCalc;\r\n    }\r\n    reset() {\r\n        this.tries = 0;\r\n        clearTimeout(this.timer);\r\n        this.timer = undefined;\r\n    }\r\n    // Cancels any previous scheduleTimeout and schedules callback\r\n    scheduleTimeout() {\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => {\r\n            this.tries = this.tries + 1;\r\n            this.callback();\r\n        }, this.timerCalc(this.tries + 1));\r\n    }\r\n}\r\n//# sourceMappingURL=timer.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi90aW1lci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcmVhbHRpbWUtanMvZGlzdC9tb2R1bGUvbGliL3RpbWVyLmpzPzE1MzIiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXHJcbiAqIENyZWF0ZXMgYSB0aW1lciB0aGF0IGFjY2VwdHMgYSBgdGltZXJDYWxjYCBmdW5jdGlvbiB0byBwZXJmb3JtIGNhbGN1bGF0ZWQgdGltZW91dCByZXRyaWVzLCBzdWNoIGFzIGV4cG9uZW50aWFsIGJhY2tvZmYuXHJcbiAqXHJcbiAqIEBleGFtcGxlXHJcbiAqICAgIGxldCByZWNvbm5lY3RUaW1lciA9IG5ldyBUaW1lcigoKSA9PiB0aGlzLmNvbm5lY3QoKSwgZnVuY3Rpb24odHJpZXMpe1xyXG4gKiAgICAgIHJldHVybiBbMTAwMCwgNTAwMCwgMTAwMDBdW3RyaWVzIC0gMV0gfHwgMTAwMDBcclxuICogICAgfSlcclxuICogICAgcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxyXG4gKiAgICByZWNvbm5lY3RUaW1lci5zY2hlZHVsZVRpbWVvdXQoKSAvLyBmaXJlcyBhZnRlciA1MDAwXHJcbiAqICAgIHJlY29ubmVjdFRpbWVyLnJlc2V0KClcclxuICogICAgcmVjb25uZWN0VGltZXIuc2NoZWR1bGVUaW1lb3V0KCkgLy8gZmlyZXMgYWZ0ZXIgMTAwMFxyXG4gKi9cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGltZXIge1xyXG4gICAgY29uc3RydWN0b3IoY2FsbGJhY2ssIHRpbWVyQ2FsYykge1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLnRpbWVyQ2FsYyA9IHRpbWVyQ2FsYztcclxuICAgICAgICB0aGlzLnRpbWVyID0gdW5kZWZpbmVkO1xyXG4gICAgICAgIHRoaXMudHJpZXMgPSAwO1xyXG4gICAgICAgIHRoaXMuY2FsbGJhY2sgPSBjYWxsYmFjaztcclxuICAgICAgICB0aGlzLnRpbWVyQ2FsYyA9IHRpbWVyQ2FsYztcclxuICAgIH1cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMudHJpZXMgPSAwO1xyXG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVyKTtcclxuICAgICAgICB0aGlzLnRpbWVyID0gdW5kZWZpbmVkO1xyXG4gICAgfVxyXG4gICAgLy8gQ2FuY2VscyBhbnkgcHJldmlvdXMgc2NoZWR1bGVUaW1lb3V0IGFuZCBzY2hlZHVsZXMgY2FsbGJhY2tcclxuICAgIHNjaGVkdWxlVGltZW91dCgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lcik7XHJcbiAgICAgICAgdGhpcy50aW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICB0aGlzLnRyaWVzID0gdGhpcy50cmllcyArIDE7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsbGJhY2soKTtcclxuICAgICAgICB9LCB0aGlzLnRpbWVyQ2FsYyh0aGlzLnRyaWVzICsgMSkpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpbWVyLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/timer.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostgresTypes: () => (/* binding */ PostgresTypes),\n/* harmony export */   convertCell: () => (/* binding */ convertCell),\n/* harmony export */   convertChangeData: () => (/* binding */ convertChangeData),\n/* harmony export */   convertColumn: () => (/* binding */ convertColumn),\n/* harmony export */   httpEndpointURL: () => (/* binding */ httpEndpointURL),\n/* harmony export */   toArray: () => (/* binding */ toArray),\n/* harmony export */   toBoolean: () => (/* binding */ toBoolean),\n/* harmony export */   toJson: () => (/* binding */ toJson),\n/* harmony export */   toNumber: () => (/* binding */ toNumber),\n/* harmony export */   toTimestampString: () => (/* binding */ toTimestampString)\n/* harmony export */ });\n/**\r\n * Helpers to convert the change Payload into native JS types.\r\n */\r\n// Adapted from epgsql (src/epgsql_binary.erl), this module licensed under\r\n// 3-clause BSD found here: https://raw.githubusercontent.com/epgsql/epgsql/devel/LICENSE\r\nvar PostgresTypes;\r\n(function (PostgresTypes) {\r\n    PostgresTypes[\"abstime\"] = \"abstime\";\r\n    PostgresTypes[\"bool\"] = \"bool\";\r\n    PostgresTypes[\"date\"] = \"date\";\r\n    PostgresTypes[\"daterange\"] = \"daterange\";\r\n    PostgresTypes[\"float4\"] = \"float4\";\r\n    PostgresTypes[\"float8\"] = \"float8\";\r\n    PostgresTypes[\"int2\"] = \"int2\";\r\n    PostgresTypes[\"int4\"] = \"int4\";\r\n    PostgresTypes[\"int4range\"] = \"int4range\";\r\n    PostgresTypes[\"int8\"] = \"int8\";\r\n    PostgresTypes[\"int8range\"] = \"int8range\";\r\n    PostgresTypes[\"json\"] = \"json\";\r\n    PostgresTypes[\"jsonb\"] = \"jsonb\";\r\n    PostgresTypes[\"money\"] = \"money\";\r\n    PostgresTypes[\"numeric\"] = \"numeric\";\r\n    PostgresTypes[\"oid\"] = \"oid\";\r\n    PostgresTypes[\"reltime\"] = \"reltime\";\r\n    PostgresTypes[\"text\"] = \"text\";\r\n    PostgresTypes[\"time\"] = \"time\";\r\n    PostgresTypes[\"timestamp\"] = \"timestamp\";\r\n    PostgresTypes[\"timestamptz\"] = \"timestamptz\";\r\n    PostgresTypes[\"timetz\"] = \"timetz\";\r\n    PostgresTypes[\"tsrange\"] = \"tsrange\";\r\n    PostgresTypes[\"tstzrange\"] = \"tstzrange\";\r\n})(PostgresTypes || (PostgresTypes = {}));\r\n/**\r\n * Takes an array of columns and an object of string values then converts each string value\r\n * to its mapped type.\r\n *\r\n * @param {{name: String, type: String}[]} columns\r\n * @param {Object} record\r\n * @param {Object} options The map of various options that can be applied to the mapper\r\n * @param {Array} options.skipTypes The array of types that should not be converted\r\n *\r\n * @example convertChangeData([{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age:'33'}, {})\r\n * //=>{ first_name: 'Paul', age: 33 }\r\n */\r\nconst convertChangeData = (columns, record, options = {}) => {\r\n    var _a;\r\n    const skipTypes = (_a = options.skipTypes) !== null && _a !== void 0 ? _a : [];\r\n    if (!record) {\r\n        return {};\r\n    }\r\n    return Object.keys(record).reduce((acc, rec_key) => {\r\n        acc[rec_key] = convertColumn(rec_key, columns, record, skipTypes);\r\n        return acc;\r\n    }, {});\r\n};\r\n/**\r\n * Converts the value of an individual column.\r\n *\r\n * @param {String} columnName The column that you want to convert\r\n * @param {{name: String, type: String}[]} columns All of the columns\r\n * @param {Object} record The map of string values\r\n * @param {Array} skipTypes An array of types that should not be converted\r\n * @return {object} Useless information\r\n *\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, [])\r\n * //=> 33\r\n * @example convertColumn('age', [{name: 'first_name', type: 'text'}, {name: 'age', type: 'int4'}], {first_name: 'Paul', age: '33'}, ['int4'])\r\n * //=> \"33\"\r\n */\r\nconst convertColumn = (columnName, columns, record, skipTypes) => {\r\n    const column = columns.find((x) => x.name === columnName);\r\n    const colType = column === null || column === void 0 ? void 0 : column.type;\r\n    const value = record[columnName];\r\n    if (colType && !skipTypes.includes(colType)) {\r\n        return convertCell(colType, value);\r\n    }\r\n    return noop(value);\r\n};\r\n/**\r\n * If the value of the cell is `null`, returns null.\r\n * Otherwise converts the string value to the correct type.\r\n * @param {String} type A postgres column type\r\n * @param {String} value The cell value\r\n *\r\n * @example convertCell('bool', 't')\r\n * //=> true\r\n * @example convertCell('int8', '10')\r\n * //=> 10\r\n * @example convertCell('_int4', '{1,2,3,4}')\r\n * //=> [1,2,3,4]\r\n */\r\nconst convertCell = (type, value) => {\r\n    // if data type is an array\r\n    if (type.charAt(0) === '_') {\r\n        const dataType = type.slice(1, type.length);\r\n        return toArray(value, dataType);\r\n    }\r\n    // If not null, convert to correct type.\r\n    switch (type) {\r\n        case PostgresTypes.bool:\r\n            return toBoolean(value);\r\n        case PostgresTypes.float4:\r\n        case PostgresTypes.float8:\r\n        case PostgresTypes.int2:\r\n        case PostgresTypes.int4:\r\n        case PostgresTypes.int8:\r\n        case PostgresTypes.numeric:\r\n        case PostgresTypes.oid:\r\n            return toNumber(value);\r\n        case PostgresTypes.json:\r\n        case PostgresTypes.jsonb:\r\n            return toJson(value);\r\n        case PostgresTypes.timestamp:\r\n            return toTimestampString(value); // Format to be consistent with PostgREST\r\n        case PostgresTypes.abstime: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.date: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.daterange:\r\n        case PostgresTypes.int4range:\r\n        case PostgresTypes.int8range:\r\n        case PostgresTypes.money:\r\n        case PostgresTypes.reltime: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.text:\r\n        case PostgresTypes.time: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.timestamptz: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.timetz: // To allow users to cast it based on Timezone\r\n        case PostgresTypes.tsrange:\r\n        case PostgresTypes.tstzrange:\r\n            return noop(value);\r\n        default:\r\n            // Return the value for remaining types\r\n            return noop(value);\r\n    }\r\n};\r\nconst noop = (value) => {\r\n    return value;\r\n};\r\nconst toBoolean = (value) => {\r\n    switch (value) {\r\n        case 't':\r\n            return true;\r\n        case 'f':\r\n            return false;\r\n        default:\r\n            return value;\r\n    }\r\n};\r\nconst toNumber = (value) => {\r\n    if (typeof value === 'string') {\r\n        const parsedValue = parseFloat(value);\r\n        if (!Number.isNaN(parsedValue)) {\r\n            return parsedValue;\r\n        }\r\n    }\r\n    return value;\r\n};\r\nconst toJson = (value) => {\r\n    if (typeof value === 'string') {\r\n        try {\r\n            return JSON.parse(value);\r\n        }\r\n        catch (error) {\r\n            console.log(`JSON parse error: ${error}`);\r\n            return value;\r\n        }\r\n    }\r\n    return value;\r\n};\r\n/**\r\n * Converts a Postgres Array into a native JS array\r\n *\r\n * @example toArray('{}', 'int4')\r\n * //=> []\r\n * @example toArray('{\"[2021-01-01,2021-12-31)\",\"(2021-01-01,2021-12-32]\"}', 'daterange')\r\n * //=> ['[2021-01-01,2021-12-31)', '(2021-01-01,2021-12-32]']\r\n * @example toArray([1,2,3,4], 'int4')\r\n * //=> [1,2,3,4]\r\n */\r\nconst toArray = (value, type) => {\r\n    if (typeof value !== 'string') {\r\n        return value;\r\n    }\r\n    const lastIdx = value.length - 1;\r\n    const closeBrace = value[lastIdx];\r\n    const openBrace = value[0];\r\n    // Confirm value is a Postgres array by checking curly brackets\r\n    if (openBrace === '{' && closeBrace === '}') {\r\n        let arr;\r\n        const valTrim = value.slice(1, lastIdx);\r\n        // TODO: find a better solution to separate Postgres array data\r\n        try {\r\n            arr = JSON.parse('[' + valTrim + ']');\r\n        }\r\n        catch (_) {\r\n            // WARNING: splitting on comma does not cover all edge cases\r\n            arr = valTrim ? valTrim.split(',') : [];\r\n        }\r\n        return arr.map((val) => convertCell(type, val));\r\n    }\r\n    return value;\r\n};\r\n/**\r\n * Fixes timestamp to be ISO-8601. Swaps the space between the date and time for a 'T'\r\n * See https://github.com/supabase/supabase/issues/18\r\n *\r\n * @example toTimestampString('2019-09-10 00:00:00')\r\n * //=> '2019-09-10T00:00:00'\r\n */\r\nconst toTimestampString = (value) => {\r\n    if (typeof value === 'string') {\r\n        return value.replace(' ', 'T');\r\n    }\r\n    return value;\r\n};\r\nconst httpEndpointURL = (socketUrl) => {\r\n    let url = socketUrl;\r\n    url = url.replace(/^ws/i, 'http');\r\n    url = url.replace(/(\\/socket\\/websocket|\\/socket|\\/websocket)\\/?$/i, '');\r\n    return url.replace(/\\/+$/, '') + '/api/broadcast';\r\n};\r\n//# sourceMappingURL=transformers.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/transformers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/version.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/lib/version.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n// Generated automatically during releases by scripts/update-version-files.ts\r\n// This file provides runtime access to the package version for:\r\n// - HTTP request headers (e.g., X-Client-Info header for API requests)\r\n// - Debugging and support (identifying which version is running)\r\n// - Telemetry and logging (version reporting in errors/analytics)\r\n// - Ensuring build artifacts match the published package version\r\nconst version = '2.75.0';\r\n//# sourceMappingURL=version.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvdmVyc2lvbi5qcz83OGVjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5IGR1cmluZyByZWxlYXNlcyBieSBzY3JpcHRzL3VwZGF0ZS12ZXJzaW9uLWZpbGVzLnRzXHJcbi8vIFRoaXMgZmlsZSBwcm92aWRlcyBydW50aW1lIGFjY2VzcyB0byB0aGUgcGFja2FnZSB2ZXJzaW9uIGZvcjpcclxuLy8gLSBIVFRQIHJlcXVlc3QgaGVhZGVycyAoZS5nLiwgWC1DbGllbnQtSW5mbyBoZWFkZXIgZm9yIEFQSSByZXF1ZXN0cylcclxuLy8gLSBEZWJ1Z2dpbmcgYW5kIHN1cHBvcnQgKGlkZW50aWZ5aW5nIHdoaWNoIHZlcnNpb24gaXMgcnVubmluZylcclxuLy8gLSBUZWxlbWV0cnkgYW5kIGxvZ2dpbmcgKHZlcnNpb24gcmVwb3J0aW5nIGluIGVycm9ycy9hbmFseXRpY3MpXHJcbi8vIC0gRW5zdXJpbmcgYnVpbGQgYXJ0aWZhY3RzIG1hdGNoIHRoZSBwdWJsaXNoZWQgcGFja2FnZSB2ZXJzaW9uXHJcbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzIuNzUuMCc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   WebSocketFactory: () => (/* binding */ WebSocketFactory),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nclass WebSocketFactory {\r\n    static detectEnvironment() {\r\n        var _a;\r\n        if (typeof WebSocket !== 'undefined') {\r\n            return { type: 'native', constructor: WebSocket };\r\n        }\r\n        if (typeof globalThis !== 'undefined' && typeof globalThis.WebSocket !== 'undefined') {\r\n            return { type: 'native', constructor: globalThis.WebSocket };\r\n        }\r\n        if (typeof global !== 'undefined' && typeof global.WebSocket !== 'undefined') {\r\n            return { type: 'native', constructor: global.WebSocket };\r\n        }\r\n        if (typeof globalThis !== 'undefined' &&\r\n            typeof globalThis.WebSocketPair !== 'undefined' &&\r\n            typeof globalThis.WebSocket === 'undefined') {\r\n            return {\r\n                type: 'cloudflare',\r\n                error: 'Cloudflare Workers detected. WebSocket clients are not supported in Cloudflare Workers.',\r\n                workaround: 'Use Cloudflare Workers WebSocket API for server-side WebSocket handling, or deploy to a different runtime.',\r\n            };\r\n        }\r\n        if ((typeof globalThis !== 'undefined' && globalThis.EdgeRuntime) ||\r\n            (typeof navigator !== 'undefined' && ((_a = navigator.userAgent) === null || _a === void 0 ? void 0 : _a.includes('Vercel-Edge')))) {\r\n            return {\r\n                type: 'unsupported',\r\n                error: 'Edge runtime detected (Vercel Edge/Netlify Edge). WebSockets are not supported in edge functions.',\r\n                workaround: 'Use serverless functions or a different deployment target for WebSocket functionality.',\r\n            };\r\n        }\r\n        if (typeof process !== 'undefined') {\r\n            // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\r\n            const processVersions = process['versions'];\r\n            if (processVersions && processVersions['node']) {\r\n                // Remove 'v' prefix if present and parse the major version\r\n                const versionString = processVersions['node'];\r\n                const nodeVersion = parseInt(versionString.replace(/^v/, '').split('.')[0]);\r\n                // Node.js 22+ should have native WebSocket\r\n                if (nodeVersion >= 22) {\r\n                    // Check if native WebSocket is available (should be in Node.js 22+)\r\n                    if (typeof globalThis.WebSocket !== 'undefined') {\r\n                        return { type: 'native', constructor: globalThis.WebSocket };\r\n                    }\r\n                    // If not available, user needs to provide it\r\n                    return {\r\n                        type: 'unsupported',\r\n                        error: `Node.js ${nodeVersion} detected but native WebSocket not found.`,\r\n                        workaround: 'Provide a WebSocket implementation via the transport option.',\r\n                    };\r\n                }\r\n                // Node.js < 22 doesn't have native WebSocket\r\n                return {\r\n                    type: 'unsupported',\r\n                    error: `Node.js ${nodeVersion} detected without native WebSocket support.`,\r\n                    workaround: 'For Node.js < 22, install \"ws\" package and provide it via the transport option:\\n' +\r\n                        'import ws from \"ws\"\\n' +\r\n                        'new RealtimeClient(url, { transport: ws })',\r\n                };\r\n            }\r\n        }\r\n        return {\r\n            type: 'unsupported',\r\n            error: 'Unknown JavaScript runtime without WebSocket support.',\r\n            workaround: \"Ensure you're running in a supported environment (browser, Node.js, Deno) or provide a custom WebSocket implementation.\",\r\n        };\r\n    }\r\n    static getWebSocketConstructor() {\r\n        const env = this.detectEnvironment();\r\n        if (env.constructor) {\r\n            return env.constructor;\r\n        }\r\n        let errorMessage = env.error || 'WebSocket not supported in this environment.';\r\n        if (env.workaround) {\r\n            errorMessage += `\\n\\nSuggested solution: ${env.workaround}`;\r\n        }\r\n        throw new Error(errorMessage);\r\n    }\r\n    static createWebSocket(url, protocols) {\r\n        const WS = this.getWebSocketConstructor();\r\n        return new WS(url, protocols);\r\n    }\r\n    static isWebSocketSupported() {\r\n        try {\r\n            const env = this.detectEnvironment();\r\n            return env.type === 'native' || env.type === 'ws';\r\n        }\r\n        catch (_a) {\r\n            return false;\r\n        }\r\n    }\r\n}\r\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (WebSocketFactory);\r\n//# sourceMappingURL=websocket-factory.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3JlYWx0aW1lLWpzL2Rpc3QvbW9kdWxlL2xpYi93ZWJzb2NrZXQtZmFjdG9yeS5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDLGFBQWE7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLGFBQWE7QUFDbkQ7QUFDQTtBQUNBLG1EQUFtRCxlQUFlO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdURBQXVELGVBQWU7QUFDdEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlFQUFlLGdCQUFnQixFQUFDO0FBQ2hDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9yZWFsdGltZS1qcy9kaXN0L21vZHVsZS9saWIvd2Vic29ja2V0LWZhY3RvcnkuanM/YmE3NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgV2ViU29ja2V0RmFjdG9yeSB7XHJcbiAgICBzdGF0aWMgZGV0ZWN0RW52aXJvbm1lbnQoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGlmICh0eXBlb2YgV2ViU29ja2V0ICE9PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgICAgICByZXR1cm4geyB0eXBlOiAnbmF0aXZlJywgY29uc3RydWN0b3I6IFdlYlNvY2tldCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBnbG9iYWxUaGlzLldlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ25hdGl2ZScsIGNvbnN0cnVjdG9yOiBnbG9iYWxUaGlzLldlYlNvY2tldCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGdsb2JhbC5XZWJTb2NrZXQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHR5cGU6ICduYXRpdmUnLCBjb25zdHJ1Y3RvcjogZ2xvYmFsLldlYlNvY2tldCB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWxUaGlzLldlYlNvY2tldFBhaXIgIT09ICd1bmRlZmluZWQnICYmXHJcbiAgICAgICAgICAgIHR5cGVvZiBnbG9iYWxUaGlzLldlYlNvY2tldCA9PT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6ICdjbG91ZGZsYXJlJyxcclxuICAgICAgICAgICAgICAgIGVycm9yOiAnQ2xvdWRmbGFyZSBXb3JrZXJzIGRldGVjdGVkLiBXZWJTb2NrZXQgY2xpZW50cyBhcmUgbm90IHN1cHBvcnRlZCBpbiBDbG91ZGZsYXJlIFdvcmtlcnMuJyxcclxuICAgICAgICAgICAgICAgIHdvcmthcm91bmQ6ICdVc2UgQ2xvdWRmbGFyZSBXb3JrZXJzIFdlYlNvY2tldCBBUEkgZm9yIHNlcnZlci1zaWRlIFdlYlNvY2tldCBoYW5kbGluZywgb3IgZGVwbG95IHRvIGEgZGlmZmVyZW50IHJ1bnRpbWUuJyxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2xvYmFsVGhpcy5FZGdlUnVudGltZSkgfHxcclxuICAgICAgICAgICAgKHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmICgoX2EgPSBuYXZpZ2F0b3IudXNlckFnZW50KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaW5jbHVkZXMoJ1ZlcmNlbC1FZGdlJykpKSkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogJ3Vuc3VwcG9ydGVkJyxcclxuICAgICAgICAgICAgICAgIGVycm9yOiAnRWRnZSBydW50aW1lIGRldGVjdGVkIChWZXJjZWwgRWRnZS9OZXRsaWZ5IEVkZ2UpLiBXZWJTb2NrZXRzIGFyZSBub3Qgc3VwcG9ydGVkIGluIGVkZ2UgZnVuY3Rpb25zLicsXHJcbiAgICAgICAgICAgICAgICB3b3JrYXJvdW5kOiAnVXNlIHNlcnZlcmxlc3MgZnVuY3Rpb25zIG9yIGEgZGlmZmVyZW50IGRlcGxveW1lbnQgdGFyZ2V0IGZvciBXZWJTb2NrZXQgZnVuY3Rpb25hbGl0eS4nLFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgICAgIC8vIFVzZSBkeW5hbWljIHByb3BlcnR5IGFjY2VzcyB0byBhdm9pZCBOZXh0LmpzIEVkZ2UgUnVudGltZSBzdGF0aWMgYW5hbHlzaXMgd2FybmluZ3NcclxuICAgICAgICAgICAgY29uc3QgcHJvY2Vzc1ZlcnNpb25zID0gcHJvY2Vzc1sndmVyc2lvbnMnXTtcclxuICAgICAgICAgICAgaWYgKHByb2Nlc3NWZXJzaW9ucyAmJiBwcm9jZXNzVmVyc2lvbnNbJ25vZGUnXSkge1xyXG4gICAgICAgICAgICAgICAgLy8gUmVtb3ZlICd2JyBwcmVmaXggaWYgcHJlc2VudCBhbmQgcGFyc2UgdGhlIG1ham9yIHZlcnNpb25cclxuICAgICAgICAgICAgICAgIGNvbnN0IHZlcnNpb25TdHJpbmcgPSBwcm9jZXNzVmVyc2lvbnNbJ25vZGUnXTtcclxuICAgICAgICAgICAgICAgIGNvbnN0IG5vZGVWZXJzaW9uID0gcGFyc2VJbnQodmVyc2lvblN0cmluZy5yZXBsYWNlKC9edi8sICcnKS5zcGxpdCgnLicpWzBdKTtcclxuICAgICAgICAgICAgICAgIC8vIE5vZGUuanMgMjIrIHNob3VsZCBoYXZlIG5hdGl2ZSBXZWJTb2NrZXRcclxuICAgICAgICAgICAgICAgIGlmIChub2RlVmVyc2lvbiA+PSAyMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIG5hdGl2ZSBXZWJTb2NrZXQgaXMgYXZhaWxhYmxlIChzaG91bGQgYmUgaW4gTm9kZS5qcyAyMispXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzLldlYlNvY2tldCAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHsgdHlwZTogJ25hdGl2ZScsIGNvbnN0cnVjdG9yOiBnbG9iYWxUaGlzLldlYlNvY2tldCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyBJZiBub3QgYXZhaWxhYmxlLCB1c2VyIG5lZWRzIHRvIHByb3ZpZGUgaXRcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAndW5zdXBwb3J0ZWQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvcjogYE5vZGUuanMgJHtub2RlVmVyc2lvbn0gZGV0ZWN0ZWQgYnV0IG5hdGl2ZSBXZWJTb2NrZXQgbm90IGZvdW5kLmAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdvcmthcm91bmQ6ICdQcm92aWRlIGEgV2ViU29ja2V0IGltcGxlbWVudGF0aW9uIHZpYSB0aGUgdHJhbnNwb3J0IG9wdGlvbi4nLFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyBOb2RlLmpzIDwgMjIgZG9lc24ndCBoYXZlIG5hdGl2ZSBXZWJTb2NrZXRcclxuICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3Vuc3VwcG9ydGVkJyxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogYE5vZGUuanMgJHtub2RlVmVyc2lvbn0gZGV0ZWN0ZWQgd2l0aG91dCBuYXRpdmUgV2ViU29ja2V0IHN1cHBvcnQuYCxcclxuICAgICAgICAgICAgICAgICAgICB3b3JrYXJvdW5kOiAnRm9yIE5vZGUuanMgPCAyMiwgaW5zdGFsbCBcIndzXCIgcGFja2FnZSBhbmQgcHJvdmlkZSBpdCB2aWEgdGhlIHRyYW5zcG9ydCBvcHRpb246XFxuJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdpbXBvcnQgd3MgZnJvbSBcIndzXCJcXG4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ25ldyBSZWFsdGltZUNsaWVudCh1cmwsIHsgdHJhbnNwb3J0OiB3cyB9KScsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHR5cGU6ICd1bnN1cHBvcnRlZCcsXHJcbiAgICAgICAgICAgIGVycm9yOiAnVW5rbm93biBKYXZhU2NyaXB0IHJ1bnRpbWUgd2l0aG91dCBXZWJTb2NrZXQgc3VwcG9ydC4nLFxyXG4gICAgICAgICAgICB3b3JrYXJvdW5kOiBcIkVuc3VyZSB5b3UncmUgcnVubmluZyBpbiBhIHN1cHBvcnRlZCBlbnZpcm9ubWVudCAoYnJvd3NlciwgTm9kZS5qcywgRGVubykgb3IgcHJvdmlkZSBhIGN1c3RvbSBXZWJTb2NrZXQgaW1wbGVtZW50YXRpb24uXCIsXHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuICAgIHN0YXRpYyBnZXRXZWJTb2NrZXRDb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBjb25zdCBlbnYgPSB0aGlzLmRldGVjdEVudmlyb25tZW50KCk7XHJcbiAgICAgICAgaWYgKGVudi5jb25zdHJ1Y3Rvcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZW52LmNvbnN0cnVjdG9yO1xyXG4gICAgICAgIH1cclxuICAgICAgICBsZXQgZXJyb3JNZXNzYWdlID0gZW52LmVycm9yIHx8ICdXZWJTb2NrZXQgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGVudmlyb25tZW50Lic7XHJcbiAgICAgICAgaWYgKGVudi53b3JrYXJvdW5kKSB7XHJcbiAgICAgICAgICAgIGVycm9yTWVzc2FnZSArPSBgXFxuXFxuU3VnZ2VzdGVkIHNvbHV0aW9uOiAke2Vudi53b3JrYXJvdW5kfWA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGNyZWF0ZVdlYlNvY2tldCh1cmwsIHByb3RvY29scykge1xyXG4gICAgICAgIGNvbnN0IFdTID0gdGhpcy5nZXRXZWJTb2NrZXRDb25zdHJ1Y3RvcigpO1xyXG4gICAgICAgIHJldHVybiBuZXcgV1ModXJsLCBwcm90b2NvbHMpO1xyXG4gICAgfVxyXG4gICAgc3RhdGljIGlzV2ViU29ja2V0U3VwcG9ydGVkKCkge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGVudiA9IHRoaXMuZGV0ZWN0RW52aXJvbm1lbnQoKTtcclxuICAgICAgICAgICAgcmV0dXJuIGVudi50eXBlID09PSAnbmF0aXZlJyB8fCBlbnYudHlwZSA9PT0gJ3dzJztcclxuICAgICAgICB9XHJcbiAgICAgICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgV2ViU29ja2V0RmFjdG9yeTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9d2Vic29ja2V0LWZhY3RvcnkuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/realtime-js/dist/module/lib/websocket-factory.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/StorageClient.js":
/*!************************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/StorageClient.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageClient: () => (/* binding */ StorageClient)\n/* harmony export */ });\n/* harmony import */ var _packages_StorageFileApi__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./packages/StorageFileApi */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js\");\n/* harmony import */ var _packages_StorageBucketApi__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./packages/StorageBucketApi */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js\");\n\r\n\r\nclass StorageClient extends _packages_StorageBucketApi__WEBPACK_IMPORTED_MODULE_0__[\"default\"] {\r\n    constructor(url, headers = {}, fetch, opts) {\r\n        super(url, headers, fetch, opts);\r\n    }\r\n    /**\r\n     * Perform file operation in a bucket.\r\n     *\r\n     * @param id The bucket id to operate on.\r\n     */\r\n    from(id) {\r\n        return new _packages_StorageFileApi__WEBPACK_IMPORTED_MODULE_1__[\"default\"](this.url, this.headers, id, this.fetch);\r\n    }\r\n}\r\n//# sourceMappingURL=StorageClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvU3RvcmFnZUNsaWVudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBdUQ7QUFDSTtBQUNwRCw0QkFBNEIsa0VBQWdCO0FBQ25ELGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdFQUFjO0FBQ2pDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9TdG9yYWdlQ2xpZW50LmpzPzBjYjIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFN0b3JhZ2VGaWxlQXBpIGZyb20gJy4vcGFja2FnZXMvU3RvcmFnZUZpbGVBcGknO1xyXG5pbXBvcnQgU3RvcmFnZUJ1Y2tldEFwaSBmcm9tICcuL3BhY2thZ2VzL1N0b3JhZ2VCdWNrZXRBcGknO1xyXG5leHBvcnQgY2xhc3MgU3RvcmFnZUNsaWVudCBleHRlbmRzIFN0b3JhZ2VCdWNrZXRBcGkge1xyXG4gICAgY29uc3RydWN0b3IodXJsLCBoZWFkZXJzID0ge30sIGZldGNoLCBvcHRzKSB7XHJcbiAgICAgICAgc3VwZXIodXJsLCBoZWFkZXJzLCBmZXRjaCwgb3B0cyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBlcmZvcm0gZmlsZSBvcGVyYXRpb24gaW4gYSBidWNrZXQuXHJcbiAgICAgKlxyXG4gICAgICogQHBhcmFtIGlkIFRoZSBidWNrZXQgaWQgdG8gb3BlcmF0ZSBvbi5cclxuICAgICAqL1xyXG4gICAgZnJvbShpZCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RvcmFnZUZpbGVBcGkodGhpcy51cmwsIHRoaXMuaGVhZGVycywgaWQsIHRoaXMuZmV0Y2gpO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN0b3JhZ2VDbGllbnQuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/StorageClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/constants.js":
/*!************************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/lib/constants.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_HEADERS: () => (/* binding */ DEFAULT_HEADERS)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/version.js\");\n\r\nconst DEFAULT_HEADERS = { 'X-Client-Info': `storage-js/${_version__WEBPACK_IMPORTED_MODULE_0__.version}` };\r\n//# sourceMappingURL=constants.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFvQztBQUM3QiwwQkFBMEIsK0JBQStCLDZDQUFPLENBQUM7QUFDeEUiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2NvbnN0YW50cy5qcz9lYzQ1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHZlcnNpb24gfSBmcm9tICcuL3ZlcnNpb24nO1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9IRUFERVJTID0geyAnWC1DbGllbnQtSW5mbyc6IGBzdG9yYWdlLWpzLyR7dmVyc2lvbn1gIH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/errors.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/lib/errors.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageApiError: () => (/* binding */ StorageApiError),\n/* harmony export */   StorageError: () => (/* binding */ StorageError),\n/* harmony export */   StorageUnknownError: () => (/* binding */ StorageUnknownError),\n/* harmony export */   isStorageError: () => (/* binding */ isStorageError)\n/* harmony export */ });\nclass StorageError extends Error {\r\n    constructor(message) {\r\n        super(message);\r\n        this.__isStorageError = true;\r\n        this.name = 'StorageError';\r\n    }\r\n}\r\nfunction isStorageError(error) {\r\n    return typeof error === 'object' && error !== null && '__isStorageError' in error;\r\n}\r\nclass StorageApiError extends StorageError {\r\n    constructor(message, status, statusCode) {\r\n        super(message);\r\n        this.name = 'StorageApiError';\r\n        this.status = status;\r\n        this.statusCode = statusCode;\r\n    }\r\n    toJSON() {\r\n        return {\r\n            name: this.name,\r\n            message: this.message,\r\n            status: this.status,\r\n            statusCode: this.statusCode,\r\n        };\r\n    }\r\n}\r\nclass StorageUnknownError extends StorageError {\r\n    constructor(message, originalError) {\r\n        super(message);\r\n        this.name = 'StorageUnknownError';\r\n        this.originalError = originalError;\r\n    }\r\n}\r\n//# sourceMappingURL=errors.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2Vycm9ycy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2Vycm9ycy5qcz83YzBlIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTdG9yYWdlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XHJcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlKSB7XHJcbiAgICAgICAgc3VwZXIobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5fX2lzU3RvcmFnZUVycm9yID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLm5hbWUgPSAnU3RvcmFnZUVycm9yJztcclxuICAgIH1cclxufVxyXG5leHBvcnQgZnVuY3Rpb24gaXNTdG9yYWdlRXJyb3IoZXJyb3IpIHtcclxuICAgIHJldHVybiB0eXBlb2YgZXJyb3IgPT09ICdvYmplY3QnICYmIGVycm9yICE9PSBudWxsICYmICdfX2lzU3RvcmFnZUVycm9yJyBpbiBlcnJvcjtcclxufVxyXG5leHBvcnQgY2xhc3MgU3RvcmFnZUFwaUVycm9yIGV4dGVuZHMgU3RvcmFnZUVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIHN0YXR1cywgc3RhdHVzQ29kZSkge1xyXG4gICAgICAgIHN1cGVyKG1lc3NhZ2UpO1xyXG4gICAgICAgIHRoaXMubmFtZSA9ICdTdG9yYWdlQXBpRXJyb3InO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzID0gc3RhdHVzO1xyXG4gICAgICAgIHRoaXMuc3RhdHVzQ29kZSA9IHN0YXR1c0NvZGU7XHJcbiAgICB9XHJcbiAgICB0b0pTT04oKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxyXG4gICAgICAgICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXHJcbiAgICAgICAgICAgIHN0YXR1c0NvZGU6IHRoaXMuc3RhdHVzQ29kZSxcclxuICAgICAgICB9O1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBjbGFzcyBTdG9yYWdlVW5rbm93bkVycm9yIGV4dGVuZHMgU3RvcmFnZUVycm9yIHtcclxuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9yaWdpbmFsRXJyb3IpIHtcclxuICAgICAgICBzdXBlcihtZXNzYWdlKTtcclxuICAgICAgICB0aGlzLm5hbWUgPSAnU3RvcmFnZVVua25vd25FcnJvcic7XHJcbiAgICAgICAgdGhpcy5vcmlnaW5hbEVycm9yID0gb3JpZ2luYWxFcnJvcjtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/fetch.js":
/*!********************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/lib/fetch.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   head: () => (/* binding */ head),\n/* harmony export */   post: () => (/* binding */ post),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   remove: () => (/* binding */ remove)\n/* harmony export */ });\n/* harmony import */ var _errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./errors */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/errors.js\");\n/* harmony import */ var _helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nconst _getErrorMessage = (err) => err.msg || err.message || err.error_description || err.error || JSON.stringify(err);\r\nconst handleError = (error, reject, options) => __awaiter(void 0, void 0, void 0, function* () {\r\n    const Res = yield (0,_helpers__WEBPACK_IMPORTED_MODULE_0__.resolveResponse)();\r\n    if (error instanceof Res && !(options === null || options === void 0 ? void 0 : options.noResolveJson)) {\r\n        error\r\n            .json()\r\n            .then((err) => {\r\n            const status = error.status || 500;\r\n            const statusCode = (err === null || err === void 0 ? void 0 : err.statusCode) || status + '';\r\n            reject(new _errors__WEBPACK_IMPORTED_MODULE_1__.StorageApiError(_getErrorMessage(err), status, statusCode));\r\n        })\r\n            .catch((err) => {\r\n            reject(new _errors__WEBPACK_IMPORTED_MODULE_1__.StorageUnknownError(_getErrorMessage(err), err));\r\n        });\r\n    }\r\n    else {\r\n        reject(new _errors__WEBPACK_IMPORTED_MODULE_1__.StorageUnknownError(_getErrorMessage(error), error));\r\n    }\r\n});\r\nconst _getRequestParams = (method, options, parameters, body) => {\r\n    const params = { method, headers: (options === null || options === void 0 ? void 0 : options.headers) || {} };\r\n    if (method === 'GET' || !body) {\r\n        return params;\r\n    }\r\n    if ((0,_helpers__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(body)) {\r\n        params.headers = Object.assign({ 'Content-Type': 'application/json' }, options === null || options === void 0 ? void 0 : options.headers);\r\n        params.body = JSON.stringify(body);\r\n    }\r\n    else {\r\n        params.body = body;\r\n    }\r\n    if (options === null || options === void 0 ? void 0 : options.duplex) {\r\n        params.duplex = options.duplex;\r\n    }\r\n    return Object.assign(Object.assign({}, params), parameters);\r\n};\r\nfunction _handleRequest(fetcher, method, url, options, parameters, body) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((resolve, reject) => {\r\n            fetcher(url, _getRequestParams(method, options, parameters, body))\r\n                .then((result) => {\r\n                if (!result.ok)\r\n                    throw result;\r\n                if (options === null || options === void 0 ? void 0 : options.noResolveJson)\r\n                    return result;\r\n                return result.json();\r\n            })\r\n                .then((data) => resolve(data))\r\n                .catch((error) => handleError(error, reject, options));\r\n        });\r\n    });\r\n}\r\nfunction get(fetcher, url, options, parameters) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return _handleRequest(fetcher, 'GET', url, options, parameters);\r\n    });\r\n}\r\nfunction post(fetcher, url, body, options, parameters) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return _handleRequest(fetcher, 'POST', url, options, parameters, body);\r\n    });\r\n}\r\nfunction put(fetcher, url, body, options, parameters) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return _handleRequest(fetcher, 'PUT', url, options, parameters, body);\r\n    });\r\n}\r\nfunction head(fetcher, url, options, parameters) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return _handleRequest(fetcher, 'HEAD', url, Object.assign(Object.assign({}, options), { noResolveJson: true }), parameters);\r\n    });\r\n}\r\nfunction remove(fetcher, url, body, options, parameters) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return _handleRequest(fetcher, 'DELETE', url, options, parameters, body);\r\n    });\r\n}\r\n//# sourceMappingURL=fetch.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2ZldGNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBQSxpQkFBaUIsU0FBSSxJQUFJLFNBQUk7QUFDN0IsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDZ0U7QUFDTDtBQUMzRDtBQUNBO0FBQ0Esc0JBQXNCLHlEQUFlO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvREFBZTtBQUN0QyxTQUFTO0FBQ1Q7QUFDQSx1QkFBdUIsd0RBQW1CO0FBQzFDLFNBQVM7QUFDVDtBQUNBO0FBQ0EsbUJBQW1CLHdEQUFtQjtBQUN0QztBQUNBLENBQUM7QUFDRDtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQSxRQUFRLHVEQUFhO0FBQ3JCLHlDQUF5QyxvQ0FBb0M7QUFDN0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QztBQUN6QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBLGtGQUFrRixjQUFjLHFCQUFxQjtBQUNySCxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9saWIvZmV0Y2guanM/MmViNiJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbmltcG9ydCB7IFN0b3JhZ2VBcGlFcnJvciwgU3RvcmFnZVVua25vd25FcnJvciB9IGZyb20gJy4vZXJyb3JzJztcclxuaW1wb3J0IHsgaXNQbGFpbk9iamVjdCwgcmVzb2x2ZVJlc3BvbnNlIH0gZnJvbSAnLi9oZWxwZXJzJztcclxuY29uc3QgX2dldEVycm9yTWVzc2FnZSA9IChlcnIpID0+IGVyci5tc2cgfHwgZXJyLm1lc3NhZ2UgfHwgZXJyLmVycm9yX2Rlc2NyaXB0aW9uIHx8IGVyci5lcnJvciB8fCBKU09OLnN0cmluZ2lmeShlcnIpO1xyXG5jb25zdCBoYW5kbGVFcnJvciA9IChlcnJvciwgcmVqZWN0LCBvcHRpb25zKSA9PiBfX2F3YWl0ZXIodm9pZCAwLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgIGNvbnN0IFJlcyA9IHlpZWxkIHJlc29sdmVSZXNwb25zZSgpO1xyXG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgUmVzICYmICEob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5vUmVzb2x2ZUpzb24pKSB7XHJcbiAgICAgICAgZXJyb3JcclxuICAgICAgICAgICAgLmpzb24oKVxyXG4gICAgICAgICAgICAudGhlbigoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1cyA9IGVycm9yLnN0YXR1cyB8fCA1MDA7XHJcbiAgICAgICAgICAgIGNvbnN0IHN0YXR1c0NvZGUgPSAoZXJyID09PSBudWxsIHx8IGVyciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyLnN0YXR1c0NvZGUpIHx8IHN0YXR1cyArICcnO1xyXG4gICAgICAgICAgICByZWplY3QobmV3IFN0b3JhZ2VBcGlFcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGVyciksIHN0YXR1cywgc3RhdHVzQ29kZSkpO1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgICAgIC5jYXRjaCgoZXJyKSA9PiB7XHJcbiAgICAgICAgICAgIHJlamVjdChuZXcgU3RvcmFnZVVua25vd25FcnJvcihfZ2V0RXJyb3JNZXNzYWdlKGVyciksIGVycikpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmVqZWN0KG5ldyBTdG9yYWdlVW5rbm93bkVycm9yKF9nZXRFcnJvck1lc3NhZ2UoZXJyb3IpLCBlcnJvcikpO1xyXG4gICAgfVxyXG59KTtcclxuY29uc3QgX2dldFJlcXVlc3RQYXJhbXMgPSAobWV0aG9kLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KSA9PiB7XHJcbiAgICBjb25zdCBwYXJhbXMgPSB7IG1ldGhvZCwgaGVhZGVyczogKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzKSB8fCB7fSB9O1xyXG4gICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcgfHwgIWJvZHkpIHtcclxuICAgICAgICByZXR1cm4gcGFyYW1zO1xyXG4gICAgfVxyXG4gICAgaWYgKGlzUGxhaW5PYmplY3QoYm9keSkpIHtcclxuICAgICAgICBwYXJhbXMuaGVhZGVycyA9IE9iamVjdC5hc3NpZ24oeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sIG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5oZWFkZXJzKTtcclxuICAgICAgICBwYXJhbXMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcGFyYW1zLmJvZHkgPSBib2R5O1xyXG4gICAgfVxyXG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5kdXBsZXgpIHtcclxuICAgICAgICBwYXJhbXMuZHVwbGV4ID0gb3B0aW9ucy5kdXBsZXg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMpLCBwYXJhbWV0ZXJzKTtcclxufTtcclxuZnVuY3Rpb24gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgbWV0aG9kLCB1cmwsIG9wdGlvbnMsIHBhcmFtZXRlcnMsIGJvZHkpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgZmV0Y2hlcih1cmwsIF9nZXRSZXF1ZXN0UGFyYW1zKG1ldGhvZCwgb3B0aW9ucywgcGFyYW1ldGVycywgYm9keSkpXHJcbiAgICAgICAgICAgICAgICAudGhlbigocmVzdWx0KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3VsdC5vaylcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucyA9PT0gbnVsbCB8fCBvcHRpb25zID09PSB2b2lkIDAgPyB2b2lkIDAgOiBvcHRpb25zLm5vUmVzb2x2ZUpzb24pXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQuanNvbigpO1xyXG4gICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLnRoZW4oKGRhdGEpID0+IHJlc29sdmUoZGF0YSkpXHJcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycm9yKSA9PiBoYW5kbGVFcnJvcihlcnJvciwgcmVqZWN0LCBvcHRpb25zKSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0KGZldGNoZXIsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ0dFVCcsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycyk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcG9zdChmZXRjaGVyLCB1cmwsIGJvZHksIG9wdGlvbnMsIHBhcmFtZXRlcnMpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9oYW5kbGVSZXF1ZXN0KGZldGNoZXIsICdQT1NUJywgdXJsLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBwdXQoZmV0Y2hlciwgdXJsLCBib2R5LCBvcHRpb25zLCBwYXJhbWV0ZXJzKSB7XHJcbiAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xyXG4gICAgICAgIHJldHVybiBfaGFuZGxlUmVxdWVzdChmZXRjaGVyLCAnUFVUJywgdXJsLCBvcHRpb25zLCBwYXJhbWV0ZXJzLCBib2R5KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBoZWFkKGZldGNoZXIsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ0hFQUQnLCB1cmwsIE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucyksIHsgbm9SZXNvbHZlSnNvbjogdHJ1ZSB9KSwgcGFyYW1ldGVycyk7XHJcbiAgICB9KTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlKGZldGNoZXIsIHVybCwgYm9keSwgb3B0aW9ucywgcGFyYW1ldGVycykge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICByZXR1cm4gX2hhbmRsZVJlcXVlc3QoZmV0Y2hlciwgJ0RFTEVURScsIHVybCwgb3B0aW9ucywgcGFyYW1ldGVycywgYm9keSk7XHJcbiAgICB9KTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1mZXRjaC5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/lib/helpers.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isPlainObject: () => (/* binding */ isPlainObject),\n/* harmony export */   recursiveToCamel: () => (/* binding */ recursiveToCamel),\n/* harmony export */   resolveFetch: () => (/* binding */ resolveFetch),\n/* harmony export */   resolveResponse: () => (/* binding */ resolveResponse)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nconst resolveFetch = (customFetch) => {\r\n    let _fetch;\r\n    if (customFetch) {\r\n        _fetch = customFetch;\r\n    }\r\n    else if (typeof fetch === 'undefined') {\r\n        _fetch = (...args) => Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @supabase/node-fetch */ \"(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\", 23)).then(({ default: fetch }) => fetch(...args));\r\n    }\r\n    else {\r\n        _fetch = fetch;\r\n    }\r\n    return (...args) => _fetch(...args);\r\n};\r\nconst resolveResponse = () => __awaiter(void 0, void 0, void 0, function* () {\r\n    if (typeof Response === 'undefined') {\r\n        // @ts-ignore\r\n        return (yield Promise.resolve(/*! import() */).then(__webpack_require__.t.bind(__webpack_require__, /*! @supabase/node-fetch */ \"(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\", 23))).Response;\r\n    }\r\n    return Response;\r\n});\r\nconst recursiveToCamel = (item) => {\r\n    if (Array.isArray(item)) {\r\n        return item.map((el) => recursiveToCamel(el));\r\n    }\r\n    else if (typeof item === 'function' || item !== Object(item)) {\r\n        return item;\r\n    }\r\n    const result = {};\r\n    Object.entries(item).forEach(([key, value]) => {\r\n        const newKey = key.replace(/([-_][a-z])/gi, (c) => c.toUpperCase().replace(/[-_]/g, ''));\r\n        result[newKey] = recursiveToCamel(value);\r\n    });\r\n    return result;\r\n};\r\n/**\r\n * Determine if input is a plain object\r\n * An object is plain if it's created by either {}, new Object(), or Object.create(null)\r\n * source: https://github.com/sindresorhus/is-plain-obj\r\n */\r\nconst isPlainObject = (value) => {\r\n    if (typeof value !== 'object' || value === null) {\r\n        return false;\r\n    }\r\n    const prototype = Object.getPrototypeOf(value);\r\n    return ((prototype === null ||\r\n        prototype === Object.prototype ||\r\n        Object.getPrototypeOf(prototype) === null) &&\r\n        !(Symbol.toStringTag in value) &&\r\n        !(Symbol.iterator in value));\r\n};\r\n//# sourceMappingURL=helpers.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLGlCQUFpQixTQUFJLElBQUksU0FBSTtBQUM3Qiw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QixnTEFBOEIsU0FBUyxnQkFBZ0I7QUFDckY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0Esc0JBQXNCLGdMQUE4QjtBQUNwRDtBQUNBO0FBQ0EsQ0FBQztBQUNNO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9saWIvaGVscGVycy5qcz85Mjk4Il0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0IGNvbnN0IHJlc29sdmVGZXRjaCA9IChjdXN0b21GZXRjaCkgPT4ge1xyXG4gICAgbGV0IF9mZXRjaDtcclxuICAgIGlmIChjdXN0b21GZXRjaCkge1xyXG4gICAgICAgIF9mZXRjaCA9IGN1c3RvbUZldGNoO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAodHlwZW9mIGZldGNoID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIF9mZXRjaCA9ICguLi5hcmdzKSA9PiBpbXBvcnQoJ0BzdXBhYmFzZS9ub2RlLWZldGNoJykudGhlbigoeyBkZWZhdWx0OiBmZXRjaCB9KSA9PiBmZXRjaCguLi5hcmdzKSk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBfZmV0Y2ggPSBmZXRjaDtcclxuICAgIH1cclxuICAgIHJldHVybiAoLi4uYXJncykgPT4gX2ZldGNoKC4uLmFyZ3MpO1xyXG59O1xyXG5leHBvcnQgY29uc3QgcmVzb2x2ZVJlc3BvbnNlID0gKCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlc3BvbnNlID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIC8vIEB0cy1pZ25vcmVcclxuICAgICAgICByZXR1cm4gKHlpZWxkIGltcG9ydCgnQHN1cGFiYXNlL25vZGUtZmV0Y2gnKSkuUmVzcG9uc2U7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gUmVzcG9uc2U7XHJcbn0pO1xyXG5leHBvcnQgY29uc3QgcmVjdXJzaXZlVG9DYW1lbCA9IChpdGVtKSA9PiB7XHJcbiAgICBpZiAoQXJyYXkuaXNBcnJheShpdGVtKSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtLm1hcCgoZWwpID0+IHJlY3Vyc2l2ZVRvQ2FtZWwoZWwpKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSAnZnVuY3Rpb24nIHx8IGl0ZW0gIT09IE9iamVjdChpdGVtKSkge1xyXG4gICAgICAgIHJldHVybiBpdGVtO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcmVzdWx0ID0ge307XHJcbiAgICBPYmplY3QuZW50cmllcyhpdGVtKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHtcclxuICAgICAgICBjb25zdCBuZXdLZXkgPSBrZXkucmVwbGFjZSgvKFstX11bYS16XSkvZ2ksIChjKSA9PiBjLnRvVXBwZXJDYXNlKCkucmVwbGFjZSgvWy1fXS9nLCAnJykpO1xyXG4gICAgICAgIHJlc3VsdFtuZXdLZXldID0gcmVjdXJzaXZlVG9DYW1lbCh2YWx1ZSk7XHJcbiAgICB9KTtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn07XHJcbi8qKlxyXG4gKiBEZXRlcm1pbmUgaWYgaW5wdXQgaXMgYSBwbGFpbiBvYmplY3RcclxuICogQW4gb2JqZWN0IGlzIHBsYWluIGlmIGl0J3MgY3JlYXRlZCBieSBlaXRoZXIge30sIG5ldyBPYmplY3QoKSwgb3IgT2JqZWN0LmNyZWF0ZShudWxsKVxyXG4gKiBzb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9zaW5kcmVzb3JodXMvaXMtcGxhaW4tb2JqXHJcbiAqL1xyXG5leHBvcnQgY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWx1ZSkgPT4ge1xyXG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgfHwgdmFsdWUgPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCBwcm90b3R5cGUgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpO1xyXG4gICAgcmV0dXJuICgocHJvdG90eXBlID09PSBudWxsIHx8XHJcbiAgICAgICAgcHJvdG90eXBlID09PSBPYmplY3QucHJvdG90eXBlIHx8XHJcbiAgICAgICAgT2JqZWN0LmdldFByb3RvdHlwZU9mKHByb3RvdHlwZSkgPT09IG51bGwpICYmXHJcbiAgICAgICAgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsdWUpICYmXHJcbiAgICAgICAgIShTeW1ib2wuaXRlcmF0b3IgaW4gdmFsdWUpKTtcclxufTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/version.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/lib/version.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n// Generated automatically during releases by scripts/update-version-files.ts\r\n// This file provides runtime access to the package version for:\r\n// - HTTP request headers (e.g., X-Client-Info header for API requests)\r\n// - Debugging and support (identifying which version is running)\r\n// - Telemetry and logging (version reporting in errors/analytics)\r\n// - Ensuring build artifacts match the published package version\r\nconst version = '2.75.0';\r\n//# sourceMappingURL=version.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL3ZlcnNpb24uanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvbGliL3ZlcnNpb24uanM/NDhkYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBHZW5lcmF0ZWQgYXV0b21hdGljYWxseSBkdXJpbmcgcmVsZWFzZXMgYnkgc2NyaXB0cy91cGRhdGUtdmVyc2lvbi1maWxlcy50c1xyXG4vLyBUaGlzIGZpbGUgcHJvdmlkZXMgcnVudGltZSBhY2Nlc3MgdG8gdGhlIHBhY2thZ2UgdmVyc2lvbiBmb3I6XHJcbi8vIC0gSFRUUCByZXF1ZXN0IGhlYWRlcnMgKGUuZy4sIFgtQ2xpZW50LUluZm8gaGVhZGVyIGZvciBBUEkgcmVxdWVzdHMpXHJcbi8vIC0gRGVidWdnaW5nIGFuZCBzdXBwb3J0IChpZGVudGlmeWluZyB3aGljaCB2ZXJzaW9uIGlzIHJ1bm5pbmcpXHJcbi8vIC0gVGVsZW1ldHJ5IGFuZCBsb2dnaW5nICh2ZXJzaW9uIHJlcG9ydGluZyBpbiBlcnJvcnMvYW5hbHl0aWNzKVxyXG4vLyAtIEVuc3VyaW5nIGJ1aWxkIGFydGlmYWN0cyBtYXRjaCB0aGUgcHVibGlzaGVkIHBhY2thZ2UgdmVyc2lvblxyXG5leHBvcnQgY29uc3QgdmVyc2lvbiA9ICcyLjc1LjAnO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD12ZXJzaW9uLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/BlobDownloadBuilder.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/packages/BlobDownloadBuilder.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ BlobDownloadBuilder)\n/* harmony export */ });\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/errors */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/errors.js\");\n/* harmony import */ var _StreamDownloadBuilder__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./StreamDownloadBuilder */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StreamDownloadBuilder.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\nclass BlobDownloadBuilder {\r\n    constructor(downloadFn, shouldThrowOnError) {\r\n        this.downloadFn = downloadFn;\r\n        this.shouldThrowOnError = shouldThrowOnError;\r\n    }\r\n    asStream() {\r\n        return new _StreamDownloadBuilder__WEBPACK_IMPORTED_MODULE_0__[\"default\"](this.downloadFn, this.shouldThrowOnError);\r\n    }\r\n    then(onfulfilled, onrejected) {\r\n        return this.execute().then(onfulfilled, onrejected);\r\n    }\r\n    execute() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const result = yield this.downloadFn();\r\n                return {\r\n                    data: yield result.blob(),\r\n                    error: null,\r\n                };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_1__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=BlobDownloadBuilder.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvcGFja2FnZXMvQmxvYkRvd25sb2FkQnVpbGRlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxpQkFBaUIsU0FBSSxJQUFJLFNBQUk7QUFDN0IsNEJBQTRCLCtEQUErRCxpQkFBaUI7QUFDNUc7QUFDQSxvQ0FBb0MsTUFBTSwrQkFBK0IsWUFBWTtBQUNyRixtQ0FBbUMsTUFBTSxtQ0FBbUMsWUFBWTtBQUN4RixnQ0FBZ0M7QUFDaEM7QUFDQSxLQUFLO0FBQ0w7QUFDK0M7QUFDYTtBQUM3QztBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsOERBQXFCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsMkRBQWM7QUFDbEMsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvcGFja2FnZXMvQmxvYkRvd25sb2FkQnVpbGRlci5qcz9kYzdmIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuaW1wb3J0IHsgaXNTdG9yYWdlRXJyb3IgfSBmcm9tICcuLi9saWIvZXJyb3JzJztcclxuaW1wb3J0IFN0cmVhbURvd25sb2FkQnVpbGRlciBmcm9tICcuL1N0cmVhbURvd25sb2FkQnVpbGRlcic7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJsb2JEb3dubG9hZEJ1aWxkZXIge1xyXG4gICAgY29uc3RydWN0b3IoZG93bmxvYWRGbiwgc2hvdWxkVGhyb3dPbkVycm9yKSB7XHJcbiAgICAgICAgdGhpcy5kb3dubG9hZEZuID0gZG93bmxvYWRGbjtcclxuICAgICAgICB0aGlzLnNob3VsZFRocm93T25FcnJvciA9IHNob3VsZFRocm93T25FcnJvcjtcclxuICAgIH1cclxuICAgIGFzU3RyZWFtKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU3RyZWFtRG93bmxvYWRCdWlsZGVyKHRoaXMuZG93bmxvYWRGbiwgdGhpcy5zaG91bGRUaHJvd09uRXJyb3IpO1xyXG4gICAgfVxyXG4gICAgdGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoKS50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKTtcclxuICAgIH1cclxuICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMuZG93bmxvYWRGbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiB5aWVsZCByZXN1bHQuYmxvYigpLFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNob3VsZFRocm93T25FcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGlzU3RvcmFnZUVycm9yKGVycm9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7IGRhdGE6IG51bGwsIGVycm9yIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUJsb2JEb3dubG9hZEJ1aWxkZXIuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/BlobDownloadBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StorageBucketApi)\n/* harmony export */ });\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/constants */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/constants.js\");\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../lib/errors */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/errors.js\");\n/* harmony import */ var _lib_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/fetch */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/fetch.js\");\n/* harmony import */ var _lib_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/helpers */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nclass StorageBucketApi {\r\n    constructor(url, headers = {}, fetch, opts) {\r\n        this.shouldThrowOnError = false;\r\n        const baseUrl = new URL(url);\r\n        // if legacy uri is used, replace with new storage host (disables request buffering to allow > 50GB uploads)\r\n        // \"project-ref.supabase.co\" becomes \"project-ref.storage.supabase.co\"\r\n        if (opts === null || opts === void 0 ? void 0 : opts.useNewHostname) {\r\n            const isSupabaseHost = /supabase\\.(co|in|red)$/.test(baseUrl.hostname);\r\n            if (isSupabaseHost && !baseUrl.hostname.includes('storage.supabase.')) {\r\n                baseUrl.hostname = baseUrl.hostname.replace('supabase.', 'storage.supabase.');\r\n            }\r\n        }\r\n        this.url = baseUrl.href.replace(/\\/$/, '');\r\n        this.headers = Object.assign(Object.assign({}, _lib_constants__WEBPACK_IMPORTED_MODULE_0__.DEFAULT_HEADERS), headers);\r\n        this.fetch = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_1__.resolveFetch)(fetch);\r\n    }\r\n    /**\r\n     * Enable throwing errors instead of returning them.\r\n     */\r\n    throwOnError() {\r\n        this.shouldThrowOnError = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Retrieves the details of all Storage buckets within an existing project.\r\n     */\r\n    listBuckets() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_2__.get)(this.fetch, `${this.url}/bucket`, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Retrieves the details of an existing Storage bucket.\r\n     *\r\n     * @param id The unique identifier of the bucket you would like to retrieve.\r\n     */\r\n    getBucket(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_2__.get)(this.fetch, `${this.url}/bucket/${id}`, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates a new Storage bucket\r\n     *\r\n     * @param id A unique identifier for the bucket you are creating.\r\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations. By default, buckets are private.\r\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n     * The global file size limit takes precedence over this value.\r\n     * The default value is null, which doesn't set a per bucket file size limit.\r\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n     * The default value is null, which allows files with all mime types to be uploaded.\r\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n     * @returns newly created bucket id\r\n     * @param options.type (private-beta) specifies the bucket type. see `BucketType` for more details.\r\n     *   - default bucket type is `STANDARD`\r\n     */\r\n    createBucket(id_1) {\r\n        return __awaiter(this, arguments, void 0, function* (id, options = {\r\n            public: false,\r\n        }) {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_2__.post)(this.fetch, `${this.url}/bucket`, {\r\n                    id,\r\n                    name: id,\r\n                    type: options.type,\r\n                    public: options.public,\r\n                    file_size_limit: options.fileSizeLimit,\r\n                    allowed_mime_types: options.allowedMimeTypes,\r\n                }, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Updates a Storage bucket\r\n     *\r\n     * @param id A unique identifier for the bucket you are updating.\r\n     * @param options.public The visibility of the bucket. Public buckets don't require an authorization token to download objects, but still require a valid token for all other operations.\r\n     * @param options.fileSizeLimit specifies the max file size in bytes that can be uploaded to this bucket.\r\n     * The global file size limit takes precedence over this value.\r\n     * The default value is null, which doesn't set a per bucket file size limit.\r\n     * @param options.allowedMimeTypes specifies the allowed mime types that this bucket can accept during upload.\r\n     * The default value is null, which allows files with all mime types to be uploaded.\r\n     * Each mime type specified can be a wildcard, e.g. image/*, or a specific mime type, e.g. image/png.\r\n     */\r\n    updateBucket(id, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_2__.put)(this.fetch, `${this.url}/bucket/${id}`, {\r\n                    id,\r\n                    name: id,\r\n                    public: options.public,\r\n                    file_size_limit: options.fileSizeLimit,\r\n                    allowed_mime_types: options.allowedMimeTypes,\r\n                }, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Removes all objects inside a single bucket.\r\n     *\r\n     * @param id The unique identifier of the bucket you would like to empty.\r\n     */\r\n    emptyBucket(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_2__.post)(this.fetch, `${this.url}/bucket/${id}/empty`, {}, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Deletes an existing bucket. A bucket can't be deleted with existing objects inside it.\r\n     * You must first `empty()` the bucket.\r\n     *\r\n     * @param id The unique identifier of the bucket you would like to delete.\r\n     */\r\n    deleteBucket(id) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_2__.remove)(this.fetch, `${this.url}/bucket/${id}`, {}, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_3__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=StorageBucketApi.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StorageBucketApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StorageFileApi)\n/* harmony export */ });\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/errors */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/errors.js\");\n/* harmony import */ var _lib_fetch__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../lib/fetch */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/fetch.js\");\n/* harmony import */ var _lib_helpers__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/helpers */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/helpers.js\");\n/* harmony import */ var _BlobDownloadBuilder__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./BlobDownloadBuilder */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/BlobDownloadBuilder.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\nconst DEFAULT_SEARCH_OPTIONS = {\r\n    limit: 100,\r\n    offset: 0,\r\n    sortBy: {\r\n        column: 'name',\r\n        order: 'asc',\r\n    },\r\n};\r\nconst DEFAULT_FILE_OPTIONS = {\r\n    cacheControl: '3600',\r\n    contentType: 'text/plain;charset=UTF-8',\r\n    upsert: false,\r\n};\r\nclass StorageFileApi {\r\n    constructor(url, headers = {}, bucketId, fetch) {\r\n        this.shouldThrowOnError = false;\r\n        this.url = url;\r\n        this.headers = headers;\r\n        this.bucketId = bucketId;\r\n        this.fetch = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_0__.resolveFetch)(fetch);\r\n    }\r\n    /**\r\n     * Enable throwing errors instead of returning them.\r\n     */\r\n    throwOnError() {\r\n        this.shouldThrowOnError = true;\r\n        return this;\r\n    }\r\n    /**\r\n     * Uploads a file to an existing bucket or replaces an existing file at the specified path with a new one.\r\n     *\r\n     * @param method HTTP method.\r\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    uploadOrUpdate(method, path, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let body;\r\n                const options = Object.assign(Object.assign({}, DEFAULT_FILE_OPTIONS), fileOptions);\r\n                let headers = Object.assign(Object.assign({}, this.headers), (method === 'POST' && { 'x-upsert': String(options.upsert) }));\r\n                const metadata = options.metadata;\r\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n                    body = new FormData();\r\n                    body.append('cacheControl', options.cacheControl);\r\n                    if (metadata) {\r\n                        body.append('metadata', this.encodeMetadata(metadata));\r\n                    }\r\n                    body.append('', fileBody);\r\n                }\r\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n                    body = fileBody;\r\n                    body.append('cacheControl', options.cacheControl);\r\n                    if (metadata) {\r\n                        body.append('metadata', this.encodeMetadata(metadata));\r\n                    }\r\n                }\r\n                else {\r\n                    body = fileBody;\r\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\r\n                    headers['content-type'] = options.contentType;\r\n                    if (metadata) {\r\n                        headers['x-metadata'] = this.toBase64(this.encodeMetadata(metadata));\r\n                    }\r\n                }\r\n                if (fileOptions === null || fileOptions === void 0 ? void 0 : fileOptions.headers) {\r\n                    headers = Object.assign(Object.assign({}, headers), fileOptions.headers);\r\n                }\r\n                const cleanPath = this._removeEmptyFolders(path);\r\n                const _path = this._getFinalPath(cleanPath);\r\n                const data = yield (method == 'PUT' ? _lib_fetch__WEBPACK_IMPORTED_MODULE_1__.put : _lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/${_path}`, body, Object.assign({ headers }, ((options === null || options === void 0 ? void 0 : options.duplex) ? { duplex: options.duplex } : {})));\r\n                return {\r\n                    data: { path: cleanPath, id: data.Id, fullPath: data.Key },\r\n                    error: null,\r\n                };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Uploads a file to an existing bucket.\r\n     *\r\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    upload(path, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.uploadOrUpdate('POST', path, fileBody, fileOptions);\r\n        });\r\n    }\r\n    /**\r\n     * Upload a file with a token generated from `createSignedUploadUrl`.\r\n     * @param path The file path, including the file name. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to upload.\r\n     * @param token The token generated from `createSignedUploadUrl`\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    uploadToSignedUrl(path, token, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const cleanPath = this._removeEmptyFolders(path);\r\n            const _path = this._getFinalPath(cleanPath);\r\n            const url = new URL(this.url + `/object/upload/sign/${_path}`);\r\n            url.searchParams.set('token', token);\r\n            try {\r\n                let body;\r\n                const options = Object.assign({ upsert: DEFAULT_FILE_OPTIONS.upsert }, fileOptions);\r\n                const headers = Object.assign(Object.assign({}, this.headers), { 'x-upsert': String(options.upsert) });\r\n                if (typeof Blob !== 'undefined' && fileBody instanceof Blob) {\r\n                    body = new FormData();\r\n                    body.append('cacheControl', options.cacheControl);\r\n                    body.append('', fileBody);\r\n                }\r\n                else if (typeof FormData !== 'undefined' && fileBody instanceof FormData) {\r\n                    body = fileBody;\r\n                    body.append('cacheControl', options.cacheControl);\r\n                }\r\n                else {\r\n                    body = fileBody;\r\n                    headers['cache-control'] = `max-age=${options.cacheControl}`;\r\n                    headers['content-type'] = options.contentType;\r\n                }\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.put)(this.fetch, url.toString(), body, { headers });\r\n                return {\r\n                    data: { path: cleanPath, fullPath: data.Key },\r\n                    error: null,\r\n                };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates a signed upload URL.\r\n     * Signed upload URLs can be used to upload files to the bucket without further authentication.\r\n     * They are valid for 2 hours.\r\n     * @param path The file path, including the current file name. For example `folder/image.png`.\r\n     * @param options.upsert If set to true, allows the file to be overwritten if it already exists.\r\n     */\r\n    createSignedUploadUrl(path, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let _path = this._getFinalPath(path);\r\n                const headers = Object.assign({}, this.headers);\r\n                if (options === null || options === void 0 ? void 0 : options.upsert) {\r\n                    headers['x-upsert'] = 'true';\r\n                }\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/upload/sign/${_path}`, {}, { headers });\r\n                const url = new URL(this.url + data.url);\r\n                const token = url.searchParams.get('token');\r\n                if (!token) {\r\n                    throw new _lib_errors__WEBPACK_IMPORTED_MODULE_2__.StorageError('No token returned by API');\r\n                }\r\n                return { data: { signedUrl: url.toString(), path, token }, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Replaces an existing file at the specified path with a new one.\r\n     *\r\n     * @param path The relative file path. Should be of the format `folder/subfolder/filename.png`. The bucket must already exist before attempting to update.\r\n     * @param fileBody The body of the file to be stored in the bucket.\r\n     */\r\n    update(path, fileBody, fileOptions) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            return this.uploadOrUpdate('PUT', path, fileBody, fileOptions);\r\n        });\r\n    }\r\n    /**\r\n     * Moves an existing file to a new path in the same bucket.\r\n     *\r\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n     * @param toPath The new file path, including the new file name. For example `folder/image-new.png`.\r\n     * @param options The destination options.\r\n     */\r\n    move(fromPath, toPath, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/move`, {\r\n                    bucketId: this.bucketId,\r\n                    sourceKey: fromPath,\r\n                    destinationKey: toPath,\r\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\r\n                }, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Copies an existing file to a new path in the same bucket.\r\n     *\r\n     * @param fromPath The original file path, including the current file name. For example `folder/image.png`.\r\n     * @param toPath The new file path, including the new file name. For example `folder/image-copy.png`.\r\n     * @param options The destination options.\r\n     */\r\n    copy(fromPath, toPath, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/copy`, {\r\n                    bucketId: this.bucketId,\r\n                    sourceKey: fromPath,\r\n                    destinationKey: toPath,\r\n                    destinationBucket: options === null || options === void 0 ? void 0 : options.destinationBucket,\r\n                }, { headers: this.headers });\r\n                return { data: { path: data.Key }, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates a signed URL. Use a signed URL to share a file for a fixed amount of time.\r\n     *\r\n     * @param path The file path, including the current file name. For example `folder/image.png`.\r\n     * @param expiresIn The number of seconds until the signed URL expires. For example, `60` for a URL which is valid for one minute.\r\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\r\n    createSignedUrl(path, expiresIn, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let _path = this._getFinalPath(path);\r\n                let data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/sign/${_path}`, Object.assign({ expiresIn }, ((options === null || options === void 0 ? void 0 : options.transform) ? { transform: options.transform } : {})), { headers: this.headers });\r\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\r\n                    ? `&download=${options.download === true ? '' : options.download}`\r\n                    : '';\r\n                const signedUrl = encodeURI(`${this.url}${data.signedURL}${downloadQueryParam}`);\r\n                data = { signedUrl };\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Creates multiple signed URLs. Use a signed URL to share a file for a fixed amount of time.\r\n     *\r\n     * @param paths The file paths to be downloaded, including the current file names. For example `['folder/image.png', 'folder2/image2.png']`.\r\n     * @param expiresIn The number of seconds until the signed URLs expire. For example, `60` for URLs which are valid for one minute.\r\n     * @param options.download triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     */\r\n    createSignedUrls(paths, expiresIn, options) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/sign/${this.bucketId}`, { expiresIn, paths }, { headers: this.headers });\r\n                const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\r\n                    ? `&download=${options.download === true ? '' : options.download}`\r\n                    : '';\r\n                return {\r\n                    data: data.map((datum) => (Object.assign(Object.assign({}, datum), { signedUrl: datum.signedURL\r\n                            ? encodeURI(`${this.url}${datum.signedURL}${downloadQueryParam}`)\r\n                            : null }))),\r\n                    error: null,\r\n                };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Downloads a file from a private bucket. For public buckets, make a request to the URL returned from `getPublicUrl` instead.\r\n     *\r\n     * @param path The full path and file name of the file to be downloaded. For example `folder/image.png`.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\r\n    download(path, options) {\r\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\r\n        const renderPath = wantsTransformation ? 'render/image/authenticated' : 'object';\r\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\r\n        const queryString = transformationQuery ? `?${transformationQuery}` : '';\r\n        const _path = this._getFinalPath(path);\r\n        const downloadFn = () => (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.get)(this.fetch, `${this.url}/${renderPath}/${_path}${queryString}`, {\r\n            headers: this.headers,\r\n            noResolveJson: true,\r\n        });\r\n        return new _BlobDownloadBuilder__WEBPACK_IMPORTED_MODULE_3__[\"default\"](downloadFn, this.shouldThrowOnError);\r\n    }\r\n    /**\r\n     * Retrieves the details of an existing file.\r\n     * @param path\r\n     */\r\n    info(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const _path = this._getFinalPath(path);\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.get)(this.fetch, `${this.url}/object/info/${_path}`, {\r\n                    headers: this.headers,\r\n                });\r\n                return { data: (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_0__.recursiveToCamel)(data), error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Checks the existence of a file.\r\n     * @param path\r\n     */\r\n    exists(path) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            const _path = this._getFinalPath(path);\r\n            try {\r\n                yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.head)(this.fetch, `${this.url}/object/${_path}`, {\r\n                    headers: this.headers,\r\n                });\r\n                return { data: true, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error) && error instanceof _lib_errors__WEBPACK_IMPORTED_MODULE_2__.StorageUnknownError) {\r\n                    const originalError = error.originalError;\r\n                    if ([400, 404].includes(originalError === null || originalError === void 0 ? void 0 : originalError.status)) {\r\n                        return { data: false, error };\r\n                    }\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * A simple convenience function to get the URL for an asset in a public bucket. If you do not want to use this function, you can construct the public URL by concatenating the bucket URL with the path to the asset.\r\n     * This function does not verify if the bucket is public. If a public URL is created for a bucket which is not public, you will not be able to download the asset.\r\n     *\r\n     * @param path The path and name of the file to generate the public URL for. For example `folder/image.png`.\r\n     * @param options.download Triggers the file as a download if set to true. Set this parameter as the name of the file if you want to trigger the download with a different filename.\r\n     * @param options.transform Transform the asset before serving it to the client.\r\n     */\r\n    getPublicUrl(path, options) {\r\n        const _path = this._getFinalPath(path);\r\n        const _queryString = [];\r\n        const downloadQueryParam = (options === null || options === void 0 ? void 0 : options.download)\r\n            ? `download=${options.download === true ? '' : options.download}`\r\n            : '';\r\n        if (downloadQueryParam !== '') {\r\n            _queryString.push(downloadQueryParam);\r\n        }\r\n        const wantsTransformation = typeof (options === null || options === void 0 ? void 0 : options.transform) !== 'undefined';\r\n        const renderPath = wantsTransformation ? 'render/image' : 'object';\r\n        const transformationQuery = this.transformOptsToQueryString((options === null || options === void 0 ? void 0 : options.transform) || {});\r\n        if (transformationQuery !== '') {\r\n            _queryString.push(transformationQuery);\r\n        }\r\n        let queryString = _queryString.join('&');\r\n        if (queryString !== '') {\r\n            queryString = `?${queryString}`;\r\n        }\r\n        return {\r\n            data: { publicUrl: encodeURI(`${this.url}/${renderPath}/public/${_path}${queryString}`) },\r\n        };\r\n    }\r\n    /**\r\n     * Deletes files within the same bucket\r\n     *\r\n     * @param paths An array of files to delete, including the path and file name. For example [`'folder/image.png'`].\r\n     */\r\n    remove(paths) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.remove)(this.fetch, `${this.url}/object/${this.bucketId}`, { prefixes: paths }, { headers: this.headers });\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Get file metadata\r\n     * @param id the file id to retrieve metadata\r\n     */\r\n    // async getMetadata(\r\n    //   id: string\r\n    // ): Promise<\r\n    //   | {\r\n    //       data: Metadata\r\n    //       error: null\r\n    //     }\r\n    //   | {\r\n    //       data: null\r\n    //       error: StorageError\r\n    //     }\r\n    // > {\r\n    //   try {\r\n    //     const data = await get(this.fetch, `${this.url}/metadata/${id}`, { headers: this.headers })\r\n    //     return { data, error: null }\r\n    //   } catch (error) {\r\n    //     if (isStorageError(error)) {\r\n    //       return { data: null, error }\r\n    //     }\r\n    //     throw error\r\n    //   }\r\n    // }\r\n    /**\r\n     * Update file metadata\r\n     * @param id the file id to update metadata\r\n     * @param meta the new file metadata\r\n     */\r\n    // async updateMetadata(\r\n    //   id: string,\r\n    //   meta: Metadata\r\n    // ): Promise<\r\n    //   | {\r\n    //       data: Metadata\r\n    //       error: null\r\n    //     }\r\n    //   | {\r\n    //       data: null\r\n    //       error: StorageError\r\n    //     }\r\n    // > {\r\n    //   try {\r\n    //     const data = await post(\r\n    //       this.fetch,\r\n    //       `${this.url}/metadata/${id}`,\r\n    //       { ...meta },\r\n    //       { headers: this.headers }\r\n    //     )\r\n    //     return { data, error: null }\r\n    //   } catch (error) {\r\n    //     if (isStorageError(error)) {\r\n    //       return { data: null, error }\r\n    //     }\r\n    //     throw error\r\n    //   }\r\n    // }\r\n    /**\r\n     * Lists all the files and folders within a path of the bucket.\r\n     * @param path The folder path.\r\n     * @param options Search options including limit (defaults to 100), offset, sortBy, and search\r\n     */\r\n    list(path, options, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const body = Object.assign(Object.assign(Object.assign({}, DEFAULT_SEARCH_OPTIONS), options), { prefix: path || '' });\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/list/${this.bucketId}`, body, { headers: this.headers }, parameters);\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * @experimental this method signature might change in the future\r\n     * @param options search options\r\n     * @param parameters\r\n     */\r\n    listV2(options, parameters) {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const body = Object.assign({}, options);\r\n                const data = yield (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_1__.post)(this.fetch, `${this.url}/object/list-v2/${this.bucketId}`, body, { headers: this.headers }, parameters);\r\n                return { data, error: null };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_2__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n    encodeMetadata(metadata) {\r\n        return JSON.stringify(metadata);\r\n    }\r\n    toBase64(data) {\r\n        if (typeof Buffer !== 'undefined') {\r\n            return Buffer.from(data).toString('base64');\r\n        }\r\n        return btoa(data);\r\n    }\r\n    _getFinalPath(path) {\r\n        return `${this.bucketId}/${path.replace(/^\\/+/, '')}`;\r\n    }\r\n    _removeEmptyFolders(path) {\r\n        return path.replace(/^\\/|\\/$/g, '').replace(/\\/+/g, '/');\r\n    }\r\n    transformOptsToQueryString(transform) {\r\n        const params = [];\r\n        if (transform.width) {\r\n            params.push(`width=${transform.width}`);\r\n        }\r\n        if (transform.height) {\r\n            params.push(`height=${transform.height}`);\r\n        }\r\n        if (transform.resize) {\r\n            params.push(`resize=${transform.resize}`);\r\n        }\r\n        if (transform.format) {\r\n            params.push(`format=${transform.format}`);\r\n        }\r\n        if (transform.quality) {\r\n            params.push(`quality=${transform.quality}`);\r\n        }\r\n        return params.join('&');\r\n    }\r\n}\r\n//# sourceMappingURL=StorageFileApi.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StorageFileApi.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StreamDownloadBuilder.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@supabase/storage-js/dist/module/packages/StreamDownloadBuilder.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StreamDownloadBuilder)\n/* harmony export */ });\n/* harmony import */ var _lib_errors__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../lib/errors */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/lib/errors.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\nclass StreamDownloadBuilder {\r\n    constructor(downloadFn, shouldThrowOnError) {\r\n        this.downloadFn = downloadFn;\r\n        this.shouldThrowOnError = shouldThrowOnError;\r\n    }\r\n    then(onfulfilled, onrejected) {\r\n        return this.execute().then(onfulfilled, onrejected);\r\n    }\r\n    execute() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                const result = yield this.downloadFn();\r\n                return {\r\n                    data: result.body,\r\n                    error: null,\r\n                };\r\n            }\r\n            catch (error) {\r\n                if (this.shouldThrowOnError) {\r\n                    throw error;\r\n                }\r\n                if ((0,_lib_errors__WEBPACK_IMPORTED_MODULE_0__.isStorageError)(error)) {\r\n                    return { data: null, error };\r\n                }\r\n                throw error;\r\n            }\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=StreamDownloadBuilder.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N0b3JhZ2UtanMvZGlzdC9tb2R1bGUvcGFja2FnZXMvU3RyZWFtRG93bmxvYWRCdWlsZGVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsaUJBQWlCLFNBQUksSUFBSSxTQUFJO0FBQzdCLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQytDO0FBQ2hDO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiwyREFBYztBQUNsQyw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3RvcmFnZS1qcy9kaXN0L21vZHVsZS9wYWNrYWdlcy9TdHJlYW1Eb3dubG9hZEJ1aWxkZXIuanM/OTAzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcclxuICAgIGZ1bmN0aW9uIGFkb3B0KHZhbHVlKSB7IHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIFAgPyB2YWx1ZSA6IG5ldyBQKGZ1bmN0aW9uIChyZXNvbHZlKSB7IHJlc29sdmUodmFsdWUpOyB9KTsgfVxyXG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlamVjdGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yW1widGhyb3dcIl0odmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XHJcbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xyXG4gICAgfSk7XHJcbn07XHJcbmltcG9ydCB7IGlzU3RvcmFnZUVycm9yIH0gZnJvbSAnLi4vbGliL2Vycm9ycyc7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0cmVhbURvd25sb2FkQnVpbGRlciB7XHJcbiAgICBjb25zdHJ1Y3Rvcihkb3dubG9hZEZuLCBzaG91bGRUaHJvd09uRXJyb3IpIHtcclxuICAgICAgICB0aGlzLmRvd25sb2FkRm4gPSBkb3dubG9hZEZuO1xyXG4gICAgICAgIHRoaXMuc2hvdWxkVGhyb3dPbkVycm9yID0gc2hvdWxkVGhyb3dPbkVycm9yO1xyXG4gICAgfVxyXG4gICAgdGhlbihvbmZ1bGZpbGxlZCwgb25yZWplY3RlZCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmV4ZWN1dGUoKS50aGVuKG9uZnVsZmlsbGVkLCBvbnJlamVjdGVkKTtcclxuICAgIH1cclxuICAgIGV4ZWN1dGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24qICgpIHtcclxuICAgICAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IHlpZWxkIHRoaXMuZG93bmxvYWRGbigpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXN1bHQuYm9keSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY2F0Y2ggKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zaG91bGRUaHJvd09uRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBlcnJvcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChpc1N0b3JhZ2VFcnJvcihlcnJvcikpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyBkYXRhOiBudWxsLCBlcnJvciB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdHJlYW1Eb3dubG9hZEJ1aWxkZXIuanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/storage-js/dist/module/packages/StreamDownloadBuilder.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ SupabaseClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_functions_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @supabase/functions-js */ \"(ssr)/./node_modules/@supabase/functions-js/dist/module/FunctionsClient.js\");\n/* harmony import */ var _supabase_postgrest_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/postgrest-js */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs\");\n/* harmony import */ var _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/realtime-js */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/index.js\");\n/* harmony import */ var _supabase_storage_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @supabase/storage-js */ \"(ssr)/./node_modules/@supabase/storage-js/dist/module/StorageClient.js\");\n/* harmony import */ var _lib_constants__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./lib/constants */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/constants.js\");\n/* harmony import */ var _lib_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lib/fetch */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/fetch.js\");\n/* harmony import */ var _lib_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/helpers */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/helpers.js\");\n/* harmony import */ var _lib_SupabaseAuthClient__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./lib/SupabaseAuthClient */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js\");\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Supabase Client.\r\n *\r\n * An isomorphic Javascript client for interacting with Postgres.\r\n */\r\nclass SupabaseClient {\r\n    /**\r\n     * Create a new client for use in the browser.\r\n     * @param supabaseUrl The unique Supabase URL which is supplied when you create a new project in your project dashboard.\r\n     * @param supabaseKey The unique Supabase Key which is supplied when you create a new project in your project dashboard.\r\n     * @param options.db.schema You can switch in between schemas. The schema needs to be on the list of exposed schemas inside Supabase.\r\n     * @param options.auth.autoRefreshToken Set to \"true\" if you want to automatically refresh the token before expiring.\r\n     * @param options.auth.persistSession Set to \"true\" if you want to automatically save the user session into local storage.\r\n     * @param options.auth.detectSessionInUrl Set to \"true\" if you want to automatically detects OAuth grants in the URL and signs in the user.\r\n     * @param options.realtime Options passed along to realtime-js constructor.\r\n     * @param options.storage Options passed along to the storage-js constructor.\r\n     * @param options.global.fetch A custom fetch implementation.\r\n     * @param options.global.headers Any additional headers to send with each network request.\r\n     */\r\n    constructor(supabaseUrl, supabaseKey, options) {\r\n        var _a, _b, _c;\r\n        this.supabaseUrl = supabaseUrl;\r\n        this.supabaseKey = supabaseKey;\r\n        const baseUrl = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_2__.validateSupabaseUrl)(supabaseUrl);\r\n        if (!supabaseKey)\r\n            throw new Error('supabaseKey is required.');\r\n        this.realtimeUrl = new URL('realtime/v1', baseUrl);\r\n        this.realtimeUrl.protocol = this.realtimeUrl.protocol.replace('http', 'ws');\r\n        this.authUrl = new URL('auth/v1', baseUrl);\r\n        this.storageUrl = new URL('storage/v1', baseUrl);\r\n        this.functionsUrl = new URL('functions/v1', baseUrl);\r\n        // default storage key uses the supabase project ref as a namespace\r\n        const defaultStorageKey = `sb-${baseUrl.hostname.split('.')[0]}-auth-token`;\r\n        const DEFAULTS = {\r\n            db: _lib_constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_DB_OPTIONS,\r\n            realtime: _lib_constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_REALTIME_OPTIONS,\r\n            auth: Object.assign(Object.assign({}, _lib_constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_AUTH_OPTIONS), { storageKey: defaultStorageKey }),\r\n            global: _lib_constants__WEBPACK_IMPORTED_MODULE_3__.DEFAULT_GLOBAL_OPTIONS,\r\n        };\r\n        const settings = (0,_lib_helpers__WEBPACK_IMPORTED_MODULE_2__.applySettingDefaults)(options !== null && options !== void 0 ? options : {}, DEFAULTS);\r\n        this.storageKey = (_a = settings.auth.storageKey) !== null && _a !== void 0 ? _a : '';\r\n        this.headers = (_b = settings.global.headers) !== null && _b !== void 0 ? _b : {};\r\n        if (!settings.accessToken) {\r\n            this.auth = this._initSupabaseAuthClient((_c = settings.auth) !== null && _c !== void 0 ? _c : {}, this.headers, settings.global.fetch);\r\n        }\r\n        else {\r\n            this.accessToken = settings.accessToken;\r\n            this.auth = new Proxy({}, {\r\n                get: (_, prop) => {\r\n                    throw new Error(`@supabase/supabase-js: Supabase Client is configured with the accessToken option, accessing supabase.auth.${String(prop)} is not possible`);\r\n                },\r\n            });\r\n        }\r\n        this.fetch = (0,_lib_fetch__WEBPACK_IMPORTED_MODULE_4__.fetchWithAuth)(supabaseKey, this._getAccessToken.bind(this), settings.global.fetch);\r\n        this.realtime = this._initRealtimeClient(Object.assign({ headers: this.headers, accessToken: this._getAccessToken.bind(this) }, settings.realtime));\r\n        this.rest = new _supabase_postgrest_js__WEBPACK_IMPORTED_MODULE_0__.PostgrestClient(new URL('rest/v1', baseUrl).href, {\r\n            headers: this.headers,\r\n            schema: settings.db.schema,\r\n            fetch: this.fetch,\r\n        });\r\n        this.storage = new _supabase_storage_js__WEBPACK_IMPORTED_MODULE_5__.StorageClient(this.storageUrl.href, this.headers, this.fetch, options === null || options === void 0 ? void 0 : options.storage);\r\n        if (!settings.accessToken) {\r\n            this._listenForAuthEvents();\r\n        }\r\n    }\r\n    /**\r\n     * Supabase Functions allows you to deploy and invoke edge functions.\r\n     */\r\n    get functions() {\r\n        return new _supabase_functions_js__WEBPACK_IMPORTED_MODULE_6__.FunctionsClient(this.functionsUrl.href, {\r\n            headers: this.headers,\r\n            customFetch: this.fetch,\r\n        });\r\n    }\r\n    /**\r\n     * Perform a query on a table or a view.\r\n     *\r\n     * @param relation - The table or view name to query\r\n     */\r\n    from(relation) {\r\n        return this.rest.from(relation);\r\n    }\r\n    // NOTE: signatures must be kept in sync with PostgrestClient.schema\r\n    /**\r\n     * Select a schema to query or perform an function (rpc) call.\r\n     *\r\n     * The schema needs to be on the list of exposed schemas inside Supabase.\r\n     *\r\n     * @param schema - The schema to query\r\n     */\r\n    schema(schema) {\r\n        return this.rest.schema(schema);\r\n    }\r\n    // NOTE: signatures must be kept in sync with PostgrestClient.rpc\r\n    /**\r\n     * Perform a function call.\r\n     *\r\n     * @param fn - The function name to call\r\n     * @param args - The arguments to pass to the function call\r\n     * @param options - Named parameters\r\n     * @param options.head - When set to `true`, `data` will not be returned.\r\n     * Useful if you only need the count.\r\n     * @param options.get - When set to `true`, the function will be called with\r\n     * read-only access mode.\r\n     * @param options.count - Count algorithm to use to count rows returned by the\r\n     * function. Only applicable for [set-returning\r\n     * functions](https://www.postgresql.org/docs/current/functions-srf.html).\r\n     *\r\n     * `\"exact\"`: Exact but slow count algorithm. Performs a `COUNT(*)` under the\r\n     * hood.\r\n     *\r\n     * `\"planned\"`: Approximated but fast count algorithm. Uses the Postgres\r\n     * statistics under the hood.\r\n     *\r\n     * `\"estimated\"`: Uses exact count for low numbers and planned count for high\r\n     * numbers.\r\n     */\r\n    rpc(fn, args = {}, options = {\r\n        head: false,\r\n        get: false,\r\n        count: undefined,\r\n    }) {\r\n        return this.rest.rpc(fn, args, options);\r\n    }\r\n    /**\r\n     * Creates a Realtime channel with Broadcast, Presence, and Postgres Changes.\r\n     *\r\n     * @param {string} name - The name of the Realtime channel.\r\n     * @param {Object} opts - The options to pass to the Realtime channel.\r\n     *\r\n     */\r\n    channel(name, opts = { config: {} }) {\r\n        return this.realtime.channel(name, opts);\r\n    }\r\n    /**\r\n     * Returns all Realtime channels.\r\n     */\r\n    getChannels() {\r\n        return this.realtime.getChannels();\r\n    }\r\n    /**\r\n     * Unsubscribes and removes Realtime channel from Realtime client.\r\n     *\r\n     * @param {RealtimeChannel} channel - The name of the Realtime channel.\r\n     *\r\n     */\r\n    removeChannel(channel) {\r\n        return this.realtime.removeChannel(channel);\r\n    }\r\n    /**\r\n     * Unsubscribes and removes all Realtime channels from Realtime client.\r\n     */\r\n    removeAllChannels() {\r\n        return this.realtime.removeAllChannels();\r\n    }\r\n    _getAccessToken() {\r\n        return __awaiter(this, void 0, void 0, function* () {\r\n            var _a, _b;\r\n            if (this.accessToken) {\r\n                return yield this.accessToken();\r\n            }\r\n            const { data } = yield this.auth.getSession();\r\n            return (_b = (_a = data.session) === null || _a === void 0 ? void 0 : _a.access_token) !== null && _b !== void 0 ? _b : this.supabaseKey;\r\n        });\r\n    }\r\n    _initSupabaseAuthClient({ autoRefreshToken, persistSession, detectSessionInUrl, storage, userStorage, storageKey, flowType, lock, debug, }, headers, fetch) {\r\n        const authHeaders = {\r\n            Authorization: `Bearer ${this.supabaseKey}`,\r\n            apikey: `${this.supabaseKey}`,\r\n        };\r\n        return new _lib_SupabaseAuthClient__WEBPACK_IMPORTED_MODULE_7__.SupabaseAuthClient({\r\n            url: this.authUrl.href,\r\n            headers: Object.assign(Object.assign({}, authHeaders), headers),\r\n            storageKey: storageKey,\r\n            autoRefreshToken,\r\n            persistSession,\r\n            detectSessionInUrl,\r\n            storage,\r\n            userStorage,\r\n            flowType,\r\n            lock,\r\n            debug,\r\n            fetch,\r\n            // auth checks if there is a custom authorizaiton header using this flag\r\n            // so it knows whether to return an error when getUser is called with no session\r\n            hasCustomAuthorizationHeader: Object.keys(this.headers).some((key) => key.toLowerCase() === 'authorization'),\r\n        });\r\n    }\r\n    _initRealtimeClient(options) {\r\n        return new _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_1__.RealtimeClient(this.realtimeUrl.href, Object.assign(Object.assign({}, options), { params: Object.assign({ apikey: this.supabaseKey }, options === null || options === void 0 ? void 0 : options.params) }));\r\n    }\r\n    _listenForAuthEvents() {\r\n        const data = this.auth.onAuthStateChange((event, session) => {\r\n            this._handleTokenChanged(event, 'CLIENT', session === null || session === void 0 ? void 0 : session.access_token);\r\n        });\r\n        return data;\r\n    }\r\n    _handleTokenChanged(event, source, token) {\r\n        if ((event === 'TOKEN_REFRESHED' || event === 'SIGNED_IN') &&\r\n            this.changedAccessToken !== token) {\r\n            this.changedAccessToken = token;\r\n            this.realtime.setAuth(token);\r\n        }\r\n        else if (event === 'SIGNED_OUT') {\r\n            this.realtime.setAuth();\r\n            if (source == 'STORAGE')\r\n                this.auth.signOut();\r\n            this.changedAccessToken = undefined;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=SupabaseClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/supabase-js/dist/module/index.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@supabase/supabase-js/dist/module/index.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthAdminApi: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthAdminApi),\n/* harmony export */   AuthApiError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthApiError),\n/* harmony export */   AuthClient: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthClient),\n/* harmony export */   AuthError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthError),\n/* harmony export */   AuthImplicitGrantRedirectError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthImplicitGrantRedirectError),\n/* harmony export */   AuthInvalidCredentialsError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthInvalidCredentialsError),\n/* harmony export */   AuthInvalidJwtError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthInvalidJwtError),\n/* harmony export */   AuthInvalidTokenResponseError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthInvalidTokenResponseError),\n/* harmony export */   AuthPKCEGrantCodeExchangeError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthPKCEGrantCodeExchangeError),\n/* harmony export */   AuthRetryableFetchError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthRetryableFetchError),\n/* harmony export */   AuthSessionMissingError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthSessionMissingError),\n/* harmony export */   AuthUnknownError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthUnknownError),\n/* harmony export */   AuthWeakPasswordError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthWeakPasswordError),\n/* harmony export */   CustomAuthError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.CustomAuthError),\n/* harmony export */   FunctionRegion: () => (/* reexport safe */ _supabase_functions_js__WEBPACK_IMPORTED_MODULE_2__.FunctionRegion),\n/* harmony export */   FunctionsError: () => (/* reexport safe */ _supabase_functions_js__WEBPACK_IMPORTED_MODULE_2__.FunctionsError),\n/* harmony export */   FunctionsFetchError: () => (/* reexport safe */ _supabase_functions_js__WEBPACK_IMPORTED_MODULE_2__.FunctionsFetchError),\n/* harmony export */   FunctionsHttpError: () => (/* reexport safe */ _supabase_functions_js__WEBPACK_IMPORTED_MODULE_2__.FunctionsHttpError),\n/* harmony export */   FunctionsRelayError: () => (/* reexport safe */ _supabase_functions_js__WEBPACK_IMPORTED_MODULE_2__.FunctionsRelayError),\n/* harmony export */   GoTrueAdminApi: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.GoTrueAdminApi),\n/* harmony export */   GoTrueClient: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.GoTrueClient),\n/* harmony export */   NavigatorLockAcquireTimeoutError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.NavigatorLockAcquireTimeoutError),\n/* harmony export */   PostgrestError: () => (/* reexport safe */ _supabase_postgrest_js__WEBPACK_IMPORTED_MODULE_1__.PostgrestError),\n/* harmony export */   REALTIME_CHANNEL_STATES: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.REALTIME_CHANNEL_STATES),\n/* harmony export */   REALTIME_LISTEN_TYPES: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.REALTIME_LISTEN_TYPES),\n/* harmony export */   REALTIME_POSTGRES_CHANGES_LISTEN_EVENT: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.REALTIME_POSTGRES_CHANGES_LISTEN_EVENT),\n/* harmony export */   REALTIME_PRESENCE_LISTEN_EVENTS: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.REALTIME_PRESENCE_LISTEN_EVENTS),\n/* harmony export */   REALTIME_SUBSCRIBE_STATES: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.REALTIME_SUBSCRIBE_STATES),\n/* harmony export */   RealtimeChannel: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.RealtimeChannel),\n/* harmony export */   RealtimeClient: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.RealtimeClient),\n/* harmony export */   RealtimePresence: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.RealtimePresence),\n/* harmony export */   SIGN_OUT_SCOPES: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.SIGN_OUT_SCOPES),\n/* harmony export */   SupabaseClient: () => (/* reexport safe */ _SupabaseClient__WEBPACK_IMPORTED_MODULE_4__[\"default\"]),\n/* harmony export */   WebSocketFactory: () => (/* reexport safe */ _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__.WebSocketFactory),\n/* harmony export */   createClient: () => (/* binding */ createClient),\n/* harmony export */   isAuthApiError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.isAuthApiError),\n/* harmony export */   isAuthError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.isAuthError),\n/* harmony export */   isAuthImplicitGrantRedirectError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.isAuthImplicitGrantRedirectError),\n/* harmony export */   isAuthRetryableFetchError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.isAuthRetryableFetchError),\n/* harmony export */   isAuthSessionMissingError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.isAuthSessionMissingError),\n/* harmony export */   isAuthWeakPasswordError: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.isAuthWeakPasswordError),\n/* harmony export */   lockInternals: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.lockInternals),\n/* harmony export */   navigatorLock: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.navigatorLock),\n/* harmony export */   processLock: () => (/* reexport safe */ _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.processLock)\n/* harmony export */ });\n/* harmony import */ var _SupabaseClient__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./SupabaseClient */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/SupabaseClient.js\");\n/* harmony import */ var _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/auth-js */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/index.js\");\n/* harmony import */ var _supabase_postgrest_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @supabase/postgrest-js */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs\");\n/* harmony import */ var _supabase_functions_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @supabase/functions-js */ \"(ssr)/./node_modules/@supabase/functions-js/dist/module/types.js\");\n/* harmony import */ var _supabase_realtime_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @supabase/realtime-js */ \"(ssr)/./node_modules/@supabase/realtime-js/dist/module/index.js\");\n\r\n\r\n\r\n\r\n\r\n\r\n/**\r\n * Creates a new Supabase Client.\r\n */\r\nconst createClient = (supabaseUrl, supabaseKey, options) => {\r\n    return new _SupabaseClient__WEBPACK_IMPORTED_MODULE_4__[\"default\"](supabaseUrl, supabaseKey, options);\r\n};\r\n// Check for Node.js <= 18 deprecation\r\nfunction shouldShowDeprecationWarning() {\r\n    // Skip in browser environments\r\n    if (typeof window !== 'undefined') {\r\n        return false;\r\n    }\r\n    // Skip if process is not available (e.g., Edge Runtime)\r\n    if (typeof process === 'undefined') {\r\n        return false;\r\n    }\r\n    // Use dynamic property access to avoid Next.js Edge Runtime static analysis warnings\r\n    const processVersion = process['version'];\r\n    if (processVersion === undefined || processVersion === null) {\r\n        return false;\r\n    }\r\n    const versionMatch = processVersion.match(/^v(\\d+)\\./);\r\n    if (!versionMatch) {\r\n        return false;\r\n    }\r\n    const majorVersion = parseInt(versionMatch[1], 10);\r\n    return majorVersion <= 18;\r\n}\r\nif (shouldShowDeprecationWarning()) {\r\n    console.warn(`⚠️  Node.js 18 and below are deprecated and will no longer be supported in future versions of @supabase/supabase-js. ` +\r\n        `Please upgrade to Node.js 20 or later. ` +\r\n        `For more information, visit: https://github.com/orgs/supabase/discussions/37217`);\r\n}\r\n//# sourceMappingURL=index.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBOEM7QUFDWjtBQUN1QjtBQUM4RTtBQUNqRztBQUN1QjtBQUM3RDtBQUNBO0FBQ0E7QUFDTztBQUNQLGVBQWUsdURBQWM7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvaW5kZXguanM/MDAwZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgU3VwYWJhc2VDbGllbnQgZnJvbSAnLi9TdXBhYmFzZUNsaWVudCc7XHJcbmV4cG9ydCAqIGZyb20gJ0BzdXBhYmFzZS9hdXRoLWpzJztcclxuZXhwb3J0IHsgUG9zdGdyZXN0RXJyb3IsIH0gZnJvbSAnQHN1cGFiYXNlL3Bvc3RncmVzdC1qcyc7XHJcbmV4cG9ydCB7IEZ1bmN0aW9uc0h0dHBFcnJvciwgRnVuY3Rpb25zRmV0Y2hFcnJvciwgRnVuY3Rpb25zUmVsYXlFcnJvciwgRnVuY3Rpb25zRXJyb3IsIEZ1bmN0aW9uUmVnaW9uLCB9IGZyb20gJ0BzdXBhYmFzZS9mdW5jdGlvbnMtanMnO1xyXG5leHBvcnQgKiBmcm9tICdAc3VwYWJhc2UvcmVhbHRpbWUtanMnO1xyXG5leHBvcnQgeyBkZWZhdWx0IGFzIFN1cGFiYXNlQ2xpZW50IH0gZnJvbSAnLi9TdXBhYmFzZUNsaWVudCc7XHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgbmV3IFN1cGFiYXNlIENsaWVudC5cclxuICovXHJcbmV4cG9ydCBjb25zdCBjcmVhdGVDbGllbnQgPSAoc3VwYWJhc2VVcmwsIHN1cGFiYXNlS2V5LCBvcHRpb25zKSA9PiB7XHJcbiAgICByZXR1cm4gbmV3IFN1cGFiYXNlQ2xpZW50KHN1cGFiYXNlVXJsLCBzdXBhYmFzZUtleSwgb3B0aW9ucyk7XHJcbn07XHJcbi8vIENoZWNrIGZvciBOb2RlLmpzIDw9IDE4IGRlcHJlY2F0aW9uXHJcbmZ1bmN0aW9uIHNob3VsZFNob3dEZXByZWNhdGlvbldhcm5pbmcoKSB7XHJcbiAgICAvLyBTa2lwIGluIGJyb3dzZXIgZW52aXJvbm1lbnRzXHJcbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICAvLyBTa2lwIGlmIHByb2Nlc3MgaXMgbm90IGF2YWlsYWJsZSAoZS5nLiwgRWRnZSBSdW50aW1lKVxyXG4gICAgaWYgKHR5cGVvZiBwcm9jZXNzID09PSAndW5kZWZpbmVkJykge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8vIFVzZSBkeW5hbWljIHByb3BlcnR5IGFjY2VzcyB0byBhdm9pZCBOZXh0LmpzIEVkZ2UgUnVudGltZSBzdGF0aWMgYW5hbHlzaXMgd2FybmluZ3NcclxuICAgIGNvbnN0IHByb2Nlc3NWZXJzaW9uID0gcHJvY2Vzc1sndmVyc2lvbiddO1xyXG4gICAgaWYgKHByb2Nlc3NWZXJzaW9uID09PSB1bmRlZmluZWQgfHwgcHJvY2Vzc1ZlcnNpb24gPT09IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBjb25zdCB2ZXJzaW9uTWF0Y2ggPSBwcm9jZXNzVmVyc2lvbi5tYXRjaCgvXnYoXFxkKylcXC4vKTtcclxuICAgIGlmICghdmVyc2lvbk1hdGNoKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgY29uc3QgbWFqb3JWZXJzaW9uID0gcGFyc2VJbnQodmVyc2lvbk1hdGNoWzFdLCAxMCk7XHJcbiAgICByZXR1cm4gbWFqb3JWZXJzaW9uIDw9IDE4O1xyXG59XHJcbmlmIChzaG91bGRTaG93RGVwcmVjYXRpb25XYXJuaW5nKCkpIHtcclxuICAgIGNvbnNvbGUud2Fybihg4pqg77iPICBOb2RlLmpzIDE4IGFuZCBiZWxvdyBhcmUgZGVwcmVjYXRlZCBhbmQgd2lsbCBubyBsb25nZXIgYmUgc3VwcG9ydGVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBAc3VwYWJhc2Uvc3VwYWJhc2UtanMuIGAgK1xyXG4gICAgICAgIGBQbGVhc2UgdXBncmFkZSB0byBOb2RlLmpzIDIwIG9yIGxhdGVyLiBgICtcclxuICAgICAgICBgRm9yIG1vcmUgaW5mb3JtYXRpb24sIHZpc2l0OiBodHRwczovL2dpdGh1Yi5jb20vb3Jncy9zdXBhYmFzZS9kaXNjdXNzaW9ucy8zNzIxN2ApO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/supabase-js/dist/module/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SupabaseAuthClient: () => (/* binding */ SupabaseAuthClient)\n/* harmony export */ });\n/* harmony import */ var _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/auth-js */ \"(ssr)/./node_modules/@supabase/auth-js/dist/module/index.js\");\n\r\nclass SupabaseAuthClient extends _supabase_auth_js__WEBPACK_IMPORTED_MODULE_0__.AuthClient {\r\n    constructor(options) {\r\n        super(options);\r\n    }\r\n}\r\n//# sourceMappingURL=SupabaseAuthClient.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9TdXBhYmFzZUF1dGhDbGllbnQuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBK0M7QUFDeEMsaUNBQWlDLHlEQUFVO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9TdXBhYmFzZUF1dGhDbGllbnQuanM/YmRiYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBdXRoQ2xpZW50IH0gZnJvbSAnQHN1cGFiYXNlL2F1dGgtanMnO1xyXG5leHBvcnQgY2xhc3MgU3VwYWJhc2VBdXRoQ2xpZW50IGV4dGVuZHMgQXV0aENsaWVudCB7XHJcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XHJcbiAgICAgICAgc3VwZXIob3B0aW9ucyk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9U3VwYWJhc2VBdXRoQ2xpZW50LmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/SupabaseAuthClient.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/constants.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@supabase/supabase-js/dist/module/lib/constants.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_AUTH_OPTIONS: () => (/* binding */ DEFAULT_AUTH_OPTIONS),\n/* harmony export */   DEFAULT_DB_OPTIONS: () => (/* binding */ DEFAULT_DB_OPTIONS),\n/* harmony export */   DEFAULT_GLOBAL_OPTIONS: () => (/* binding */ DEFAULT_GLOBAL_OPTIONS),\n/* harmony export */   DEFAULT_HEADERS: () => (/* binding */ DEFAULT_HEADERS),\n/* harmony export */   DEFAULT_REALTIME_OPTIONS: () => (/* binding */ DEFAULT_REALTIME_OPTIONS)\n/* harmony export */ });\n/* harmony import */ var _version__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./version */ \"(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/version.js\");\n\r\nlet JS_ENV = '';\r\n// @ts-ignore\r\nif (typeof Deno !== 'undefined') {\r\n    JS_ENV = 'deno';\r\n}\r\nelse if (typeof document !== 'undefined') {\r\n    JS_ENV = 'web';\r\n}\r\nelse if (typeof navigator !== 'undefined' && navigator.product === 'ReactNative') {\r\n    JS_ENV = 'react-native';\r\n}\r\nelse {\r\n    JS_ENV = 'node';\r\n}\r\nconst DEFAULT_HEADERS = { 'X-Client-Info': `supabase-js-${JS_ENV}/${_version__WEBPACK_IMPORTED_MODULE_0__.version}` };\r\nconst DEFAULT_GLOBAL_OPTIONS = {\r\n    headers: DEFAULT_HEADERS,\r\n};\r\nconst DEFAULT_DB_OPTIONS = {\r\n    schema: 'public',\r\n};\r\nconst DEFAULT_AUTH_OPTIONS = {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true,\r\n    flowType: 'implicit',\r\n};\r\nconst DEFAULT_REALTIME_OPTIONS = {};\r\n//# sourceMappingURL=constants.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQW9DO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTywwQkFBMEIsZ0NBQWdDLE9BQU8sR0FBRyw2Q0FBTyxDQUFDO0FBQzVFO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mbG93dHJhY2tpbmctZnJvbnRlbmQvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9jb25zdGFudHMuanM/ZTZmMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB2ZXJzaW9uIH0gZnJvbSAnLi92ZXJzaW9uJztcclxubGV0IEpTX0VOViA9ICcnO1xyXG4vLyBAdHMtaWdub3JlXHJcbmlmICh0eXBlb2YgRGVubyAhPT0gJ3VuZGVmaW5lZCcpIHtcclxuICAgIEpTX0VOViA9ICdkZW5vJztcclxufVxyXG5lbHNlIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICBKU19FTlYgPSAnd2ViJztcclxufVxyXG5lbHNlIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiBuYXZpZ2F0b3IucHJvZHVjdCA9PT0gJ1JlYWN0TmF0aXZlJykge1xyXG4gICAgSlNfRU5WID0gJ3JlYWN0LW5hdGl2ZSc7XHJcbn1cclxuZWxzZSB7XHJcbiAgICBKU19FTlYgPSAnbm9kZSc7XHJcbn1cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfSEVBREVSUyA9IHsgJ1gtQ2xpZW50LUluZm8nOiBgc3VwYWJhc2UtanMtJHtKU19FTlZ9LyR7dmVyc2lvbn1gIH07XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX0dMT0JBTF9PUFRJT05TID0ge1xyXG4gICAgaGVhZGVyczogREVGQVVMVF9IRUFERVJTLFxyXG59O1xyXG5leHBvcnQgY29uc3QgREVGQVVMVF9EQl9PUFRJT05TID0ge1xyXG4gICAgc2NoZW1hOiAncHVibGljJyxcclxufTtcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfQVVUSF9PUFRJT05TID0ge1xyXG4gICAgYXV0b1JlZnJlc2hUb2tlbjogdHJ1ZSxcclxuICAgIHBlcnNpc3RTZXNzaW9uOiB0cnVlLFxyXG4gICAgZGV0ZWN0U2Vzc2lvbkluVXJsOiB0cnVlLFxyXG4gICAgZmxvd1R5cGU6ICdpbXBsaWNpdCcsXHJcbn07XHJcbmV4cG9ydCBjb25zdCBERUZBVUxUX1JFQUxUSU1FX09QVElPTlMgPSB7fTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/fetch.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@supabase/supabase-js/dist/module/lib/fetch.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchWithAuth: () => (/* binding */ fetchWithAuth),\n/* harmony export */   resolveFetch: () => (/* binding */ resolveFetch),\n/* harmony export */   resolveHeadersConstructor: () => (/* binding */ resolveHeadersConstructor)\n/* harmony export */ });\n/* harmony import */ var _supabase_node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @supabase/node-fetch */ \"(ssr)/./node_modules/@supabase/node-fetch/lib/index.js\");\n/* harmony import */ var _supabase_node_fetch__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_supabase_node_fetch__WEBPACK_IMPORTED_MODULE_0__);\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\n// @ts-ignore\r\n\r\nconst resolveFetch = (customFetch) => {\r\n    let _fetch;\r\n    if (customFetch) {\r\n        _fetch = customFetch;\r\n    }\r\n    else if (typeof fetch === 'undefined') {\r\n        _fetch = (_supabase_node_fetch__WEBPACK_IMPORTED_MODULE_0___default());\r\n    }\r\n    else {\r\n        _fetch = fetch;\r\n    }\r\n    return (...args) => _fetch(...args);\r\n};\r\nconst resolveHeadersConstructor = () => {\r\n    if (typeof Headers === 'undefined') {\r\n        return _supabase_node_fetch__WEBPACK_IMPORTED_MODULE_0__.Headers;\r\n    }\r\n    return Headers;\r\n};\r\nconst fetchWithAuth = (supabaseKey, getAccessToken, customFetch) => {\r\n    const fetch = resolveFetch(customFetch);\r\n    const HeadersConstructor = resolveHeadersConstructor();\r\n    return (input, init) => __awaiter(void 0, void 0, void 0, function* () {\r\n        var _a;\r\n        const accessToken = (_a = (yield getAccessToken())) !== null && _a !== void 0 ? _a : supabaseKey;\r\n        let headers = new HeadersConstructor(init === null || init === void 0 ? void 0 : init.headers);\r\n        if (!headers.has('apikey')) {\r\n            headers.set('apikey', supabaseKey);\r\n        }\r\n        if (!headers.has('Authorization')) {\r\n            headers.set('Authorization', `Bearer ${accessToken}`);\r\n        }\r\n        return fetch(input, Object.assign(Object.assign({}, init), { headers }));\r\n    });\r\n};\r\n//# sourceMappingURL=fetch.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9mZXRjaC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBLGlCQUFpQixTQUFJLElBQUksU0FBSTtBQUM3Qiw0QkFBNEIsK0RBQStELGlCQUFpQjtBQUM1RztBQUNBLG9DQUFvQyxNQUFNLCtCQUErQixZQUFZO0FBQ3JGLG1DQUFtQyxNQUFNLG1DQUFtQyxZQUFZO0FBQ3hGLGdDQUFnQztBQUNoQztBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQzhFO0FBQ3ZFO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiw2REFBUztBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0EsZUFBZSx5REFBZ0I7QUFDL0I7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1EQUFtRCxZQUFZO0FBQy9EO0FBQ0EsMERBQTBELFdBQVcsU0FBUztBQUM5RSxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2Uvc3VwYWJhc2UtanMvZGlzdC9tb2R1bGUvbGliL2ZldGNoLmpzP2NiMjMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cclxuICAgIHJldHVybiBuZXcgKFAgfHwgKFAgPSBQcm9taXNlKSkoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cclxuICAgICAgICBmdW5jdGlvbiBzdGVwKHJlc3VsdCkgeyByZXN1bHQuZG9uZSA/IHJlc29sdmUocmVzdWx0LnZhbHVlKSA6IGFkb3B0KHJlc3VsdC52YWx1ZSkudGhlbihmdWxmaWxsZWQsIHJlamVjdGVkKTsgfVxyXG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcclxuICAgIH0pO1xyXG59O1xyXG4vLyBAdHMtaWdub3JlXHJcbmltcG9ydCBub2RlRmV0Y2gsIHsgSGVhZGVycyBhcyBOb2RlRmV0Y2hIZWFkZXJzIH0gZnJvbSAnQHN1cGFiYXNlL25vZGUtZmV0Y2gnO1xyXG5leHBvcnQgY29uc3QgcmVzb2x2ZUZldGNoID0gKGN1c3RvbUZldGNoKSA9PiB7XHJcbiAgICBsZXQgX2ZldGNoO1xyXG4gICAgaWYgKGN1c3RvbUZldGNoKSB7XHJcbiAgICAgICAgX2ZldGNoID0gY3VzdG9tRmV0Y2g7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICh0eXBlb2YgZmV0Y2ggPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgX2ZldGNoID0gbm9kZUZldGNoO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgX2ZldGNoID0gZmV0Y2g7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gKC4uLmFyZ3MpID0+IF9mZXRjaCguLi5hcmdzKTtcclxufTtcclxuZXhwb3J0IGNvbnN0IHJlc29sdmVIZWFkZXJzQ29uc3RydWN0b3IgPSAoKSA9PiB7XHJcbiAgICBpZiAodHlwZW9mIEhlYWRlcnMgPT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICAgICAgcmV0dXJuIE5vZGVGZXRjaEhlYWRlcnM7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gSGVhZGVycztcclxufTtcclxuZXhwb3J0IGNvbnN0IGZldGNoV2l0aEF1dGggPSAoc3VwYWJhc2VLZXksIGdldEFjY2Vzc1Rva2VuLCBjdXN0b21GZXRjaCkgPT4ge1xyXG4gICAgY29uc3QgZmV0Y2ggPSByZXNvbHZlRmV0Y2goY3VzdG9tRmV0Y2gpO1xyXG4gICAgY29uc3QgSGVhZGVyc0NvbnN0cnVjdG9yID0gcmVzb2x2ZUhlYWRlcnNDb25zdHJ1Y3RvcigpO1xyXG4gICAgcmV0dXJuIChpbnB1dCwgaW5pdCkgPT4gX19hd2FpdGVyKHZvaWQgMCwgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XHJcbiAgICAgICAgdmFyIF9hO1xyXG4gICAgICAgIGNvbnN0IGFjY2Vzc1Rva2VuID0gKF9hID0gKHlpZWxkIGdldEFjY2Vzc1Rva2VuKCkpKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiBzdXBhYmFzZUtleTtcclxuICAgICAgICBsZXQgaGVhZGVycyA9IG5ldyBIZWFkZXJzQ29uc3RydWN0b3IoaW5pdCA9PT0gbnVsbCB8fCBpbml0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBpbml0LmhlYWRlcnMpO1xyXG4gICAgICAgIGlmICghaGVhZGVycy5oYXMoJ2FwaWtleScpKSB7XHJcbiAgICAgICAgICAgIGhlYWRlcnMuc2V0KCdhcGlrZXknLCBzdXBhYmFzZUtleSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICghaGVhZGVycy5oYXMoJ0F1dGhvcml6YXRpb24nKSkge1xyXG4gICAgICAgICAgICBoZWFkZXJzLnNldCgnQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZldGNoKGlucHV0LCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIGluaXQpLCB7IGhlYWRlcnMgfSkpO1xyXG4gICAgfSk7XHJcbn07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZldGNoLmpzLm1hcFxyXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/fetch.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/helpers.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@supabase/supabase-js/dist/module/lib/helpers.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applySettingDefaults: () => (/* binding */ applySettingDefaults),\n/* harmony export */   ensureTrailingSlash: () => (/* binding */ ensureTrailingSlash),\n/* harmony export */   isBrowser: () => (/* binding */ isBrowser),\n/* harmony export */   uuid: () => (/* binding */ uuid),\n/* harmony export */   validateSupabaseUrl: () => (/* binding */ validateSupabaseUrl)\n/* harmony export */ });\nvar __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nfunction uuid() {\r\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\r\n        var r = (Math.random() * 16) | 0, v = c == 'x' ? r : (r & 0x3) | 0x8;\r\n        return v.toString(16);\r\n    });\r\n}\r\nfunction ensureTrailingSlash(url) {\r\n    return url.endsWith('/') ? url : url + '/';\r\n}\r\nconst isBrowser = () => typeof window !== 'undefined';\r\nfunction applySettingDefaults(options, defaults) {\r\n    var _a, _b;\r\n    const { db: dbOptions, auth: authOptions, realtime: realtimeOptions, global: globalOptions, } = options;\r\n    const { db: DEFAULT_DB_OPTIONS, auth: DEFAULT_AUTH_OPTIONS, realtime: DEFAULT_REALTIME_OPTIONS, global: DEFAULT_GLOBAL_OPTIONS, } = defaults;\r\n    const result = {\r\n        db: Object.assign(Object.assign({}, DEFAULT_DB_OPTIONS), dbOptions),\r\n        auth: Object.assign(Object.assign({}, DEFAULT_AUTH_OPTIONS), authOptions),\r\n        realtime: Object.assign(Object.assign({}, DEFAULT_REALTIME_OPTIONS), realtimeOptions),\r\n        storage: {},\r\n        global: Object.assign(Object.assign(Object.assign({}, DEFAULT_GLOBAL_OPTIONS), globalOptions), { headers: Object.assign(Object.assign({}, ((_a = DEFAULT_GLOBAL_OPTIONS === null || DEFAULT_GLOBAL_OPTIONS === void 0 ? void 0 : DEFAULT_GLOBAL_OPTIONS.headers) !== null && _a !== void 0 ? _a : {})), ((_b = globalOptions === null || globalOptions === void 0 ? void 0 : globalOptions.headers) !== null && _b !== void 0 ? _b : {})) }),\r\n        accessToken: () => __awaiter(this, void 0, void 0, function* () { return ''; }),\r\n    };\r\n    if (options.accessToken) {\r\n        result.accessToken = options.accessToken;\r\n    }\r\n    else {\r\n        // hack around Required<>\r\n        delete result.accessToken;\r\n    }\r\n    return result;\r\n}\r\n/**\r\n * Validates a Supabase client URL\r\n *\r\n * @param {string} supabaseUrl - The Supabase client URL string.\r\n * @returns {URL} - The validated base URL.\r\n * @throws {Error}\r\n */\r\nfunction validateSupabaseUrl(supabaseUrl) {\r\n    const trimmedUrl = supabaseUrl === null || supabaseUrl === void 0 ? void 0 : supabaseUrl.trim();\r\n    if (!trimmedUrl) {\r\n        throw new Error('supabaseUrl is required.');\r\n    }\r\n    if (!trimmedUrl.match(/^https?:\\/\\//i)) {\r\n        throw new Error('Invalid supabaseUrl: Must be a valid HTTP or HTTPS URL.');\r\n    }\r\n    try {\r\n        return new URL(ensureTrailingSlash(trimmedUrl));\r\n    }\r\n    catch (_a) {\r\n        throw Error('Invalid supabaseUrl: Provided URL is malformed.');\r\n    }\r\n}\r\n//# sourceMappingURL=helpers.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi9oZWxwZXJzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQUEsaUJBQWlCLFNBQUksSUFBSSxTQUFJO0FBQzdCLDRCQUE0QiwrREFBK0QsaUJBQWlCO0FBQzVHO0FBQ0Esb0NBQW9DLE1BQU0sK0JBQStCLFlBQVk7QUFDckYsbUNBQW1DLE1BQU0sbUNBQW1DLFlBQVk7QUFDeEYsZ0NBQWdDO0FBQ2hDO0FBQ0EsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDTztBQUNQO0FBQ0E7QUFDTztBQUNBO0FBQ1A7QUFDQSxZQUFZLHNGQUFzRjtBQUNsRyxZQUFZLDBIQUEwSDtBQUN0STtBQUNBLDBDQUEwQztBQUMxQyw0Q0FBNEM7QUFDNUMsZ0RBQWdEO0FBQ2hELG1CQUFtQjtBQUNuQiw0REFBNEQsNkNBQTZDLHVDQUF1Qyw0SkFBNEosbUlBQW1JLElBQUk7QUFDbmIsMEVBQTBFLFlBQVk7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxLQUFLO0FBQ2xCLFlBQVk7QUFDWjtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9zdXBhYmFzZS1qcy9kaXN0L21vZHVsZS9saWIvaGVscGVycy5qcz9iOGZhIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBfX2F3YWl0ZXIgPSAodGhpcyAmJiB0aGlzLl9fYXdhaXRlcikgfHwgZnVuY3Rpb24gKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0IGZ1bmN0aW9uIHV1aWQoKSB7XHJcbiAgICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgIHZhciByID0gKE1hdGgucmFuZG9tKCkgKiAxNikgfCAwLCB2ID0gYyA9PSAneCcgPyByIDogKHIgJiAweDMpIHwgMHg4O1xyXG4gICAgICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KTtcclxuICAgIH0pO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBlbnN1cmVUcmFpbGluZ1NsYXNoKHVybCkge1xyXG4gICAgcmV0dXJuIHVybC5lbmRzV2l0aCgnLycpID8gdXJsIDogdXJsICsgJy8nO1xyXG59XHJcbmV4cG9ydCBjb25zdCBpc0Jyb3dzZXIgPSAoKSA9PiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5U2V0dGluZ0RlZmF1bHRzKG9wdGlvbnMsIGRlZmF1bHRzKSB7XHJcbiAgICB2YXIgX2EsIF9iO1xyXG4gICAgY29uc3QgeyBkYjogZGJPcHRpb25zLCBhdXRoOiBhdXRoT3B0aW9ucywgcmVhbHRpbWU6IHJlYWx0aW1lT3B0aW9ucywgZ2xvYmFsOiBnbG9iYWxPcHRpb25zLCB9ID0gb3B0aW9ucztcclxuICAgIGNvbnN0IHsgZGI6IERFRkFVTFRfREJfT1BUSU9OUywgYXV0aDogREVGQVVMVF9BVVRIX09QVElPTlMsIHJlYWx0aW1lOiBERUZBVUxUX1JFQUxUSU1FX09QVElPTlMsIGdsb2JhbDogREVGQVVMVF9HTE9CQUxfT1BUSU9OUywgfSA9IGRlZmF1bHRzO1xyXG4gICAgY29uc3QgcmVzdWx0ID0ge1xyXG4gICAgICAgIGRiOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfREJfT1BUSU9OUyksIGRiT3B0aW9ucyksXHJcbiAgICAgICAgYXV0aDogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX0FVVEhfT1BUSU9OUyksIGF1dGhPcHRpb25zKSxcclxuICAgICAgICByZWFsdGltZTogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBERUZBVUxUX1JFQUxUSU1FX09QVElPTlMpLCByZWFsdGltZU9wdGlvbnMpLFxyXG4gICAgICAgIHN0b3JhZ2U6IHt9LFxyXG4gICAgICAgIGdsb2JhbDogT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIERFRkFVTFRfR0xPQkFMX09QVElPTlMpLCBnbG9iYWxPcHRpb25zKSwgeyBoZWFkZXJzOiBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sICgoX2EgPSBERUZBVUxUX0dMT0JBTF9PUFRJT05TID09PSBudWxsIHx8IERFRkFVTFRfR0xPQkFMX09QVElPTlMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IERFRkFVTFRfR0xPQkFMX09QVElPTlMuaGVhZGVycykgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDoge30pKSwgKChfYiA9IGdsb2JhbE9wdGlvbnMgPT09IG51bGwgfHwgZ2xvYmFsT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZ2xvYmFsT3B0aW9ucy5oZWFkZXJzKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiB7fSkpIH0pLFxyXG4gICAgICAgIGFjY2Vzc1Rva2VuOiAoKSA9PiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7IHJldHVybiAnJzsgfSksXHJcbiAgICB9O1xyXG4gICAgaWYgKG9wdGlvbnMuYWNjZXNzVG9rZW4pIHtcclxuICAgICAgICByZXN1bHQuYWNjZXNzVG9rZW4gPSBvcHRpb25zLmFjY2Vzc1Rva2VuO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gaGFjayBhcm91bmQgUmVxdWlyZWQ8PlxyXG4gICAgICAgIGRlbGV0ZSByZXN1bHQuYWNjZXNzVG9rZW47XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcbi8qKlxyXG4gKiBWYWxpZGF0ZXMgYSBTdXBhYmFzZSBjbGllbnQgVVJMXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdXBhYmFzZVVybCAtIFRoZSBTdXBhYmFzZSBjbGllbnQgVVJMIHN0cmluZy5cclxuICogQHJldHVybnMge1VSTH0gLSBUaGUgdmFsaWRhdGVkIGJhc2UgVVJMLlxyXG4gKiBAdGhyb3dzIHtFcnJvcn1cclxuICovXHJcbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZVN1cGFiYXNlVXJsKHN1cGFiYXNlVXJsKSB7XHJcbiAgICBjb25zdCB0cmltbWVkVXJsID0gc3VwYWJhc2VVcmwgPT09IG51bGwgfHwgc3VwYWJhc2VVcmwgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN1cGFiYXNlVXJsLnRyaW0oKTtcclxuICAgIGlmICghdHJpbW1lZFVybCkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvcignc3VwYWJhc2VVcmwgaXMgcmVxdWlyZWQuJyk7XHJcbiAgICB9XHJcbiAgICBpZiAoIXRyaW1tZWRVcmwubWF0Y2goL15odHRwcz86XFwvXFwvL2kpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHN1cGFiYXNlVXJsOiBNdXN0IGJlIGEgdmFsaWQgSFRUUCBvciBIVFRQUyBVUkwuJyk7XHJcbiAgICB9XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVVJMKGVuc3VyZVRyYWlsaW5nU2xhc2godHJpbW1lZFVybCkpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKF9hKSB7XHJcbiAgICAgICAgdGhyb3cgRXJyb3IoJ0ludmFsaWQgc3VwYWJhc2VVcmw6IFByb3ZpZGVkIFVSTCBpcyBtYWxmb3JtZWQuJyk7XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGVscGVycy5qcy5tYXBcclxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/version.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@supabase/supabase-js/dist/module/lib/version.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   version: () => (/* binding */ version)\n/* harmony export */ });\n// Generated automatically during releases by scripts/update-version-files.ts\r\n// This file provides runtime access to the package version for:\r\n// - HTTP request headers (e.g., X-Client-Info header for API requests)\r\n// - Debugging and support (identifying which version is running)\r\n// - Telemetry and logging (version reporting in errors/analytics)\r\n// - Ensuring build artifacts match the published package version\r\nconst version = '2.75.0';\r\n//# sourceMappingURL=version.js.map\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3N1cGFiYXNlLWpzL2Rpc3QvbW9kdWxlL2xpYi92ZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZmxvd3RyYWNraW5nLWZyb250ZW5kLy4vbm9kZV9tb2R1bGVzL0BzdXBhYmFzZS9zdXBhYmFzZS1qcy9kaXN0L21vZHVsZS9saWIvdmVyc2lvbi5qcz8yOGRjIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEdlbmVyYXRlZCBhdXRvbWF0aWNhbGx5IGR1cmluZyByZWxlYXNlcyBieSBzY3JpcHRzL3VwZGF0ZS12ZXJzaW9uLWZpbGVzLnRzXHJcbi8vIFRoaXMgZmlsZSBwcm92aWRlcyBydW50aW1lIGFjY2VzcyB0byB0aGUgcGFja2FnZSB2ZXJzaW9uIGZvcjpcclxuLy8gLSBIVFRQIHJlcXVlc3QgaGVhZGVycyAoZS5nLiwgWC1DbGllbnQtSW5mbyBoZWFkZXIgZm9yIEFQSSByZXF1ZXN0cylcclxuLy8gLSBEZWJ1Z2dpbmcgYW5kIHN1cHBvcnQgKGlkZW50aWZ5aW5nIHdoaWNoIHZlcnNpb24gaXMgcnVubmluZylcclxuLy8gLSBUZWxlbWV0cnkgYW5kIGxvZ2dpbmcgKHZlcnNpb24gcmVwb3J0aW5nIGluIGVycm9ycy9hbmFseXRpY3MpXHJcbi8vIC0gRW5zdXJpbmcgYnVpbGQgYXJ0aWZhY3RzIG1hdGNoIHRoZSBwdWJsaXNoZWQgcGFja2FnZSB2ZXJzaW9uXHJcbmV4cG9ydCBjb25zdCB2ZXJzaW9uID0gJzIuNzUuMCc7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXZlcnNpb24uanMubWFwXHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/supabase-js/dist/module/lib/version.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs":
/*!******************************************************************!*\
  !*** ./node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PostgrestBuilder: () => (/* binding */ PostgrestBuilder),\n/* harmony export */   PostgrestClient: () => (/* binding */ PostgrestClient),\n/* harmony export */   PostgrestError: () => (/* binding */ PostgrestError),\n/* harmony export */   PostgrestFilterBuilder: () => (/* binding */ PostgrestFilterBuilder),\n/* harmony export */   PostgrestQueryBuilder: () => (/* binding */ PostgrestQueryBuilder),\n/* harmony export */   PostgrestTransformBuilder: () => (/* binding */ PostgrestTransformBuilder),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _cjs_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../cjs/index.js */ \"(ssr)/./node_modules/@supabase/postgrest-js/dist/cjs/index.js\");\n\nconst {\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n} = _cjs_index_js__WEBPACK_IMPORTED_MODULE_0__\n\n\n\n// compatibility with CJS output\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  PostgrestClient,\n  PostgrestQueryBuilder,\n  PostgrestFilterBuilder,\n  PostgrestTransformBuilder,\n  PostgrestBuilder,\n  PostgrestError,\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHN1cGFiYXNlL3Bvc3RncmVzdC1qcy9kaXN0L2VzbS93cmFwcGVyLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFtQztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsRUFBRSwwQ0FBSzs7QUFTUjs7QUFFRDtBQUNBLGlFQUFlO0FBQ2Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL2Zsb3d0cmFja2luZy1mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9Ac3VwYWJhc2UvcG9zdGdyZXN0LWpzL2Rpc3QvZXNtL3dyYXBwZXIubWpzPzc4ZGEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGluZGV4IGZyb20gJy4uL2Nqcy9pbmRleC5qcydcbmNvbnN0IHtcbiAgUG9zdGdyZXN0Q2xpZW50LFxuICBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXIsXG4gIFBvc3RncmVzdEZpbHRlckJ1aWxkZXIsXG4gIFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXIsXG4gIFBvc3RncmVzdEJ1aWxkZXIsXG4gIFBvc3RncmVzdEVycm9yLFxufSA9IGluZGV4XG5cbmV4cG9ydCB7XG4gIFBvc3RncmVzdEJ1aWxkZXIsXG4gIFBvc3RncmVzdENsaWVudCxcbiAgUG9zdGdyZXN0RmlsdGVyQnVpbGRlcixcbiAgUG9zdGdyZXN0UXVlcnlCdWlsZGVyLFxuICBQb3N0Z3Jlc3RUcmFuc2Zvcm1CdWlsZGVyLFxuICBQb3N0Z3Jlc3RFcnJvcixcbn1cblxuLy8gY29tcGF0aWJpbGl0eSB3aXRoIENKUyBvdXRwdXRcbmV4cG9ydCBkZWZhdWx0IHtcbiAgUG9zdGdyZXN0Q2xpZW50LFxuICBQb3N0Z3Jlc3RRdWVyeUJ1aWxkZXIsXG4gIFBvc3RncmVzdEZpbHRlckJ1aWxkZXIsXG4gIFBvc3RncmVzdFRyYW5zZm9ybUJ1aWxkZXIsXG4gIFBvc3RncmVzdEJ1aWxkZXIsXG4gIFBvc3RncmVzdEVycm9yLFxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@supabase/postgrest-js/dist/esm/wrapper.mjs\n");

/***/ })

};
;